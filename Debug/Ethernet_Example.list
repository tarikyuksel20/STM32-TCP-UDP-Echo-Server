
Ethernet_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bcc  0800f0e0  0800f0e0  0001f0e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011cac  08011cac  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  08011cac  08011cac  00021cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011cb4  08011cb4  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011cb4  08011cb4  00021cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011cb8  08011cb8  00021cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08011cbc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006834  20000078  08011d34  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  200068ac  08011d34  000368ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000279da  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004e11  00000000  00000000  00057a82  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001010  00000000  00000000  0005c898  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f70  00000000  00000000  0005d8a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002c338  00000000  00000000  0005e818  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001af7e  00000000  00000000  0008ab50  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d7c65  00000000  00000000  000a5ace  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017d733  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044ac  00000000  00000000  0017d7b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f0c8 	.word	0x0800f0c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800f0c8 	.word	0x0800f0c8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fc3e 	bl	8000df4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f80e 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 f876 	bl	800066c <MX_GPIO_Init>
  MX_LWIP_Init();
 8000580:	f002 fb1a 	bl	8002bb8 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  tcp_echoserver_init();
 8000584:	f000 f9c6 	bl	8000914 <tcp_echoserver_init>
  udp_echoserver_init();
 8000588:	f000 fbca 	bl	8000d20 <udp_echoserver_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_LWIP_Process();
 800058c:	f002 fc34 	bl	8002df8 <MX_LWIP_Process>
	  HAL_Delay(50);
 8000590:	2032      	movs	r0, #50	; 0x32
 8000592:	f000 fca1 	bl	8000ed8 <HAL_Delay>
	  MX_LWIP_Process();
 8000596:	e7f9      	b.n	800058c <main+0x1c>

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	; 0x50
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	2230      	movs	r2, #48	; 0x30
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f00d fe66 	bl	800e278 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 030c 	add.w	r3, r7, #12
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005bc:	2300      	movs	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	4b28      	ldr	r3, [pc, #160]	; (8000664 <SystemClock_Config+0xcc>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	4a27      	ldr	r2, [pc, #156]	; (8000664 <SystemClock_Config+0xcc>)
 80005c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ca:	6413      	str	r3, [r2, #64]	; 0x40
 80005cc:	4b25      	ldr	r3, [pc, #148]	; (8000664 <SystemClock_Config+0xcc>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d8:	2300      	movs	r3, #0
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	4b22      	ldr	r3, [pc, #136]	; (8000668 <SystemClock_Config+0xd0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a21      	ldr	r2, [pc, #132]	; (8000668 <SystemClock_Config+0xd0>)
 80005e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <SystemClock_Config+0xd0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f4:	2301      	movs	r3, #1
 80005f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fe:	2302      	movs	r3, #2
 8000600:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000602:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000606:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000608:	2304      	movs	r3, #4
 800060a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800060c:	23a8      	movs	r3, #168	; 0xa8
 800060e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000610:	2302      	movs	r3, #2
 8000612:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000614:	2304      	movs	r3, #4
 8000616:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000618:	f107 0320 	add.w	r3, r7, #32
 800061c:	4618      	mov	r0, r3
 800061e:	f001 fe91 	bl	8002344 <HAL_RCC_OscConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000628:	f000 f864 	bl	80006f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062c:	230f      	movs	r3, #15
 800062e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000630:	2302      	movs	r3, #2
 8000632:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000638:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800063c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800063e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000642:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	2105      	movs	r1, #5
 800064a:	4618      	mov	r0, r3
 800064c:	f002 f8ea 	bl	8002824 <HAL_RCC_ClockConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000656:	f000 f84d 	bl	80006f4 <Error_Handler>
  }
}
 800065a:	bf00      	nop
 800065c:	3750      	adds	r7, #80	; 0x50
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40023800 	.word	0x40023800
 8000668:	40007000 	.word	0x40007000

0800066c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800066c:	b480      	push	{r7}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	60fb      	str	r3, [r7, #12]
 8000676:	4b1e      	ldr	r3, [pc, #120]	; (80006f0 <MX_GPIO_Init+0x84>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a1d      	ldr	r2, [pc, #116]	; (80006f0 <MX_GPIO_Init+0x84>)
 800067c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <MX_GPIO_Init+0x84>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <MX_GPIO_Init+0x84>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a16      	ldr	r2, [pc, #88]	; (80006f0 <MX_GPIO_Init+0x84>)
 8000698:	f043 0304 	orr.w	r3, r3, #4
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <MX_GPIO_Init+0x84>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0304 	and.w	r3, r3, #4
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <MX_GPIO_Init+0x84>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a0f      	ldr	r2, [pc, #60]	; (80006f0 <MX_GPIO_Init+0x84>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <MX_GPIO_Init+0x84>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	603b      	str	r3, [r7, #0]
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_GPIO_Init+0x84>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a08      	ldr	r2, [pc, #32]	; (80006f0 <MX_GPIO_Init+0x84>)
 80006d0:	f043 0302 	orr.w	r3, r3, #2
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_GPIO_Init+0x84>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0302 	and.w	r3, r3, #2
 80006de:	603b      	str	r3, [r7, #0]
 80006e0:	683b      	ldr	r3, [r7, #0]

}
 80006e2:	bf00      	nop
 80006e4:	3714      	adds	r7, #20
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800

080006f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
	...

08000704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	4b10      	ldr	r3, [pc, #64]	; (8000750 <HAL_MspInit+0x4c>)
 8000710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000712:	4a0f      	ldr	r2, [pc, #60]	; (8000750 <HAL_MspInit+0x4c>)
 8000714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000718:	6453      	str	r3, [r2, #68]	; 0x44
 800071a:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <HAL_MspInit+0x4c>)
 800071c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800071e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <HAL_MspInit+0x4c>)
 800072c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072e:	4a08      	ldr	r2, [pc, #32]	; (8000750 <HAL_MspInit+0x4c>)
 8000730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000734:	6413      	str	r3, [r2, #64]	; 0x40
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <HAL_MspInit+0x4c>)
 8000738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800

08000754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr

08000762 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000766:	e7fe      	b.n	8000766 <HardFault_Handler+0x4>

08000768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800076c:	e7fe      	b.n	800076c <MemManage_Handler+0x4>

0800076e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000772:	e7fe      	b.n	8000772 <BusFault_Handler+0x4>

08000774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000778:	e7fe      	b.n	8000778 <UsageFault_Handler+0x4>

0800077a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800077a:	b480      	push	{r7}
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr

08000788 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr

08000796 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a8:	f000 fb76 	bl	8000e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
 80007c0:	e00a      	b.n	80007d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007c2:	f3af 8000 	nop.w
 80007c6:	4601      	mov	r1, r0
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	1c5a      	adds	r2, r3, #1
 80007cc:	60ba      	str	r2, [r7, #8]
 80007ce:	b2ca      	uxtb	r2, r1
 80007d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	3301      	adds	r3, #1
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	697a      	ldr	r2, [r7, #20]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	429a      	cmp	r2, r3
 80007de:	dbf0      	blt.n	80007c2 <_read+0x12>
	}

return len;
 80007e0:	687b      	ldr	r3, [r7, #4]
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3718      	adds	r7, #24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b086      	sub	sp, #24
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	60f8      	str	r0, [r7, #12]
 80007f2:	60b9      	str	r1, [r7, #8]
 80007f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
 80007fa:	e009      	b.n	8000810 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	1c5a      	adds	r2, r3, #1
 8000800:	60ba      	str	r2, [r7, #8]
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	4618      	mov	r0, r3
 8000806:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	3301      	adds	r3, #1
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	697a      	ldr	r2, [r7, #20]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	429a      	cmp	r2, r3
 8000816:	dbf1      	blt.n	80007fc <_write+0x12>
	}
	return len;
 8000818:	687b      	ldr	r3, [r7, #4]
}
 800081a:	4618      	mov	r0, r3
 800081c:	3718      	adds	r7, #24
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <_close>:

int _close(int file)
{
 8000822:	b480      	push	{r7}
 8000824:	b083      	sub	sp, #12
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
	return -1;
 800082a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800082e:	4618      	mov	r0, r3
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr

0800083a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800083a:	b480      	push	{r7}
 800083c:	b083      	sub	sp, #12
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
 8000842:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800084a:	605a      	str	r2, [r3, #4]
	return 0;
 800084c:	2300      	movs	r3, #0
}
 800084e:	4618      	mov	r0, r3
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr

0800085a <_isatty>:

int _isatty(int file)
{
 800085a:	b480      	push	{r7}
 800085c:	b083      	sub	sp, #12
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
	return 1;
 8000862:	2301      	movs	r3, #1
}
 8000864:	4618      	mov	r0, r3
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
	return 0;
 800087c:	2300      	movs	r3, #0
}
 800087e:	4618      	mov	r0, r3
 8000880:	3714      	adds	r7, #20
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
	...

0800088c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <_sbrk+0x50>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d102      	bne.n	80008a2 <_sbrk+0x16>
		heap_end = &end;
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <_sbrk+0x50>)
 800089e:	4a10      	ldr	r2, [pc, #64]	; (80008e0 <_sbrk+0x54>)
 80008a0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <_sbrk+0x50>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <_sbrk+0x50>)
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	4413      	add	r3, r2
 80008b0:	466a      	mov	r2, sp
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d905      	bls.n	80008c2 <_sbrk+0x36>
	{
		errno = ENOMEM;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <_sbrk+0x58>)
 80008b8:	220c      	movs	r2, #12
 80008ba:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80008bc:	f04f 33ff 	mov.w	r3, #4294967295
 80008c0:	e006      	b.n	80008d0 <_sbrk+0x44>
	}

	heap_end += incr;
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <_sbrk+0x50>)
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4413      	add	r3, r2
 80008ca:	4a04      	ldr	r2, [pc, #16]	; (80008dc <_sbrk+0x50>)
 80008cc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80008ce:	68fb      	ldr	r3, [r7, #12]
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3714      	adds	r7, #20
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	20000094 	.word	0x20000094
 80008e0:	200068b0 	.word	0x200068b0
 80008e4:	200068a8 	.word	0x200068a8

080008e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008ec:	4b08      	ldr	r3, [pc, #32]	; (8000910 <SystemInit+0x28>)
 80008ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008f2:	4a07      	ldr	r2, [pc, #28]	; (8000910 <SystemInit+0x28>)
 80008f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008fc:	4b04      	ldr	r3, [pc, #16]	; (8000910 <SystemInit+0x28>)
 80008fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000902:	609a      	str	r2, [r3, #8]
#endif
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <tcp_echoserver_init>:
  * @brief  Initializes the tcp echo server
  * @param  None
  * @retval None
  */
void tcp_echoserver_init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
  /* create new tcp pcb */
  tcp_echoserver_pcb = tcp_new();
 800091a:	f005 fe43 	bl	80065a4 <tcp_new>
 800091e:	4602      	mov	r2, r0
 8000920:	4b16      	ldr	r3, [pc, #88]	; (800097c <tcp_echoserver_init+0x68>)
 8000922:	601a      	str	r2, [r3, #0]

  if (tcp_echoserver_pcb != NULL)
 8000924:	4b15      	ldr	r3, [pc, #84]	; (800097c <tcp_echoserver_init+0x68>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d022      	beq.n	8000972 <tcp_echoserver_init+0x5e>
  {
    err_t err;
    
    /* bind echo_pcb to port 7 (ECHO protocol) */
    err = tcp_bind(tcp_echoserver_pcb, IP_ADDR_ANY, 7);
 800092c:	4b13      	ldr	r3, [pc, #76]	; (800097c <tcp_echoserver_init+0x68>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2207      	movs	r2, #7
 8000932:	4913      	ldr	r1, [pc, #76]	; (8000980 <tcp_echoserver_init+0x6c>)
 8000934:	4618      	mov	r0, r3
 8000936:	f004 fd95 	bl	8005464 <tcp_bind>
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
    
    if (err == ERR_OK)
 800093e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d10f      	bne.n	8000966 <tcp_echoserver_init+0x52>
    {
      /* start tcp listening for echo_pcb */
      tcp_echoserver_pcb = tcp_listen(tcp_echoserver_pcb);
 8000946:	4b0d      	ldr	r3, [pc, #52]	; (800097c <tcp_echoserver_init+0x68>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	21ff      	movs	r1, #255	; 0xff
 800094c:	4618      	mov	r0, r3
 800094e:	f004 fe41 	bl	80055d4 <tcp_listen_with_backlog>
 8000952:	4602      	mov	r2, r0
 8000954:	4b09      	ldr	r3, [pc, #36]	; (800097c <tcp_echoserver_init+0x68>)
 8000956:	601a      	str	r2, [r3, #0]
      
      /* initialize LwIP tcp_accept callback function */
      tcp_accept(tcp_echoserver_pcb, tcp_echoserver_accept);
 8000958:	4b08      	ldr	r3, [pc, #32]	; (800097c <tcp_echoserver_init+0x68>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4909      	ldr	r1, [pc, #36]	; (8000984 <tcp_echoserver_init+0x70>)
 800095e:	4618      	mov	r0, r3
 8000960:	f005 fea0 	bl	80066a4 <tcp_accept>
    {
      /* deallocate the pcb */
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
    }
  }
}
 8000964:	e005      	b.n	8000972 <tcp_echoserver_init+0x5e>
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
 8000966:	4b05      	ldr	r3, [pc, #20]	; (800097c <tcp_echoserver_init+0x68>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4619      	mov	r1, r3
 800096c:	2001      	movs	r0, #1
 800096e:	f003 f9e3 	bl	8003d38 <memp_free>
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000098 	.word	0x20000098
 8000980:	08011c00 	.word	0x08011c00
 8000984:	08000989 	.word	0x08000989

08000988 <tcp_echoserver_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used 
  * @retval err_t: error status
  */
static err_t tcp_echoserver_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
 800098e:	60f8      	str	r0, [r7, #12]
 8000990:	60b9      	str	r1, [r7, #8]
 8000992:	4613      	mov	r3, r2
 8000994:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 8000996:	2101      	movs	r1, #1
 8000998:	68b8      	ldr	r0, [r7, #8]
 800099a:	f005 fc11 	bl	80061c0 <tcp_setprio>

  /* allocate structure es to maintain tcp connection informations */
  es = (struct tcp_echoserver_struct *)mem_malloc(sizeof(struct tcp_echoserver_struct));
 800099e:	200c      	movs	r0, #12
 80009a0:	f003 f810 	bl	80039c4 <mem_malloc>
 80009a4:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 80009a6:	693b      	ldr	r3, [r7, #16]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d01f      	beq.n	80009ec <tcp_echoserver_accept+0x64>
  {
    es->state = ES_ACCEPTED;
 80009ac:	693b      	ldr	r3, [r7, #16]
 80009ae:	2201      	movs	r2, #1
 80009b0:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	68ba      	ldr	r2, [r7, #8]
 80009b6:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 80009b8:	693b      	ldr	r3, [r7, #16]
 80009ba:	2200      	movs	r2, #0
 80009bc:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 80009be:	693b      	ldr	r3, [r7, #16]
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
    
    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 80009c4:	6939      	ldr	r1, [r7, #16]
 80009c6:	68b8      	ldr	r0, [r7, #8]
 80009c8:	f005 fdf4 	bl	80065b4 <tcp_arg>
    
    /* initialize lwip tcp_recv callback function for newpcb  */ 
    tcp_recv(newpcb, tcp_echoserver_recv);
 80009cc:	490d      	ldr	r1, [pc, #52]	; (8000a04 <tcp_echoserver_accept+0x7c>)
 80009ce:	68b8      	ldr	r0, [r7, #8]
 80009d0:	f005 fe02 	bl	80065d8 <tcp_recv>
    
    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_echoserver_error);
 80009d4:	490c      	ldr	r1, [pc, #48]	; (8000a08 <tcp_echoserver_accept+0x80>)
 80009d6:	68b8      	ldr	r0, [r7, #8]
 80009d8:	f005 fe42 	bl	8006660 <tcp_err>
    
    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_echoserver_poll, 0);
 80009dc:	2200      	movs	r2, #0
 80009de:	490b      	ldr	r1, [pc, #44]	; (8000a0c <tcp_echoserver_accept+0x84>)
 80009e0:	68b8      	ldr	r0, [r7, #8]
 80009e2:	f005 fe77 	bl	80066d4 <tcp_poll>
    
    ret_err = ERR_OK;
 80009e6:	2300      	movs	r3, #0
 80009e8:	75fb      	strb	r3, [r7, #23]
 80009ea:	e005      	b.n	80009f8 <tcp_echoserver_accept+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_echoserver_connection_close(newpcb, es);
 80009ec:	6939      	ldr	r1, [r7, #16]
 80009ee:	68b8      	ldr	r0, [r7, #8]
 80009f0:	f000 f96f 	bl	8000cd2 <tcp_echoserver_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 80009f4:	23ff      	movs	r3, #255	; 0xff
 80009f6:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;  
 80009f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3718      	adds	r7, #24
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	08000a11 	.word	0x08000a11
 8000a08:	08000b59 	.word	0x08000b59
 8000a0c:	08000b7d 	.word	0x08000b7d

08000a10 <tcp_echoserver_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_echoserver_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b088      	sub	sp, #32
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]
 8000a1c:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d105      	bne.n	8000a30 <tcp_echoserver_recv+0x20>
 8000a24:	4b47      	ldr	r3, [pc, #284]	; (8000b44 <tcp_echoserver_recv+0x134>)
 8000a26:	22ad      	movs	r2, #173	; 0xad
 8000a28:	4947      	ldr	r1, [pc, #284]	; (8000b48 <tcp_echoserver_recv+0x138>)
 8000a2a:	4848      	ldr	r0, [pc, #288]	; (8000b4c <tcp_echoserver_recv+0x13c>)
 8000a2c:	f00d fc2c 	bl	800e288 <iprintf>
  
  es = (struct tcp_echoserver_struct *)arg;
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	61bb      	str	r3, [r7, #24]
  
  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d116      	bne.n	8000a68 <tcp_echoserver_recv+0x58>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8000a3a:	69bb      	ldr	r3, [r7, #24]
 8000a3c:	2203      	movs	r2, #3
 8000a3e:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8000a40:	69bb      	ldr	r3, [r7, #24]
 8000a42:	689b      	ldr	r3, [r3, #8]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d104      	bne.n	8000a52 <tcp_echoserver_recv+0x42>
    {
       /* we're done sending, close connection */
       tcp_echoserver_connection_close(tpcb, es);
 8000a48:	69b9      	ldr	r1, [r7, #24]
 8000a4a:	68b8      	ldr	r0, [r7, #8]
 8000a4c:	f000 f941 	bl	8000cd2 <tcp_echoserver_connection_close>
 8000a50:	e007      	b.n	8000a62 <tcp_echoserver_recv+0x52>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_echoserver_sent);
 8000a52:	493f      	ldr	r1, [pc, #252]	; (8000b50 <tcp_echoserver_recv+0x140>)
 8000a54:	68b8      	ldr	r0, [r7, #8]
 8000a56:	f005 fde1 	bl	800661c <tcp_sent>
      
      /* send remaining data*/
      tcp_echoserver_send(tpcb, es);
 8000a5a:	69b9      	ldr	r1, [r7, #24]
 8000a5c:	68b8      	ldr	r0, [r7, #8]
 8000a5e:	f000 f8e5 	bl	8000c2c <tcp_echoserver_send>
    }
    ret_err = ERR_OK;
 8000a62:	2300      	movs	r3, #0
 8000a64:	77fb      	strb	r3, [r7, #31]
 8000a66:	e067      	b.n	8000b38 <tcp_echoserver_recv+0x128>
  }   
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8000a68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d00b      	beq.n	8000a88 <tcp_echoserver_recv+0x78>
  {
    /* free received pbuf*/
    if (p != NULL)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d005      	beq.n	8000a82 <tcp_echoserver_recv+0x72>
    {
      es->p = NULL;
 8000a76:	69bb      	ldr	r3, [r7, #24]
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f003 ff55 	bl	800492c <pbuf_free>
    }
    ret_err = err;
 8000a82:	78fb      	ldrb	r3, [r7, #3]
 8000a84:	77fb      	strb	r3, [r7, #31]
 8000a86:	e057      	b.n	8000b38 <tcp_echoserver_recv+0x128>
  }
  else if(es->state == ES_ACCEPTED)
 8000a88:	69bb      	ldr	r3, [r7, #24]
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d114      	bne.n	8000aba <tcp_echoserver_recv+0xaa>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	2202      	movs	r2, #2
 8000a94:	701a      	strb	r2, [r3, #0]
    
    /* store reference to incoming pbuf (chain) */
    es->p = p;
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	687a      	ldr	r2, [r7, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
    
    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_echoserver_sent);
 8000a9c:	492c      	ldr	r1, [pc, #176]	; (8000b50 <tcp_echoserver_recv+0x140>)
 8000a9e:	68b8      	ldr	r0, [r7, #8]
 8000aa0:	f005 fdbc 	bl	800661c <tcp_sent>
    
    /* send back the received data (echo) */
    es->p->payload = "STM32F407\r\n";
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	4a2a      	ldr	r2, [pc, #168]	; (8000b54 <tcp_echoserver_recv+0x144>)
 8000aaa:	605a      	str	r2, [r3, #4]
    tcp_echoserver_send(tpcb, es);
 8000aac:	69b9      	ldr	r1, [r7, #24]
 8000aae:	68b8      	ldr	r0, [r7, #8]
 8000ab0:	f000 f8bc 	bl	8000c2c <tcp_echoserver_send>
    
    ret_err = ERR_OK;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	77fb      	strb	r3, [r7, #31]
 8000ab8:	e03e      	b.n	8000b38 <tcp_echoserver_recv+0x128>
  }
  else if (es->state == ES_RECEIVED)
 8000aba:	69bb      	ldr	r3, [r7, #24]
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b02      	cmp	r3, #2
 8000ac0:	d119      	bne.n	8000af6 <tcp_echoserver_recv+0xe6>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 8000ac2:	69bb      	ldr	r3, [r7, #24]
 8000ac4:	689b      	ldr	r3, [r3, #8]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d10b      	bne.n	8000ae2 <tcp_echoserver_recv+0xd2>
    {
      es->p = p;
 8000aca:	69bb      	ldr	r3, [r7, #24]
 8000acc:	687a      	ldr	r2, [r7, #4]
 8000ace:	609a      	str	r2, [r3, #8]
  
      /* send back received data */
      es->p->payload = "STM32F407\r\n";
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	4a1f      	ldr	r2, [pc, #124]	; (8000b54 <tcp_echoserver_recv+0x144>)
 8000ad6:	605a      	str	r2, [r3, #4]
      tcp_echoserver_send(tpcb, es);
 8000ad8:	69b9      	ldr	r1, [r7, #24]
 8000ada:	68b8      	ldr	r0, [r7, #8]
 8000adc:	f000 f8a6 	bl	8000c2c <tcp_echoserver_send>
 8000ae0:	e006      	b.n	8000af0 <tcp_echoserver_recv+0xe0>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 8000ae2:	69bb      	ldr	r3, [r7, #24]
 8000ae4:	689b      	ldr	r3, [r3, #8]
 8000ae6:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 8000ae8:	6879      	ldr	r1, [r7, #4]
 8000aea:	6978      	ldr	r0, [r7, #20]
 8000aec:	f004 f836 	bl	8004b5c <pbuf_chain>
    }
    ret_err = ERR_OK;
 8000af0:	2300      	movs	r3, #0
 8000af2:	77fb      	strb	r3, [r7, #31]
 8000af4:	e020      	b.n	8000b38 <tcp_echoserver_recv+0x128>
  }
  else if(es->state == ES_CLOSING)
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b03      	cmp	r3, #3
 8000afc:	d10e      	bne.n	8000b1c <tcp_echoserver_recv+0x10c>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	891b      	ldrh	r3, [r3, #8]
 8000b02:	4619      	mov	r1, r3
 8000b04:	68b8      	ldr	r0, [r7, #8]
 8000b06:	f004 fe7b 	bl	8005800 <tcp_recved>
    es->p = NULL;
 8000b0a:	69bb      	ldr	r3, [r7, #24]
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f003 ff0b 	bl	800492c <pbuf_free>
    ret_err = ERR_OK;
 8000b16:	2300      	movs	r3, #0
 8000b18:	77fb      	strb	r3, [r7, #31]
 8000b1a:	e00d      	b.n	8000b38 <tcp_echoserver_recv+0x128>
  }
  else
  {
    /* unkown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	891b      	ldrh	r3, [r3, #8]
 8000b20:	4619      	mov	r1, r3
 8000b22:	68b8      	ldr	r0, [r7, #8]
 8000b24:	f004 fe6c 	bl	8005800 <tcp_recved>
    es->p = NULL;
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f003 fefc 	bl	800492c <pbuf_free>
    ret_err = ERR_OK;
 8000b34:	2300      	movs	r3, #0
 8000b36:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 8000b38:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3720      	adds	r7, #32
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	0800f0e0 	.word	0x0800f0e0
 8000b48:	0800f100 	.word	0x0800f100
 8000b4c:	0800f10c 	.word	0x0800f10c
 8000b50:	08000bdd 	.word	0x08000bdd
 8000b54:	0800f134 	.word	0x0800f134

08000b58 <tcp_echoserver_error>:
  * @param  arg: pointer on argument parameter 
  * @param  err: not used
  * @retval None
  */
static void tcp_echoserver_error(void *arg, err_t err)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	460b      	mov	r3, r1
 8000b62:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_echoserver_struct *)arg;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d002      	beq.n	8000b74 <tcp_echoserver_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 8000b6e:	68f8      	ldr	r0, [r7, #12]
 8000b70:	f002 fdc2 	bl	80036f8 <mem_free>
  }
}
 8000b74:	bf00      	nop
 8000b76:	3710      	adds	r7, #16
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <tcp_echoserver_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_echoserver_poll(void *arg, struct tcp_pcb *tpcb)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_echoserver_struct *es;

  es = (struct tcp_echoserver_struct *)arg;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d017      	beq.n	8000bc0 <tcp_echoserver_poll+0x44>
  {
    if (es->p != NULL)
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	689b      	ldr	r3, [r3, #8]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d008      	beq.n	8000baa <tcp_echoserver_poll+0x2e>
    {
      tcp_sent(tpcb, tcp_echoserver_sent);
 8000b98:	490f      	ldr	r1, [pc, #60]	; (8000bd8 <tcp_echoserver_poll+0x5c>)
 8000b9a:	6838      	ldr	r0, [r7, #0]
 8000b9c:	f005 fd3e 	bl	800661c <tcp_sent>
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_echoserver_send(tpcb, es);
 8000ba0:	68b9      	ldr	r1, [r7, #8]
 8000ba2:	6838      	ldr	r0, [r7, #0]
 8000ba4:	f000 f842 	bl	8000c2c <tcp_echoserver_send>
 8000ba8:	e007      	b.n	8000bba <tcp_echoserver_poll+0x3e>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b03      	cmp	r3, #3
 8000bb0:	d103      	bne.n	8000bba <tcp_echoserver_poll+0x3e>
      {
        /*  close tcp connection */
        tcp_echoserver_connection_close(tpcb, es);
 8000bb2:	68b9      	ldr	r1, [r7, #8]
 8000bb4:	6838      	ldr	r0, [r7, #0]
 8000bb6:	f000 f88c 	bl	8000cd2 <tcp_echoserver_connection_close>
      }
    }
    ret_err = ERR_OK;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	73fb      	strb	r3, [r7, #15]
 8000bbe:	e004      	b.n	8000bca <tcp_echoserver_poll+0x4e>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 8000bc0:	6838      	ldr	r0, [r7, #0]
 8000bc2:	f004 fc43 	bl	800544c <tcp_abort>
    ret_err = ERR_ABRT;
 8000bc6:	23f3      	movs	r3, #243	; 0xf3
 8000bc8:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8000bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	08000bdd 	.word	0x08000bdd

08000bdc <tcp_echoserver_sent>:
  *         is received from remote host for sent data) 
  * @param  None
  * @retval None
  */
static err_t tcp_echoserver_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	60b9      	str	r1, [r7, #8]
 8000be6:	4613      	mov	r3, r2
 8000be8:	80fb      	strh	r3, [r7, #6]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_echoserver_struct *)arg;
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	705a      	strb	r2, [r3, #1]
  
  if(es->p != NULL)
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	689b      	ldr	r3, [r3, #8]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d008      	beq.n	8000c0e <tcp_echoserver_sent+0x32>
  {
    /* still got pbufs to send */
    tcp_sent(tpcb, tcp_echoserver_sent);
 8000bfc:	490a      	ldr	r1, [pc, #40]	; (8000c28 <tcp_echoserver_sent+0x4c>)
 8000bfe:	68b8      	ldr	r0, [r7, #8]
 8000c00:	f005 fd0c 	bl	800661c <tcp_sent>
    tcp_echoserver_send(tpcb, es);
 8000c04:	6979      	ldr	r1, [r7, #20]
 8000c06:	68b8      	ldr	r0, [r7, #8]
 8000c08:	f000 f810 	bl	8000c2c <tcp_echoserver_send>
 8000c0c:	e007      	b.n	8000c1e <tcp_echoserver_sent+0x42>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b03      	cmp	r3, #3
 8000c14:	d103      	bne.n	8000c1e <tcp_echoserver_sent+0x42>
      tcp_echoserver_connection_close(tpcb, es);
 8000c16:	6979      	ldr	r1, [r7, #20]
 8000c18:	68b8      	ldr	r0, [r7, #8]
 8000c1a:	f000 f85a 	bl	8000cd2 <tcp_echoserver_connection_close>
  }
  return ERR_OK;
 8000c1e:	2300      	movs	r3, #0
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	08000bdd 	.word	0x08000bdd

08000c2c <tcp_echoserver_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_echoserver_send(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 8000c36:	2300      	movs	r3, #0
 8000c38:	75fb      	strb	r3, [r7, #23]
 
  while ((wr_err == ERR_OK) &&
 8000c3a:	e036      	b.n	8000caa <tcp_echoserver_send+0x7e>
         (es->p != NULL) && 
         (es->p->len <= tcp_sndbuf(tpcb)))
  {
    
    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	6859      	ldr	r1, [r3, #4]
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	895a      	ldrh	r2, [r3, #10]
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f008 fbed 	bl	800942c <tcp_write>
 8000c52:	4603      	mov	r3, r0
 8000c54:	75fb      	strb	r3, [r7, #23]
    
    if (wr_err == ERR_OK)
 8000c56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d11d      	bne.n	8000c9a <tcp_echoserver_send+0x6e>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	895b      	ldrh	r3, [r3, #10]
 8000c62:	81fb      	strh	r3, [r7, #14]
     
      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	609a      	str	r2, [r3, #8]
      
      if(es->p != NULL)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d004      	beq.n	8000c7e <tcp_echoserver_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f003 fef7 	bl	8004a6c <pbuf_ref>
      
     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 8000c7e:	6938      	ldr	r0, [r7, #16]
 8000c80:	f003 fe54 	bl	800492c <pbuf_free>
 8000c84:	4603      	mov	r3, r0
 8000c86:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 8000c88:	7b7b      	ldrb	r3, [r7, #13]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d0f7      	beq.n	8000c7e <tcp_echoserver_send+0x52>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 8000c8e:	89fb      	ldrh	r3, [r7, #14]
 8000c90:	4619      	mov	r1, r3
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f004 fdb4 	bl	8005800 <tcp_recved>
 8000c98:	e007      	b.n	8000caa <tcp_echoserver_send+0x7e>
   }
   else if(wr_err == ERR_MEM)
 8000c9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ca2:	d102      	bne.n	8000caa <tcp_echoserver_send+0x7e>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8000caa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d10b      	bne.n	8000cca <tcp_echoserver_send+0x9e>
         (es->p != NULL) && 
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d007      	beq.n	8000cca <tcp_echoserver_send+0x9e>
         (es->p->len <= tcp_sndbuf(tpcb)))
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	895a      	ldrh	r2, [r3, #10]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) && 
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d9b8      	bls.n	8000c3c <tcp_echoserver_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <tcp_echoserver_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_echoserver_connection_close(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
 8000cda:	6039      	str	r1, [r7, #0]
  
  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 8000cdc:	2100      	movs	r1, #0
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f005 fc68 	bl	80065b4 <tcp_arg>
  tcp_sent(tpcb, NULL);
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f005 fc98 	bl	800661c <tcp_sent>
  tcp_recv(tpcb, NULL);
 8000cec:	2100      	movs	r1, #0
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f005 fc72 	bl	80065d8 <tcp_recv>
  tcp_err(tpcb, NULL);
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f005 fcb2 	bl	8006660 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2100      	movs	r1, #0
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f005 fce7 	bl	80066d4 <tcp_poll>
  
  /* delete es structure */
  if (es != NULL)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d002      	beq.n	8000d12 <tcp_echoserver_connection_close+0x40>
  {
    mem_free(es);
 8000d0c:	6838      	ldr	r0, [r7, #0]
 8000d0e:	f002 fcf3 	bl	80036f8 <mem_free>
  }  
  
  /* close tcp connection */
  tcp_close(tpcb);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f004 fab0 	bl	8005278 <tcp_close>
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <udp_echoserver_init>:
  * @brief  Initialize the server application.
  * @param  None
  * @retval None
  */
void udp_echoserver_init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
   struct udp_pcb *upcb;
   err_t err;
   
   /* Create a new UDP control block  */
   upcb = udp_new();
 8000d26:	f00a ff67 	bl	800bbf8 <udp_new>
 8000d2a:	6078      	str	r0, [r7, #4]
   
   if (upcb)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d013      	beq.n	8000d5a <udp_echoserver_init+0x3a>
   {
     /* Bind the upcb to the UDP_PORT port */
     /* Using IP_ADDR_ANY allow the upcb to be used by any local interface */
      err = udp_bind(upcb, IP_ADDR_ANY, UDP_SERVER_PORT);
 8000d32:	2207      	movs	r2, #7
 8000d34:	490b      	ldr	r1, [pc, #44]	; (8000d64 <udp_echoserver_init+0x44>)
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f00a fdde 	bl	800b8f8 <udp_bind>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	70fb      	strb	r3, [r7, #3]
      
      if(err == ERR_OK)
 8000d40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d105      	bne.n	8000d54 <udp_echoserver_init+0x34>
      {
        /* Set a receive callback for the upcb */
        udp_recv(upcb, udp_echoserver_receive_callback, NULL);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	4907      	ldr	r1, [pc, #28]	; (8000d68 <udp_echoserver_init+0x48>)
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f00a fef1 	bl	800bb34 <udp_recv>
      else
      {
        udp_remove(upcb);
      }
   }
}
 8000d52:	e002      	b.n	8000d5a <udp_echoserver_init+0x3a>
        udp_remove(upcb);
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f00a ff0d 	bl	800bb74 <udp_remove>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	08011c00 	.word	0x08011c00
 8000d68:	08000d6d 	.word	0x08000d6d

08000d6c <udp_echoserver_receive_callback>:
  * @param addr the remote IP address from which the packet was received
  * @param port the remote port from which the packet was received
  * @retval None
  */
void udp_echoserver_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
 8000d78:	603b      	str	r3, [r7, #0]

  /* Connect to the remote client */
  udp_connect(upcb, addr, UDP_CLIENT_PORT);
 8000d7a:	2207      	movs	r2, #7
 8000d7c:	6839      	ldr	r1, [r7, #0]
 8000d7e:	68b8      	ldr	r0, [r7, #8]
 8000d80:	f00a fe42 	bl	800ba08 <udp_connect>
    
  /* Tell the client that we have accepted it */
  udp_send(upcb, p);
 8000d84:	6879      	ldr	r1, [r7, #4]
 8000d86:	68b8      	ldr	r0, [r7, #8]
 8000d88:	f00a fbcc 	bl	800b524 <udp_send>

  /* free the UDP connection, so we can accept new clients */
  udp_disconnect(upcb);
 8000d8c:	68b8      	ldr	r0, [r7, #8]
 8000d8e:	f00a fea9 	bl	800bae4 <udp_disconnect>

  /* Free the p buffer */
  pbuf_free(p);
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f003 fdca 	bl	800492c <pbuf_free>
   
}
 8000d98:	bf00      	nop
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000da0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000da4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000da6:	e003      	b.n	8000db0 <LoopCopyDataInit>

08000da8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000daa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000dac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000dae:	3104      	adds	r1, #4

08000db0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000db0:	480b      	ldr	r0, [pc, #44]	; (8000de0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000db4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000db6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000db8:	d3f6      	bcc.n	8000da8 <CopyDataInit>
  ldr  r2, =_sbss
 8000dba:	4a0b      	ldr	r2, [pc, #44]	; (8000de8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000dbc:	e002      	b.n	8000dc4 <LoopFillZerobss>

08000dbe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000dbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000dc0:	f842 3b04 	str.w	r3, [r2], #4

08000dc4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000dc4:	4b09      	ldr	r3, [pc, #36]	; (8000dec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000dc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000dc8:	d3f9      	bcc.n	8000dbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dca:	f7ff fd8d 	bl	80008e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dce:	f00d fa15 	bl	800e1fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dd2:	f7ff fbcd 	bl	8000570 <main>
  bx  lr    
 8000dd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dd8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ddc:	08011cbc 	.word	0x08011cbc
  ldr  r0, =_sdata
 8000de0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000de4:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8000de8:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8000dec:	200068ac 	.word	0x200068ac

08000df0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df0:	e7fe      	b.n	8000df0 <ADC_IRQHandler>
	...

08000df4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000df8:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0d      	ldr	r2, [pc, #52]	; (8000e34 <HAL_Init+0x40>)
 8000dfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e04:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <HAL_Init+0x40>)
 8000e0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e10:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <HAL_Init+0x40>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a07      	ldr	r2, [pc, #28]	; (8000e34 <HAL_Init+0x40>)
 8000e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e1c:	2003      	movs	r0, #3
 8000e1e:	f000 f92f 	bl	8001080 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e22:	2000      	movs	r0, #0
 8000e24:	f000 f808 	bl	8000e38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e28:	f7ff fc6c 	bl	8000704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40023c00 	.word	0x40023c00

08000e38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e40:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <HAL_InitTick+0x54>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <HAL_InitTick+0x58>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 f939 	bl	80010ce <HAL_SYSTICK_Config>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e00e      	b.n	8000e84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2b0f      	cmp	r3, #15
 8000e6a:	d80a      	bhi.n	8000e82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	6879      	ldr	r1, [r7, #4]
 8000e70:	f04f 30ff 	mov.w	r0, #4294967295
 8000e74:	f000 f90f 	bl	8001096 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e78:	4a06      	ldr	r2, [pc, #24]	; (8000e94 <HAL_InitTick+0x5c>)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e000      	b.n	8000e84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000000 	.word	0x20000000
 8000e90:	20000008 	.word	0x20000008
 8000e94:	20000004 	.word	0x20000004

08000e98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_IncTick+0x20>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_IncTick+0x24>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <HAL_IncTick+0x24>)
 8000eaa:	6013      	str	r3, [r2, #0]
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	20000214 	.word	0x20000214

08000ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec4:	4b03      	ldr	r3, [pc, #12]	; (8000ed4 <HAL_GetTick+0x14>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	20000214 	.word	0x20000214

08000ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee0:	f7ff ffee 	bl	8000ec0 <HAL_GetTick>
 8000ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef0:	d005      	beq.n	8000efe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ef2:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <HAL_Delay+0x40>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4413      	add	r3, r2
 8000efc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000efe:	bf00      	nop
 8000f00:	f7ff ffde 	bl	8000ec0 <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d8f7      	bhi.n	8000f00 <HAL_Delay+0x28>
  {
  }
}
 8000f10:	bf00      	nop
 8000f12:	3710      	adds	r7, #16
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000008 	.word	0x20000008

08000f1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <__NVIC_SetPriorityGrouping+0x44>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f38:	4013      	ands	r3, r2
 8000f3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f4e:	4a04      	ldr	r2, [pc, #16]	; (8000f60 <__NVIC_SetPriorityGrouping+0x44>)
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	60d3      	str	r3, [r2, #12]
}
 8000f54:	bf00      	nop
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f68:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <__NVIC_GetPriorityGrouping+0x18>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	0a1b      	lsrs	r3, r3, #8
 8000f6e:	f003 0307 	and.w	r3, r3, #7
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	6039      	str	r1, [r7, #0]
 8000f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	db0a      	blt.n	8000faa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	490c      	ldr	r1, [pc, #48]	; (8000fcc <__NVIC_SetPriority+0x4c>)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	0112      	lsls	r2, r2, #4
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	440b      	add	r3, r1
 8000fa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa8:	e00a      	b.n	8000fc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	4908      	ldr	r1, [pc, #32]	; (8000fd0 <__NVIC_SetPriority+0x50>)
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	f003 030f 	and.w	r3, r3, #15
 8000fb6:	3b04      	subs	r3, #4
 8000fb8:	0112      	lsls	r2, r2, #4
 8000fba:	b2d2      	uxtb	r2, r2
 8000fbc:	440b      	add	r3, r1
 8000fbe:	761a      	strb	r2, [r3, #24]
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	e000e100 	.word	0xe000e100
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b089      	sub	sp, #36	; 0x24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	f1c3 0307 	rsb	r3, r3, #7
 8000fee:	2b04      	cmp	r3, #4
 8000ff0:	bf28      	it	cs
 8000ff2:	2304      	movcs	r3, #4
 8000ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3304      	adds	r3, #4
 8000ffa:	2b06      	cmp	r3, #6
 8000ffc:	d902      	bls.n	8001004 <NVIC_EncodePriority+0x30>
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3b03      	subs	r3, #3
 8001002:	e000      	b.n	8001006 <NVIC_EncodePriority+0x32>
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	f04f 32ff 	mov.w	r2, #4294967295
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43da      	mvns	r2, r3
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	401a      	ands	r2, r3
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800101c:	f04f 31ff 	mov.w	r1, #4294967295
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	fa01 f303 	lsl.w	r3, r1, r3
 8001026:	43d9      	mvns	r1, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	4313      	orrs	r3, r2
         );
}
 800102e:	4618      	mov	r0, r3
 8001030:	3724      	adds	r7, #36	; 0x24
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
	...

0800103c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3b01      	subs	r3, #1
 8001048:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800104c:	d301      	bcc.n	8001052 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800104e:	2301      	movs	r3, #1
 8001050:	e00f      	b.n	8001072 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001052:	4a0a      	ldr	r2, [pc, #40]	; (800107c <SysTick_Config+0x40>)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3b01      	subs	r3, #1
 8001058:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800105a:	210f      	movs	r1, #15
 800105c:	f04f 30ff 	mov.w	r0, #4294967295
 8001060:	f7ff ff8e 	bl	8000f80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001064:	4b05      	ldr	r3, [pc, #20]	; (800107c <SysTick_Config+0x40>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800106a:	4b04      	ldr	r3, [pc, #16]	; (800107c <SysTick_Config+0x40>)
 800106c:	2207      	movs	r2, #7
 800106e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	e000e010 	.word	0xe000e010

08001080 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff ff47 	bl	8000f1c <__NVIC_SetPriorityGrouping>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001096:	b580      	push	{r7, lr}
 8001098:	b086      	sub	sp, #24
 800109a:	af00      	add	r7, sp, #0
 800109c:	4603      	mov	r3, r0
 800109e:	60b9      	str	r1, [r7, #8]
 80010a0:	607a      	str	r2, [r7, #4]
 80010a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010a8:	f7ff ff5c 	bl	8000f64 <__NVIC_GetPriorityGrouping>
 80010ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	68b9      	ldr	r1, [r7, #8]
 80010b2:	6978      	ldr	r0, [r7, #20]
 80010b4:	f7ff ff8e 	bl	8000fd4 <NVIC_EncodePriority>
 80010b8:	4602      	mov	r2, r0
 80010ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010be:	4611      	mov	r1, r2
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ff5d 	bl	8000f80 <__NVIC_SetPriority>
}
 80010c6:	bf00      	nop
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff ffb0 	bl	800103c <SysTick_Config>
 80010dc:	4603      	mov	r3, r0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b088      	sub	sp, #32
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]
 80010f4:	2300      	movs	r3, #0
 80010f6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80010f8:	4baa      	ldr	r3, [pc, #680]	; (80013a4 <HAL_ETH_Init+0x2bc>)
 80010fa:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001100:	2300      	movs	r3, #0
 8001102:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e185      	b.n	800141a <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001114:	b2db      	uxtb	r3, r3
 8001116:	2b00      	cmp	r3, #0
 8001118:	d106      	bne.n	8001128 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f001 fe74 	bl	8002e10 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001128:	2300      	movs	r3, #0
 800112a:	60bb      	str	r3, [r7, #8]
 800112c:	4b9e      	ldr	r3, [pc, #632]	; (80013a8 <HAL_ETH_Init+0x2c0>)
 800112e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001130:	4a9d      	ldr	r2, [pc, #628]	; (80013a8 <HAL_ETH_Init+0x2c0>)
 8001132:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001136:	6453      	str	r3, [r2, #68]	; 0x44
 8001138:	4b9b      	ldr	r3, [pc, #620]	; (80013a8 <HAL_ETH_Init+0x2c0>)
 800113a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001144:	4b99      	ldr	r3, [pc, #612]	; (80013ac <HAL_ETH_Init+0x2c4>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	4a98      	ldr	r2, [pc, #608]	; (80013ac <HAL_ETH_Init+0x2c4>)
 800114a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800114e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001150:	4b96      	ldr	r3, [pc, #600]	; (80013ac <HAL_ETH_Init+0x2c4>)
 8001152:	685a      	ldr	r2, [r3, #4]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a1b      	ldr	r3, [r3, #32]
 8001158:	4994      	ldr	r1, [pc, #592]	; (80013ac <HAL_ETH_Init+0x2c4>)
 800115a:	4313      	orrs	r3, r2
 800115c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f042 0201 	orr.w	r2, r2, #1
 8001170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001174:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001176:	f7ff fea3 	bl	8000ec0 <HAL_GetTick>
 800117a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800117c:	e011      	b.n	80011a2 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800117e:	f7ff fe9f 	bl	8000ec0 <HAL_GetTick>
 8001182:	4602      	mov	r2, r0
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800118c:	d909      	bls.n	80011a2 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2203      	movs	r2, #3
 8001192:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e13b      	b.n	800141a <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1e4      	bne.n	800117e <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f023 031c 	bic.w	r3, r3, #28
 80011c2:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80011c4:	f001 fcec 	bl	8002ba0 <HAL_RCC_GetHCLKFreq>
 80011c8:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	4a78      	ldr	r2, [pc, #480]	; (80013b0 <HAL_ETH_Init+0x2c8>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d908      	bls.n	80011e4 <HAL_ETH_Init+0xfc>
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	4a77      	ldr	r2, [pc, #476]	; (80013b4 <HAL_ETH_Init+0x2cc>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d804      	bhi.n	80011e4 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	f043 0308 	orr.w	r3, r3, #8
 80011e0:	61fb      	str	r3, [r7, #28]
 80011e2:	e027      	b.n	8001234 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	4a73      	ldr	r2, [pc, #460]	; (80013b4 <HAL_ETH_Init+0x2cc>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d908      	bls.n	80011fe <HAL_ETH_Init+0x116>
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	4a72      	ldr	r2, [pc, #456]	; (80013b8 <HAL_ETH_Init+0x2d0>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d804      	bhi.n	80011fe <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f043 030c 	orr.w	r3, r3, #12
 80011fa:	61fb      	str	r3, [r7, #28]
 80011fc:	e01a      	b.n	8001234 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	4a6d      	ldr	r2, [pc, #436]	; (80013b8 <HAL_ETH_Init+0x2d0>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d903      	bls.n	800120e <HAL_ETH_Init+0x126>
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	4a6c      	ldr	r2, [pc, #432]	; (80013bc <HAL_ETH_Init+0x2d4>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d911      	bls.n	8001232 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	4a6a      	ldr	r2, [pc, #424]	; (80013bc <HAL_ETH_Init+0x2d4>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d908      	bls.n	8001228 <HAL_ETH_Init+0x140>
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	4a69      	ldr	r2, [pc, #420]	; (80013c0 <HAL_ETH_Init+0x2d8>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d804      	bhi.n	8001228 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	f043 0304 	orr.w	r3, r3, #4
 8001224:	61fb      	str	r3, [r7, #28]
 8001226:	e005      	b.n	8001234 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f043 0310 	orr.w	r3, r3, #16
 800122e:	61fb      	str	r3, [r7, #28]
 8001230:	e000      	b.n	8001234 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001232:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	69fa      	ldr	r2, [r7, #28]
 800123a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800123c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001240:	2100      	movs	r1, #0
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f000 fb9a 	bl	800197c <HAL_ETH_WritePHYRegister>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d00b      	beq.n	8001266 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001252:	6939      	ldr	r1, [r7, #16]
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f000 fc27 	bl	8001aa8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2201      	movs	r2, #1
 800125e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e0d9      	b.n	800141a <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001266:	20ff      	movs	r0, #255	; 0xff
 8001268:	f7ff fe36 	bl	8000ed8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	2b00      	cmp	r3, #0
 8001272:	f000 80a7 	beq.w	80013c4 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001276:	f7ff fe23 	bl	8000ec0 <HAL_GetTick>
 800127a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	461a      	mov	r2, r3
 8001282:	2101      	movs	r1, #1
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f000 fb11 	bl	80018ac <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800128a:	f7ff fe19 	bl	8000ec0 <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	f241 3288 	movw	r2, #5000	; 0x1388
 8001298:	4293      	cmp	r3, r2
 800129a:	d90f      	bls.n	80012bc <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80012a0:	6939      	ldr	r1, [r7, #16]
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f000 fc00 	bl	8001aa8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2201      	movs	r2, #1
 80012ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	e0ae      	b.n	800141a <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f003 0304 	and.w	r3, r3, #4
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d0da      	beq.n	800127c <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80012c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012ca:	2100      	movs	r1, #0
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f000 fb55 	bl	800197c <HAL_ETH_WritePHYRegister>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d00b      	beq.n	80012f0 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80012dc:	6939      	ldr	r1, [r7, #16]
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f000 fbe2 	bl	8001aa8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2201      	movs	r2, #1
 80012e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80012ec:	2301      	movs	r3, #1
 80012ee:	e094      	b.n	800141a <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80012f0:	f7ff fde6 	bl	8000ec0 <HAL_GetTick>
 80012f4:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80012f6:	f107 030c 	add.w	r3, r7, #12
 80012fa:	461a      	mov	r2, r3
 80012fc:	2101      	movs	r1, #1
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f000 fad4 	bl	80018ac <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001304:	f7ff fddc 	bl	8000ec0 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001312:	4293      	cmp	r3, r2
 8001314:	d90f      	bls.n	8001336 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800131a:	6939      	ldr	r1, [r7, #16]
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f000 fbc3 	bl	8001aa8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2201      	movs	r2, #1
 8001326:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e071      	b.n	800141a <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f003 0320 	and.w	r3, r3, #32
 800133c:	2b00      	cmp	r3, #0
 800133e:	d0da      	beq.n	80012f6 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001340:	f107 030c 	add.w	r3, r7, #12
 8001344:	461a      	mov	r2, r3
 8001346:	211f      	movs	r1, #31
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f000 faaf 	bl	80018ac <HAL_ETH_ReadPHYRegister>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d00b      	beq.n	800136c <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001358:	6939      	ldr	r1, [r7, #16]
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f000 fba4 	bl	8001aa8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2201      	movs	r2, #1
 8001364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001368:	2301      	movs	r3, #1
 800136a:	e056      	b.n	800141a <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f003 0310 	and.w	r3, r3, #16
 8001372:	2b00      	cmp	r3, #0
 8001374:	d004      	beq.n	8001380 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	e002      	b.n	8001386 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f003 0304 	and.w	r3, r3, #4
 800138c:	2b00      	cmp	r3, #0
 800138e:	d003      	beq.n	8001398 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
 8001396:	e037      	b.n	8001408 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	e032      	b.n	8001408 <HAL_ETH_Init+0x320>
 80013a2:	bf00      	nop
 80013a4:	03938700 	.word	0x03938700
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40013800 	.word	0x40013800
 80013b0:	01312cff 	.word	0x01312cff
 80013b4:	02160ebf 	.word	0x02160ebf
 80013b8:	039386ff 	.word	0x039386ff
 80013bc:	05f5e0ff 	.word	0x05f5e0ff
 80013c0:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	08db      	lsrs	r3, r3, #3
 80013ca:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	085b      	lsrs	r3, r3, #1
 80013d2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80013d4:	4313      	orrs	r3, r2
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	461a      	mov	r2, r3
 80013da:	2100      	movs	r1, #0
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 facd 	bl	800197c <HAL_ETH_WritePHYRegister>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d00b      	beq.n	8001400 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80013ec:	6939      	ldr	r1, [r7, #16]
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f000 fb5a 	bl	8001aa8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2201      	movs	r2, #1
 80013f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e00c      	b.n	800141a <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001400:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001404:	f7ff fd68 	bl	8000ed8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001408:	6939      	ldr	r1, [r7, #16]
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 fb4c 	bl	8001aa8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2201      	movs	r2, #1
 8001414:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3720      	adds	r7, #32
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop

08001424 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001424:	b480      	push	{r7}
 8001426:	b087      	sub	sp, #28
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
 8001430:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001432:	2300      	movs	r3, #0
 8001434:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800143c:	2b01      	cmp	r3, #1
 800143e:	d101      	bne.n	8001444 <HAL_ETH_DMATxDescListInit+0x20>
 8001440:	2302      	movs	r3, #2
 8001442:	e052      	b.n	80014ea <HAL_ETH_DMATxDescListInit+0xc6>
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2201      	movs	r2, #1
 8001448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2202      	movs	r2, #2
 8001450:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
 800145e:	e030      	b.n	80014c2 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	015b      	lsls	r3, r3, #5
 8001464:	68ba      	ldr	r2, [r7, #8]
 8001466:	4413      	add	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001470:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001478:	fb02 f303 	mul.w	r3, r2, r3
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	4413      	add	r3, r2
 8001480:	461a      	mov	r2, r3
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d105      	bne.n	800149a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	3b01      	subs	r3, #1
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d208      	bcs.n	80014b6 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	3301      	adds	r3, #1
 80014a8:	015b      	lsls	r3, r3, #5
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	4413      	add	r3, r2
 80014ae:	461a      	mov	r2, r3
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	60da      	str	r2, [r3, #12]
 80014b4:	e002      	b.n	80014bc <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	3301      	adds	r3, #1
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d3ca      	bcc.n	8001460 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014d4:	3310      	adds	r3, #16
 80014d6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2201      	movs	r2, #1
 80014dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	371c      	adds	r7, #28
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b087      	sub	sp, #28
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	60f8      	str	r0, [r7, #12]
 80014fe:	60b9      	str	r1, [r7, #8]
 8001500:	607a      	str	r2, [r7, #4]
 8001502:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800150e:	2b01      	cmp	r3, #1
 8001510:	d101      	bne.n	8001516 <HAL_ETH_DMARxDescListInit+0x20>
 8001512:	2302      	movs	r3, #2
 8001514:	e056      	b.n	80015c4 <HAL_ETH_DMARxDescListInit+0xce>
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2201      	movs	r2, #1
 800151a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2202      	movs	r2, #2
 8001522:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	68ba      	ldr	r2, [r7, #8]
 800152a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
 8001530:	e034      	b.n	800159c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	015b      	lsls	r3, r3, #5
 8001536:	68ba      	ldr	r2, [r7, #8]
 8001538:	4413      	add	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001542:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800154a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001552:	fb02 f303 	mul.w	r3, r2, r3
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	4413      	add	r3, r2
 800155a:	461a      	mov	r2, r3
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d105      	bne.n	8001574 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	3b01      	subs	r3, #1
 8001578:	697a      	ldr	r2, [r7, #20]
 800157a:	429a      	cmp	r2, r3
 800157c:	d208      	bcs.n	8001590 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	3301      	adds	r3, #1
 8001582:	015b      	lsls	r3, r3, #5
 8001584:	68ba      	ldr	r2, [r7, #8]
 8001586:	4413      	add	r3, r2
 8001588:	461a      	mov	r2, r3
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	e002      	b.n	8001596 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001590:	68ba      	ldr	r2, [r7, #8]
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	3301      	adds	r3, #1
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	697a      	ldr	r2, [r7, #20]
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d3c6      	bcc.n	8001532 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	68ba      	ldr	r2, [r7, #8]
 80015aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015ae:	330c      	adds	r3, #12
 80015b0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2201      	movs	r2, #1
 80015b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	371c      	adds	r7, #28
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b087      	sub	sp, #28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d101      	bne.n	80015f4 <HAL_ETH_TransmitFrame+0x24>
 80015f0:	2302      	movs	r3, #2
 80015f2:	e0cd      	b.n	8001790 <HAL_ETH_TransmitFrame+0x1c0>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2201      	movs	r2, #1
 80015f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2202      	movs	r2, #2
 8001600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d109      	bne.n	800161e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2201      	movs	r2, #1
 800160e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800161a:	2301      	movs	r3, #1
 800161c:	e0b8      	b.n	8001790 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	da09      	bge.n	800163c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2212      	movs	r2, #18
 800162c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e0a9      	b.n	8001790 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001642:	4293      	cmp	r3, r2
 8001644:	d915      	bls.n	8001672 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	4a54      	ldr	r2, [pc, #336]	; (800179c <HAL_ETH_TransmitFrame+0x1cc>)
 800164a:	fba2 2303 	umull	r2, r3, r2, r3
 800164e:	0a9b      	lsrs	r3, r3, #10
 8001650:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	4b51      	ldr	r3, [pc, #324]	; (800179c <HAL_ETH_TransmitFrame+0x1cc>)
 8001656:	fba3 1302 	umull	r1, r3, r3, r2
 800165a:	0a9b      	lsrs	r3, r3, #10
 800165c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001660:	fb01 f303 	mul.w	r3, r1, r3
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d005      	beq.n	8001676 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	3301      	adds	r3, #1
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	e001      	b.n	8001676 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001672:	2301      	movs	r3, #1
 8001674:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d11c      	bne.n	80016b6 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001686:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800168a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001696:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80016a6:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	461a      	mov	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80016b4:	e04b      	b.n	800174e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	e044      	b.n	8001746 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016ca:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d107      	bne.n	80016e2 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016dc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016e0:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80016ea:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d116      	bne.n	8001724 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001700:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001704:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	4a25      	ldr	r2, [pc, #148]	; (80017a0 <HAL_ETH_TransmitFrame+0x1d0>)
 800170a:	fb02 f203 	mul.w	r2, r2, r3
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	4413      	add	r3, r2
 8001712:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001716:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171c:	68fa      	ldr	r2, [r7, #12]
 800171e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001722:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001732:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	461a      	mov	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	3301      	adds	r3, #1
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	429a      	cmp	r2, r3
 800174c:	d3b6      	bcc.n	80016bc <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001756:	3314      	adds	r3, #20
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0304 	and.w	r3, r3, #4
 800175e:	2b00      	cmp	r3, #0
 8001760:	d00d      	beq.n	800177e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800176a:	3314      	adds	r3, #20
 800176c:	2204      	movs	r2, #4
 800176e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001778:	3304      	adds	r3, #4
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2201      	movs	r2, #1
 8001782:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	371c      	adds	r7, #28
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	ac02b00b 	.word	0xac02b00b
 80017a0:	fffffa0c 	.word	0xfffffa0c

080017a4 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d101      	bne.n	80017be <HAL_ETH_GetReceivedFrame+0x1a>
 80017ba:	2302      	movs	r3, #2
 80017bc:	e070      	b.n	80018a0 <HAL_ETH_GetReceivedFrame+0xfc>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2201      	movs	r2, #1
 80017c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2202      	movs	r2, #2
 80017ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	db5a      	blt.n	800188e <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d030      	beq.n	8001848 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ea:	1c5a      	adds	r2, r3, #1
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d103      	bne.n	8001800 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	0c1b      	lsrs	r3, r3, #16
 8001810:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001814:	3b04      	subs	r3, #4
 8001816:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	461a      	mov	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001844:	2300      	movs	r3, #0
 8001846:	e02b      	b.n	80018a0 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001852:	2b00      	cmp	r3, #0
 8001854:	d010      	beq.n	8001878 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	461a      	mov	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	629a      	str	r2, [r3, #40]	; 0x28
 8001876:	e00a      	b.n	800188e <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800187c:	1c5a      	adds	r2, r3, #1
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	461a      	mov	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2201      	movs	r2, #1
 8001892:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	460b      	mov	r3, r1
 80018b6:	607a      	str	r2, [r7, #4]
 80018b8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80018be:	2300      	movs	r3, #0
 80018c0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b82      	cmp	r3, #130	; 0x82
 80018cc:	d101      	bne.n	80018d2 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80018ce:	2302      	movs	r3, #2
 80018d0:	e050      	b.n	8001974 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2282      	movs	r2, #130	; 0x82
 80018d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	f003 031c 	and.w	r3, r3, #28
 80018e8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	8a1b      	ldrh	r3, [r3, #16]
 80018ee:	02db      	lsls	r3, r3, #11
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80018f8:	897b      	ldrh	r3, [r7, #10]
 80018fa:	019b      	lsls	r3, r3, #6
 80018fc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001900:	697a      	ldr	r2, [r7, #20]
 8001902:	4313      	orrs	r3, r2
 8001904:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	f023 0302 	bic.w	r3, r3, #2
 800190c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800191e:	f7ff facf 	bl	8000ec0 <HAL_GetTick>
 8001922:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001924:	e015      	b.n	8001952 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001926:	f7ff facb 	bl	8000ec0 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001934:	d309      	bcc.n	800194a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2201      	movs	r2, #1
 800193a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e014      	b.n	8001974 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1e4      	bne.n	8001926 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	b29b      	uxth	r3, r3
 8001964:	461a      	mov	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2201      	movs	r2, #1
 800196e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	3718      	adds	r7, #24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	460b      	mov	r3, r1
 8001986:	607a      	str	r2, [r7, #4]
 8001988:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b42      	cmp	r3, #66	; 0x42
 800199c:	d101      	bne.n	80019a2 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800199e:	2302      	movs	r3, #2
 80019a0:	e04e      	b.n	8001a40 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2242      	movs	r2, #66	; 0x42
 80019a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f003 031c 	and.w	r3, r3, #28
 80019b8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	8a1b      	ldrh	r3, [r3, #16]
 80019be:	02db      	lsls	r3, r3, #11
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80019c8:	897b      	ldrh	r3, [r7, #10]
 80019ca:	019b      	lsls	r3, r3, #6
 80019cc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80019d0:	697a      	ldr	r2, [r7, #20]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	f043 0302 	orr.w	r3, r3, #2
 80019dc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80019f8:	f7ff fa62 	bl	8000ec0 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019fe:	e015      	b.n	8001a2c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001a00:	f7ff fa5e 	bl	8000ec0 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a0e:	d309      	bcc.n	8001a24 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e00d      	b.n	8001a40 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1e4      	bne.n	8001a00 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3718      	adds	r7, #24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d101      	bne.n	8001a5e <HAL_ETH_Start+0x16>
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	e01f      	b.n	8001a9e <HAL_ETH_Start+0x56>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2201      	movs	r2, #1
 8001a62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2202      	movs	r2, #2
 8001a6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f000 fa1c 	bl	8001eac <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f000 fa36 	bl	8001ee6 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 fa80 	bl	8001f80 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f000 fa4d 	bl	8001f20 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f000 fa62 	bl	8001f50 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
	...

08001aa8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b0b0      	sub	sp, #192	; 0xc0
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d007      	beq.n	8001ace <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ac4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001acc:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001ada:	2300      	movs	r3, #0
 8001adc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d103      	bne.n	8001af6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001aee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001af2:	663b      	str	r3, [r7, #96]	; 0x60
 8001af4:	e001      	b.n	8001afa <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001afa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001afe:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001b00:	2300      	movs	r3, #0
 8001b02:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001b04:	2300      	movs	r3, #0
 8001b06:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001b10:	2300      	movs	r3, #0
 8001b12:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001b14:	2340      	movs	r3, #64	; 0x40
 8001b16:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001b24:	2300      	movs	r3, #0
 8001b26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001b30:	2300      	movs	r3, #0
 8001b32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001b48:	2380      	movs	r3, #128	; 0x80
 8001b4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001b60:	2300      	movs	r3, #0
 8001b62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001b66:	2300      	movs	r3, #0
 8001b68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001b7c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b80:	4bac      	ldr	r3, [pc, #688]	; (8001e34 <ETH_MACDMAConfig+0x38c>)
 8001b82:	4013      	ands	r3, r2
 8001b84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001b88:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001b8c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001b8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001b90:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001b92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001b94:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001b9a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001b9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001b9e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001ba0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001ba2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001ba8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001baa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001bac:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001bae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001bb0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001bb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001bb4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001bb8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001bba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001bbc:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001bbe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bd0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bdc:	2001      	movs	r0, #1
 8001bde:	f7ff f97b 	bl	8000ed8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bea:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001bec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001bee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001bf0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001bf2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001bf4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001bf6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001bfa:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001bfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001c00:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001c02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001c06:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001c08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001c0c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001c10:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001c18:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001c1a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c26:	2001      	movs	r0, #1
 8001c28:	f7ff f956 	bl	8000ed8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c34:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001c3e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001c48:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001c54:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c58:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001c62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c66:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001c68:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001c6c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001c6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001c72:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001c74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001c78:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001c7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001c7e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001c80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001c84:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001c86:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c98:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	f7ff f917 	bl	8000ed8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cb2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001cb4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001cb8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cce:	2001      	movs	r0, #1
 8001cd0:	f7ff f902 	bl	8000ed8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cdc:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001ce2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ce6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001cec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001cf0:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001d02:	2304      	movs	r3, #4
 8001d04:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001d06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001d0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d10:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001d12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d16:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001d18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d1c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001d1e:	2380      	movs	r3, #128	; 0x80
 8001d20:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001d26:	2300      	movs	r3, #0
 8001d28:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d32:	3318      	adds	r3, #24
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001d3a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d3e:	4b3e      	ldr	r3, [pc, #248]	; (8001e38 <ETH_MACDMAConfig+0x390>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001d46:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001d48:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001d4a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001d4c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001d4e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001d50:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001d52:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001d54:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001d56:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001d58:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001d5a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001d5c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001d5e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001d62:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001d66:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001d68:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d7a:	3318      	adds	r3, #24
 8001d7c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d80:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d8a:	3318      	adds	r3, #24
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d92:	2001      	movs	r0, #1
 8001d94:	f7ff f8a0 	bl	8000ed8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001da0:	3318      	adds	r3, #24
 8001da2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001da6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001da8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001dac:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001db0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001db4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001db8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001dba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dbc:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001dbe:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001dc2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dd0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001de0:	2001      	movs	r0, #1
 8001de2:	f7ff f879 	bl	8000ed8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001df2:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d10f      	bne.n	8001e1c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e04:	331c      	adds	r3, #28
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001e10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e18:	331c      	adds	r3, #28
 8001e1a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	461a      	mov	r2, r3
 8001e22:	2100      	movs	r1, #0
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 f809 	bl	8001e3c <ETH_MACAddressConfig>
}
 8001e2a:	bf00      	nop
 8001e2c:	37c0      	adds	r7, #192	; 0xc0
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	ff20810f 	.word	0xff20810f
 8001e38:	f8de3f23 	.word	0xf8de3f23

08001e3c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b087      	sub	sp, #28
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3305      	adds	r3, #5
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	021b      	lsls	r3, r3, #8
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	3204      	adds	r2, #4
 8001e54:	7812      	ldrb	r2, [r2, #0]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <ETH_MACAddressConfig+0x68>)
 8001e5e:	4413      	add	r3, r2
 8001e60:	461a      	mov	r2, r3
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	3303      	adds	r3, #3
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	061a      	lsls	r2, r3, #24
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	3302      	adds	r3, #2
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	041b      	lsls	r3, r3, #16
 8001e76:	431a      	orrs	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	021b      	lsls	r3, r3, #8
 8001e80:	4313      	orrs	r3, r2
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	7812      	ldrb	r2, [r2, #0]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <ETH_MACAddressConfig+0x6c>)
 8001e8e:	4413      	add	r3, r2
 8001e90:	461a      	mov	r2, r3
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	6013      	str	r3, [r2, #0]
}
 8001e96:	bf00      	nop
 8001e98:	371c      	adds	r7, #28
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40028040 	.word	0x40028040
 8001ea8:	40028044 	.word	0x40028044

08001eac <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f042 0208 	orr.w	r2, r2, #8
 8001ec6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001ed0:	2001      	movs	r0, #1
 8001ed2:	f000 f87f 	bl	8001fd4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	601a      	str	r2, [r3, #0]
}
 8001ede:	bf00      	nop
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b084      	sub	sp, #16
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f042 0204 	orr.w	r2, r2, #4
 8001f00:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001f0a:	2001      	movs	r0, #1
 8001f0c:	f000 f862 	bl	8001fd4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	601a      	str	r2, [r3, #0]
}
 8001f18:	bf00      	nop
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f30:	3318      	adds	r3, #24
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f40:	3318      	adds	r3, #24
 8001f42:	601a      	str	r2, [r3, #0]
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f60:	3318      	adds	r3, #24
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f042 0202 	orr.w	r2, r2, #2
 8001f6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f70:	3318      	adds	r3, #24
 8001f72:	601a      	str	r2, [r3, #0]
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f94:	3318      	adds	r3, #24
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001fa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fa4:	3318      	adds	r3, #24
 8001fa6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fb0:	3318      	adds	r3, #24
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001fb6:	2001      	movs	r0, #1
 8001fb8:	f000 f80c 	bl	8001fd4 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fc6:	3318      	adds	r3, #24
 8001fc8:	601a      	str	r2, [r3, #0]
}
 8001fca:	bf00      	nop
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
	...

08001fd4 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fdc:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <ETH_Delay+0x34>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a0a      	ldr	r2, [pc, #40]	; (800200c <ETH_Delay+0x38>)
 8001fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe6:	0a5b      	lsrs	r3, r3, #9
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	fb02 f303 	mul.w	r3, r2, r3
 8001fee:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8001ff0:	bf00      	nop
  } 
  while (Delay --);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	1e5a      	subs	r2, r3, #1
 8001ff6:	60fa      	str	r2, [r7, #12]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1f9      	bne.n	8001ff0 <ETH_Delay+0x1c>
}
 8001ffc:	bf00      	nop
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	20000000 	.word	0x20000000
 800200c:	10624dd3 	.word	0x10624dd3

08002010 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002010:	b480      	push	{r7}
 8002012:	b089      	sub	sp, #36	; 0x24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800201a:	2300      	movs	r3, #0
 800201c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800201e:	2300      	movs	r3, #0
 8002020:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002022:	2300      	movs	r3, #0
 8002024:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002026:	2300      	movs	r3, #0
 8002028:	61fb      	str	r3, [r7, #28]
 800202a:	e16b      	b.n	8002304 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800202c:	2201      	movs	r2, #1
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	4013      	ands	r3, r2
 800203e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	429a      	cmp	r2, r3
 8002046:	f040 815a 	bne.w	80022fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d00b      	beq.n	800206a <HAL_GPIO_Init+0x5a>
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b02      	cmp	r3, #2
 8002058:	d007      	beq.n	800206a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800205e:	2b11      	cmp	r3, #17
 8002060:	d003      	beq.n	800206a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b12      	cmp	r3, #18
 8002068:	d130      	bne.n	80020cc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	2203      	movs	r2, #3
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43db      	mvns	r3, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4013      	ands	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	68da      	ldr	r2, [r3, #12]
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	4313      	orrs	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020a0:	2201      	movs	r2, #1
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	091b      	lsrs	r3, r3, #4
 80020b6:	f003 0201 	and.w	r2, r3, #1
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	2203      	movs	r2, #3
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	43db      	mvns	r3, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b02      	cmp	r3, #2
 8002102:	d003      	beq.n	800210c <HAL_GPIO_Init+0xfc>
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	2b12      	cmp	r3, #18
 800210a:	d123      	bne.n	8002154 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	08da      	lsrs	r2, r3, #3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3208      	adds	r2, #8
 8002114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002118:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	f003 0307 	and.w	r3, r3, #7
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	220f      	movs	r2, #15
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	43db      	mvns	r3, r3
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4013      	ands	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	691a      	ldr	r2, [r3, #16]
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4313      	orrs	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	08da      	lsrs	r2, r3, #3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	3208      	adds	r2, #8
 800214e:	69b9      	ldr	r1, [r7, #24]
 8002150:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	2203      	movs	r2, #3
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	43db      	mvns	r3, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4013      	ands	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f003 0203 	and.w	r2, r3, #3
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4313      	orrs	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002190:	2b00      	cmp	r3, #0
 8002192:	f000 80b4 	beq.w	80022fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	4b5f      	ldr	r3, [pc, #380]	; (8002318 <HAL_GPIO_Init+0x308>)
 800219c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219e:	4a5e      	ldr	r2, [pc, #376]	; (8002318 <HAL_GPIO_Init+0x308>)
 80021a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021a4:	6453      	str	r3, [r2, #68]	; 0x44
 80021a6:	4b5c      	ldr	r3, [pc, #368]	; (8002318 <HAL_GPIO_Init+0x308>)
 80021a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021b2:	4a5a      	ldr	r2, [pc, #360]	; (800231c <HAL_GPIO_Init+0x30c>)
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	089b      	lsrs	r3, r3, #2
 80021b8:	3302      	adds	r3, #2
 80021ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	f003 0303 	and.w	r3, r3, #3
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	220f      	movs	r2, #15
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43db      	mvns	r3, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4013      	ands	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a51      	ldr	r2, [pc, #324]	; (8002320 <HAL_GPIO_Init+0x310>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d02b      	beq.n	8002236 <HAL_GPIO_Init+0x226>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a50      	ldr	r2, [pc, #320]	; (8002324 <HAL_GPIO_Init+0x314>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d025      	beq.n	8002232 <HAL_GPIO_Init+0x222>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a4f      	ldr	r2, [pc, #316]	; (8002328 <HAL_GPIO_Init+0x318>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d01f      	beq.n	800222e <HAL_GPIO_Init+0x21e>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a4e      	ldr	r2, [pc, #312]	; (800232c <HAL_GPIO_Init+0x31c>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d019      	beq.n	800222a <HAL_GPIO_Init+0x21a>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a4d      	ldr	r2, [pc, #308]	; (8002330 <HAL_GPIO_Init+0x320>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d013      	beq.n	8002226 <HAL_GPIO_Init+0x216>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a4c      	ldr	r2, [pc, #304]	; (8002334 <HAL_GPIO_Init+0x324>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d00d      	beq.n	8002222 <HAL_GPIO_Init+0x212>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a4b      	ldr	r2, [pc, #300]	; (8002338 <HAL_GPIO_Init+0x328>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d007      	beq.n	800221e <HAL_GPIO_Init+0x20e>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a4a      	ldr	r2, [pc, #296]	; (800233c <HAL_GPIO_Init+0x32c>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d101      	bne.n	800221a <HAL_GPIO_Init+0x20a>
 8002216:	2307      	movs	r3, #7
 8002218:	e00e      	b.n	8002238 <HAL_GPIO_Init+0x228>
 800221a:	2308      	movs	r3, #8
 800221c:	e00c      	b.n	8002238 <HAL_GPIO_Init+0x228>
 800221e:	2306      	movs	r3, #6
 8002220:	e00a      	b.n	8002238 <HAL_GPIO_Init+0x228>
 8002222:	2305      	movs	r3, #5
 8002224:	e008      	b.n	8002238 <HAL_GPIO_Init+0x228>
 8002226:	2304      	movs	r3, #4
 8002228:	e006      	b.n	8002238 <HAL_GPIO_Init+0x228>
 800222a:	2303      	movs	r3, #3
 800222c:	e004      	b.n	8002238 <HAL_GPIO_Init+0x228>
 800222e:	2302      	movs	r3, #2
 8002230:	e002      	b.n	8002238 <HAL_GPIO_Init+0x228>
 8002232:	2301      	movs	r3, #1
 8002234:	e000      	b.n	8002238 <HAL_GPIO_Init+0x228>
 8002236:	2300      	movs	r3, #0
 8002238:	69fa      	ldr	r2, [r7, #28]
 800223a:	f002 0203 	and.w	r2, r2, #3
 800223e:	0092      	lsls	r2, r2, #2
 8002240:	4093      	lsls	r3, r2
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4313      	orrs	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002248:	4934      	ldr	r1, [pc, #208]	; (800231c <HAL_GPIO_Init+0x30c>)
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	089b      	lsrs	r3, r3, #2
 800224e:	3302      	adds	r3, #2
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002256:	4b3a      	ldr	r3, [pc, #232]	; (8002340 <HAL_GPIO_Init+0x330>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	43db      	mvns	r3, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4013      	ands	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	4313      	orrs	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800227a:	4a31      	ldr	r2, [pc, #196]	; (8002340 <HAL_GPIO_Init+0x330>)
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002280:	4b2f      	ldr	r3, [pc, #188]	; (8002340 <HAL_GPIO_Init+0x330>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	43db      	mvns	r3, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022a4:	4a26      	ldr	r2, [pc, #152]	; (8002340 <HAL_GPIO_Init+0x330>)
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022aa:	4b25      	ldr	r3, [pc, #148]	; (8002340 <HAL_GPIO_Init+0x330>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	43db      	mvns	r3, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4013      	ands	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ce:	4a1c      	ldr	r2, [pc, #112]	; (8002340 <HAL_GPIO_Init+0x330>)
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022d4:	4b1a      	ldr	r3, [pc, #104]	; (8002340 <HAL_GPIO_Init+0x330>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	43db      	mvns	r3, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d003      	beq.n	80022f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022f8:	4a11      	ldr	r2, [pc, #68]	; (8002340 <HAL_GPIO_Init+0x330>)
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	3301      	adds	r3, #1
 8002302:	61fb      	str	r3, [r7, #28]
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	2b0f      	cmp	r3, #15
 8002308:	f67f ae90 	bls.w	800202c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800230c:	bf00      	nop
 800230e:	3724      	adds	r7, #36	; 0x24
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	40023800 	.word	0x40023800
 800231c:	40013800 	.word	0x40013800
 8002320:	40020000 	.word	0x40020000
 8002324:	40020400 	.word	0x40020400
 8002328:	40020800 	.word	0x40020800
 800232c:	40020c00 	.word	0x40020c00
 8002330:	40021000 	.word	0x40021000
 8002334:	40021400 	.word	0x40021400
 8002338:	40021800 	.word	0x40021800
 800233c:	40021c00 	.word	0x40021c00
 8002340:	40013c00 	.word	0x40013c00

08002344 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e25b      	b.n	800280e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d075      	beq.n	800244e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002362:	4ba3      	ldr	r3, [pc, #652]	; (80025f0 <HAL_RCC_OscConfig+0x2ac>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 030c 	and.w	r3, r3, #12
 800236a:	2b04      	cmp	r3, #4
 800236c:	d00c      	beq.n	8002388 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800236e:	4ba0      	ldr	r3, [pc, #640]	; (80025f0 <HAL_RCC_OscConfig+0x2ac>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002376:	2b08      	cmp	r3, #8
 8002378:	d112      	bne.n	80023a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800237a:	4b9d      	ldr	r3, [pc, #628]	; (80025f0 <HAL_RCC_OscConfig+0x2ac>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002382:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002386:	d10b      	bne.n	80023a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002388:	4b99      	ldr	r3, [pc, #612]	; (80025f0 <HAL_RCC_OscConfig+0x2ac>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d05b      	beq.n	800244c <HAL_RCC_OscConfig+0x108>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d157      	bne.n	800244c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e236      	b.n	800280e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a8:	d106      	bne.n	80023b8 <HAL_RCC_OscConfig+0x74>
 80023aa:	4b91      	ldr	r3, [pc, #580]	; (80025f0 <HAL_RCC_OscConfig+0x2ac>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a90      	ldr	r2, [pc, #576]	; (80025f0 <HAL_RCC_OscConfig+0x2ac>)
 80023b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b4:	6013      	str	r3, [r2, #0]
 80023b6:	e01d      	b.n	80023f4 <HAL_RCC_OscConfig+0xb0>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023c0:	d10c      	bne.n	80023dc <HAL_RCC_OscConfig+0x98>
 80023c2:	4b8b      	ldr	r3, [pc, #556]	; (80025f0 <HAL_RCC_OscConfig+0x2ac>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a8a      	ldr	r2, [pc, #552]	; (80025f0 <HAL_RCC_OscConfig+0x2ac>)
 80023c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	4b88      	ldr	r3, [pc, #544]	; (80025f0 <HAL_RCC_OscConfig+0x2ac>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a87      	ldr	r2, [pc, #540]	; (80025f0 <HAL_RCC_OscConfig+0x2ac>)
 80023d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	e00b      	b.n	80023f4 <HAL_RCC_OscConfig+0xb0>
 80023dc:	4b84      	ldr	r3, [pc, #528]	; (80025f0 <HAL_RCC_OscConfig+0x2ac>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a83      	ldr	r2, [pc, #524]	; (80025f0 <HAL_RCC_OscConfig+0x2ac>)
 80023e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023e6:	6013      	str	r3, [r2, #0]
 80023e8:	4b81      	ldr	r3, [pc, #516]	; (80025f0 <HAL_RCC_OscConfig+0x2ac>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a80      	ldr	r2, [pc, #512]	; (80025f0 <HAL_RCC_OscConfig+0x2ac>)
 80023ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d013      	beq.n	8002424 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fc:	f7fe fd60 	bl	8000ec0 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002404:	f7fe fd5c 	bl	8000ec0 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b64      	cmp	r3, #100	; 0x64
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e1fb      	b.n	800280e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002416:	4b76      	ldr	r3, [pc, #472]	; (80025f0 <HAL_RCC_OscConfig+0x2ac>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d0f0      	beq.n	8002404 <HAL_RCC_OscConfig+0xc0>
 8002422:	e014      	b.n	800244e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002424:	f7fe fd4c 	bl	8000ec0 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800242c:	f7fe fd48 	bl	8000ec0 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b64      	cmp	r3, #100	; 0x64
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e1e7      	b.n	800280e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800243e:	4b6c      	ldr	r3, [pc, #432]	; (80025f0 <HAL_RCC_OscConfig+0x2ac>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1f0      	bne.n	800242c <HAL_RCC_OscConfig+0xe8>
 800244a:	e000      	b.n	800244e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800244c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d063      	beq.n	8002522 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800245a:	4b65      	ldr	r3, [pc, #404]	; (80025f0 <HAL_RCC_OscConfig+0x2ac>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 030c 	and.w	r3, r3, #12
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00b      	beq.n	800247e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002466:	4b62      	ldr	r3, [pc, #392]	; (80025f0 <HAL_RCC_OscConfig+0x2ac>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800246e:	2b08      	cmp	r3, #8
 8002470:	d11c      	bne.n	80024ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002472:	4b5f      	ldr	r3, [pc, #380]	; (80025f0 <HAL_RCC_OscConfig+0x2ac>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d116      	bne.n	80024ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800247e:	4b5c      	ldr	r3, [pc, #368]	; (80025f0 <HAL_RCC_OscConfig+0x2ac>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d005      	beq.n	8002496 <HAL_RCC_OscConfig+0x152>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d001      	beq.n	8002496 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e1bb      	b.n	800280e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002496:	4b56      	ldr	r3, [pc, #344]	; (80025f0 <HAL_RCC_OscConfig+0x2ac>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	4952      	ldr	r1, [pc, #328]	; (80025f0 <HAL_RCC_OscConfig+0x2ac>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024aa:	e03a      	b.n	8002522 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d020      	beq.n	80024f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024b4:	4b4f      	ldr	r3, [pc, #316]	; (80025f4 <HAL_RCC_OscConfig+0x2b0>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ba:	f7fe fd01 	bl	8000ec0 <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024c2:	f7fe fcfd 	bl	8000ec0 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e19c      	b.n	800280e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d4:	4b46      	ldr	r3, [pc, #280]	; (80025f0 <HAL_RCC_OscConfig+0x2ac>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0f0      	beq.n	80024c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e0:	4b43      	ldr	r3, [pc, #268]	; (80025f0 <HAL_RCC_OscConfig+0x2ac>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	4940      	ldr	r1, [pc, #256]	; (80025f0 <HAL_RCC_OscConfig+0x2ac>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	600b      	str	r3, [r1, #0]
 80024f4:	e015      	b.n	8002522 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024f6:	4b3f      	ldr	r3, [pc, #252]	; (80025f4 <HAL_RCC_OscConfig+0x2b0>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fc:	f7fe fce0 	bl	8000ec0 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002504:	f7fe fcdc 	bl	8000ec0 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e17b      	b.n	800280e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002516:	4b36      	ldr	r3, [pc, #216]	; (80025f0 <HAL_RCC_OscConfig+0x2ac>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1f0      	bne.n	8002504 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0308 	and.w	r3, r3, #8
 800252a:	2b00      	cmp	r3, #0
 800252c:	d030      	beq.n	8002590 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d016      	beq.n	8002564 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002536:	4b30      	ldr	r3, [pc, #192]	; (80025f8 <HAL_RCC_OscConfig+0x2b4>)
 8002538:	2201      	movs	r2, #1
 800253a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800253c:	f7fe fcc0 	bl	8000ec0 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002544:	f7fe fcbc 	bl	8000ec0 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e15b      	b.n	800280e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002556:	4b26      	ldr	r3, [pc, #152]	; (80025f0 <HAL_RCC_OscConfig+0x2ac>)
 8002558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0f0      	beq.n	8002544 <HAL_RCC_OscConfig+0x200>
 8002562:	e015      	b.n	8002590 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002564:	4b24      	ldr	r3, [pc, #144]	; (80025f8 <HAL_RCC_OscConfig+0x2b4>)
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800256a:	f7fe fca9 	bl	8000ec0 <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002572:	f7fe fca5 	bl	8000ec0 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e144      	b.n	800280e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002584:	4b1a      	ldr	r3, [pc, #104]	; (80025f0 <HAL_RCC_OscConfig+0x2ac>)
 8002586:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1f0      	bne.n	8002572 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 80a0 	beq.w	80026de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800259e:	2300      	movs	r3, #0
 80025a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025a2:	4b13      	ldr	r3, [pc, #76]	; (80025f0 <HAL_RCC_OscConfig+0x2ac>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10f      	bne.n	80025ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ae:	2300      	movs	r3, #0
 80025b0:	60bb      	str	r3, [r7, #8]
 80025b2:	4b0f      	ldr	r3, [pc, #60]	; (80025f0 <HAL_RCC_OscConfig+0x2ac>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	4a0e      	ldr	r2, [pc, #56]	; (80025f0 <HAL_RCC_OscConfig+0x2ac>)
 80025b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025bc:	6413      	str	r3, [r2, #64]	; 0x40
 80025be:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <HAL_RCC_OscConfig+0x2ac>)
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c6:	60bb      	str	r3, [r7, #8]
 80025c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ca:	2301      	movs	r3, #1
 80025cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ce:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <HAL_RCC_OscConfig+0x2b8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d121      	bne.n	800261e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025da:	4b08      	ldr	r3, [pc, #32]	; (80025fc <HAL_RCC_OscConfig+0x2b8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a07      	ldr	r2, [pc, #28]	; (80025fc <HAL_RCC_OscConfig+0x2b8>)
 80025e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025e6:	f7fe fc6b 	bl	8000ec0 <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ec:	e011      	b.n	8002612 <HAL_RCC_OscConfig+0x2ce>
 80025ee:	bf00      	nop
 80025f0:	40023800 	.word	0x40023800
 80025f4:	42470000 	.word	0x42470000
 80025f8:	42470e80 	.word	0x42470e80
 80025fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002600:	f7fe fc5e 	bl	8000ec0 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e0fd      	b.n	800280e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002612:	4b81      	ldr	r3, [pc, #516]	; (8002818 <HAL_RCC_OscConfig+0x4d4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0f0      	beq.n	8002600 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d106      	bne.n	8002634 <HAL_RCC_OscConfig+0x2f0>
 8002626:	4b7d      	ldr	r3, [pc, #500]	; (800281c <HAL_RCC_OscConfig+0x4d8>)
 8002628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262a:	4a7c      	ldr	r2, [pc, #496]	; (800281c <HAL_RCC_OscConfig+0x4d8>)
 800262c:	f043 0301 	orr.w	r3, r3, #1
 8002630:	6713      	str	r3, [r2, #112]	; 0x70
 8002632:	e01c      	b.n	800266e <HAL_RCC_OscConfig+0x32a>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	2b05      	cmp	r3, #5
 800263a:	d10c      	bne.n	8002656 <HAL_RCC_OscConfig+0x312>
 800263c:	4b77      	ldr	r3, [pc, #476]	; (800281c <HAL_RCC_OscConfig+0x4d8>)
 800263e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002640:	4a76      	ldr	r2, [pc, #472]	; (800281c <HAL_RCC_OscConfig+0x4d8>)
 8002642:	f043 0304 	orr.w	r3, r3, #4
 8002646:	6713      	str	r3, [r2, #112]	; 0x70
 8002648:	4b74      	ldr	r3, [pc, #464]	; (800281c <HAL_RCC_OscConfig+0x4d8>)
 800264a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264c:	4a73      	ldr	r2, [pc, #460]	; (800281c <HAL_RCC_OscConfig+0x4d8>)
 800264e:	f043 0301 	orr.w	r3, r3, #1
 8002652:	6713      	str	r3, [r2, #112]	; 0x70
 8002654:	e00b      	b.n	800266e <HAL_RCC_OscConfig+0x32a>
 8002656:	4b71      	ldr	r3, [pc, #452]	; (800281c <HAL_RCC_OscConfig+0x4d8>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265a:	4a70      	ldr	r2, [pc, #448]	; (800281c <HAL_RCC_OscConfig+0x4d8>)
 800265c:	f023 0301 	bic.w	r3, r3, #1
 8002660:	6713      	str	r3, [r2, #112]	; 0x70
 8002662:	4b6e      	ldr	r3, [pc, #440]	; (800281c <HAL_RCC_OscConfig+0x4d8>)
 8002664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002666:	4a6d      	ldr	r2, [pc, #436]	; (800281c <HAL_RCC_OscConfig+0x4d8>)
 8002668:	f023 0304 	bic.w	r3, r3, #4
 800266c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d015      	beq.n	80026a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002676:	f7fe fc23 	bl	8000ec0 <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800267c:	e00a      	b.n	8002694 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800267e:	f7fe fc1f 	bl	8000ec0 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	f241 3288 	movw	r2, #5000	; 0x1388
 800268c:	4293      	cmp	r3, r2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e0bc      	b.n	800280e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002694:	4b61      	ldr	r3, [pc, #388]	; (800281c <HAL_RCC_OscConfig+0x4d8>)
 8002696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0ee      	beq.n	800267e <HAL_RCC_OscConfig+0x33a>
 80026a0:	e014      	b.n	80026cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a2:	f7fe fc0d 	bl	8000ec0 <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026a8:	e00a      	b.n	80026c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026aa:	f7fe fc09 	bl	8000ec0 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e0a6      	b.n	800280e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c0:	4b56      	ldr	r3, [pc, #344]	; (800281c <HAL_RCC_OscConfig+0x4d8>)
 80026c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1ee      	bne.n	80026aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026cc:	7dfb      	ldrb	r3, [r7, #23]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d105      	bne.n	80026de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026d2:	4b52      	ldr	r3, [pc, #328]	; (800281c <HAL_RCC_OscConfig+0x4d8>)
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	4a51      	ldr	r2, [pc, #324]	; (800281c <HAL_RCC_OscConfig+0x4d8>)
 80026d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 8092 	beq.w	800280c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026e8:	4b4c      	ldr	r3, [pc, #304]	; (800281c <HAL_RCC_OscConfig+0x4d8>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 030c 	and.w	r3, r3, #12
 80026f0:	2b08      	cmp	r3, #8
 80026f2:	d05c      	beq.n	80027ae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d141      	bne.n	8002780 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026fc:	4b48      	ldr	r3, [pc, #288]	; (8002820 <HAL_RCC_OscConfig+0x4dc>)
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002702:	f7fe fbdd 	bl	8000ec0 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800270a:	f7fe fbd9 	bl	8000ec0 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e078      	b.n	800280e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800271c:	4b3f      	ldr	r3, [pc, #252]	; (800281c <HAL_RCC_OscConfig+0x4d8>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1f0      	bne.n	800270a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69da      	ldr	r2, [r3, #28]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	431a      	orrs	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	019b      	lsls	r3, r3, #6
 8002738:	431a      	orrs	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273e:	085b      	lsrs	r3, r3, #1
 8002740:	3b01      	subs	r3, #1
 8002742:	041b      	lsls	r3, r3, #16
 8002744:	431a      	orrs	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274a:	061b      	lsls	r3, r3, #24
 800274c:	4933      	ldr	r1, [pc, #204]	; (800281c <HAL_RCC_OscConfig+0x4d8>)
 800274e:	4313      	orrs	r3, r2
 8002750:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002752:	4b33      	ldr	r3, [pc, #204]	; (8002820 <HAL_RCC_OscConfig+0x4dc>)
 8002754:	2201      	movs	r2, #1
 8002756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002758:	f7fe fbb2 	bl	8000ec0 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002760:	f7fe fbae 	bl	8000ec0 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e04d      	b.n	800280e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002772:	4b2a      	ldr	r3, [pc, #168]	; (800281c <HAL_RCC_OscConfig+0x4d8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0f0      	beq.n	8002760 <HAL_RCC_OscConfig+0x41c>
 800277e:	e045      	b.n	800280c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002780:	4b27      	ldr	r3, [pc, #156]	; (8002820 <HAL_RCC_OscConfig+0x4dc>)
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002786:	f7fe fb9b 	bl	8000ec0 <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800278c:	e008      	b.n	80027a0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800278e:	f7fe fb97 	bl	8000ec0 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e036      	b.n	800280e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027a0:	4b1e      	ldr	r3, [pc, #120]	; (800281c <HAL_RCC_OscConfig+0x4d8>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1f0      	bne.n	800278e <HAL_RCC_OscConfig+0x44a>
 80027ac:	e02e      	b.n	800280c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d101      	bne.n	80027ba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e029      	b.n	800280e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027ba:	4b18      	ldr	r3, [pc, #96]	; (800281c <HAL_RCC_OscConfig+0x4d8>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d11c      	bne.n	8002808 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d8:	429a      	cmp	r2, r3
 80027da:	d115      	bne.n	8002808 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027e2:	4013      	ands	r3, r2
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d10d      	bne.n	8002808 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d106      	bne.n	8002808 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002804:	429a      	cmp	r2, r3
 8002806:	d001      	beq.n	800280c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e000      	b.n	800280e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40007000 	.word	0x40007000
 800281c:	40023800 	.word	0x40023800
 8002820:	42470060 	.word	0x42470060

08002824 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e0cc      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002838:	4b68      	ldr	r3, [pc, #416]	; (80029dc <HAL_RCC_ClockConfig+0x1b8>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 030f 	and.w	r3, r3, #15
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	429a      	cmp	r2, r3
 8002844:	d90c      	bls.n	8002860 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002846:	4b65      	ldr	r3, [pc, #404]	; (80029dc <HAL_RCC_ClockConfig+0x1b8>)
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800284e:	4b63      	ldr	r3, [pc, #396]	; (80029dc <HAL_RCC_ClockConfig+0x1b8>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 030f 	and.w	r3, r3, #15
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	429a      	cmp	r2, r3
 800285a:	d001      	beq.n	8002860 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e0b8      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d020      	beq.n	80028ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002878:	4b59      	ldr	r3, [pc, #356]	; (80029e0 <HAL_RCC_ClockConfig+0x1bc>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	4a58      	ldr	r2, [pc, #352]	; (80029e0 <HAL_RCC_ClockConfig+0x1bc>)
 800287e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002882:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0308 	and.w	r3, r3, #8
 800288c:	2b00      	cmp	r3, #0
 800288e:	d005      	beq.n	800289c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002890:	4b53      	ldr	r3, [pc, #332]	; (80029e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	4a52      	ldr	r2, [pc, #328]	; (80029e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002896:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800289a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800289c:	4b50      	ldr	r3, [pc, #320]	; (80029e0 <HAL_RCC_ClockConfig+0x1bc>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	494d      	ldr	r1, [pc, #308]	; (80029e0 <HAL_RCC_ClockConfig+0x1bc>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d044      	beq.n	8002944 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d107      	bne.n	80028d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c2:	4b47      	ldr	r3, [pc, #284]	; (80029e0 <HAL_RCC_ClockConfig+0x1bc>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d119      	bne.n	8002902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e07f      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d003      	beq.n	80028e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028de:	2b03      	cmp	r3, #3
 80028e0:	d107      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e2:	4b3f      	ldr	r3, [pc, #252]	; (80029e0 <HAL_RCC_ClockConfig+0x1bc>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d109      	bne.n	8002902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e06f      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f2:	4b3b      	ldr	r3, [pc, #236]	; (80029e0 <HAL_RCC_ClockConfig+0x1bc>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e067      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002902:	4b37      	ldr	r3, [pc, #220]	; (80029e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f023 0203 	bic.w	r2, r3, #3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	4934      	ldr	r1, [pc, #208]	; (80029e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002910:	4313      	orrs	r3, r2
 8002912:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002914:	f7fe fad4 	bl	8000ec0 <HAL_GetTick>
 8002918:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291a:	e00a      	b.n	8002932 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800291c:	f7fe fad0 	bl	8000ec0 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	f241 3288 	movw	r2, #5000	; 0x1388
 800292a:	4293      	cmp	r3, r2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e04f      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002932:	4b2b      	ldr	r3, [pc, #172]	; (80029e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 020c 	and.w	r2, r3, #12
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	429a      	cmp	r2, r3
 8002942:	d1eb      	bne.n	800291c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002944:	4b25      	ldr	r3, [pc, #148]	; (80029dc <HAL_RCC_ClockConfig+0x1b8>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 030f 	and.w	r3, r3, #15
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	429a      	cmp	r2, r3
 8002950:	d20c      	bcs.n	800296c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002952:	4b22      	ldr	r3, [pc, #136]	; (80029dc <HAL_RCC_ClockConfig+0x1b8>)
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800295a:	4b20      	ldr	r3, [pc, #128]	; (80029dc <HAL_RCC_ClockConfig+0x1b8>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	429a      	cmp	r2, r3
 8002966:	d001      	beq.n	800296c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e032      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	d008      	beq.n	800298a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002978:	4b19      	ldr	r3, [pc, #100]	; (80029e0 <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	4916      	ldr	r1, [pc, #88]	; (80029e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002986:	4313      	orrs	r3, r2
 8002988:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0308 	and.w	r3, r3, #8
 8002992:	2b00      	cmp	r3, #0
 8002994:	d009      	beq.n	80029aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002996:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	490e      	ldr	r1, [pc, #56]	; (80029e0 <HAL_RCC_ClockConfig+0x1bc>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029aa:	f000 f821 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
 80029ae:	4601      	mov	r1, r0
 80029b0:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	091b      	lsrs	r3, r3, #4
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	4a0a      	ldr	r2, [pc, #40]	; (80029e4 <HAL_RCC_ClockConfig+0x1c0>)
 80029bc:	5cd3      	ldrb	r3, [r2, r3]
 80029be:	fa21 f303 	lsr.w	r3, r1, r3
 80029c2:	4a09      	ldr	r2, [pc, #36]	; (80029e8 <HAL_RCC_ClockConfig+0x1c4>)
 80029c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029c6:	4b09      	ldr	r3, [pc, #36]	; (80029ec <HAL_RCC_ClockConfig+0x1c8>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7fe fa34 	bl	8000e38 <HAL_InitTick>

  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40023c00 	.word	0x40023c00
 80029e0:	40023800 	.word	0x40023800
 80029e4:	08011b20 	.word	0x08011b20
 80029e8:	20000000 	.word	0x20000000
 80029ec:	20000004 	.word	0x20000004

080029f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029f6:	2300      	movs	r3, #0
 80029f8:	607b      	str	r3, [r7, #4]
 80029fa:	2300      	movs	r3, #0
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	2300      	movs	r3, #0
 8002a00:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a06:	4b63      	ldr	r3, [pc, #396]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 030c 	and.w	r3, r3, #12
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d007      	beq.n	8002a22 <HAL_RCC_GetSysClockFreq+0x32>
 8002a12:	2b08      	cmp	r3, #8
 8002a14:	d008      	beq.n	8002a28 <HAL_RCC_GetSysClockFreq+0x38>
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f040 80b4 	bne.w	8002b84 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a1c:	4b5e      	ldr	r3, [pc, #376]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002a1e:	60bb      	str	r3, [r7, #8]
       break;
 8002a20:	e0b3      	b.n	8002b8a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a22:	4b5e      	ldr	r3, [pc, #376]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002a24:	60bb      	str	r3, [r7, #8]
      break;
 8002a26:	e0b0      	b.n	8002b8a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a28:	4b5a      	ldr	r3, [pc, #360]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a30:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a32:	4b58      	ldr	r3, [pc, #352]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d04a      	beq.n	8002ad4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a3e:	4b55      	ldr	r3, [pc, #340]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	099b      	lsrs	r3, r3, #6
 8002a44:	f04f 0400 	mov.w	r4, #0
 8002a48:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a4c:	f04f 0200 	mov.w	r2, #0
 8002a50:	ea03 0501 	and.w	r5, r3, r1
 8002a54:	ea04 0602 	and.w	r6, r4, r2
 8002a58:	4629      	mov	r1, r5
 8002a5a:	4632      	mov	r2, r6
 8002a5c:	f04f 0300 	mov.w	r3, #0
 8002a60:	f04f 0400 	mov.w	r4, #0
 8002a64:	0154      	lsls	r4, r2, #5
 8002a66:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a6a:	014b      	lsls	r3, r1, #5
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4622      	mov	r2, r4
 8002a70:	1b49      	subs	r1, r1, r5
 8002a72:	eb62 0206 	sbc.w	r2, r2, r6
 8002a76:	f04f 0300 	mov.w	r3, #0
 8002a7a:	f04f 0400 	mov.w	r4, #0
 8002a7e:	0194      	lsls	r4, r2, #6
 8002a80:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a84:	018b      	lsls	r3, r1, #6
 8002a86:	1a5b      	subs	r3, r3, r1
 8002a88:	eb64 0402 	sbc.w	r4, r4, r2
 8002a8c:	f04f 0100 	mov.w	r1, #0
 8002a90:	f04f 0200 	mov.w	r2, #0
 8002a94:	00e2      	lsls	r2, r4, #3
 8002a96:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a9a:	00d9      	lsls	r1, r3, #3
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	4614      	mov	r4, r2
 8002aa0:	195b      	adds	r3, r3, r5
 8002aa2:	eb44 0406 	adc.w	r4, r4, r6
 8002aa6:	f04f 0100 	mov.w	r1, #0
 8002aaa:	f04f 0200 	mov.w	r2, #0
 8002aae:	0262      	lsls	r2, r4, #9
 8002ab0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002ab4:	0259      	lsls	r1, r3, #9
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	4614      	mov	r4, r2
 8002aba:	4618      	mov	r0, r3
 8002abc:	4621      	mov	r1, r4
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f04f 0400 	mov.w	r4, #0
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	4623      	mov	r3, r4
 8002ac8:	f7fd fbd2 	bl	8000270 <__aeabi_uldivmod>
 8002acc:	4603      	mov	r3, r0
 8002ace:	460c      	mov	r4, r1
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	e049      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ad4:	4b2f      	ldr	r3, [pc, #188]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	099b      	lsrs	r3, r3, #6
 8002ada:	f04f 0400 	mov.w	r4, #0
 8002ade:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	ea03 0501 	and.w	r5, r3, r1
 8002aea:	ea04 0602 	and.w	r6, r4, r2
 8002aee:	4629      	mov	r1, r5
 8002af0:	4632      	mov	r2, r6
 8002af2:	f04f 0300 	mov.w	r3, #0
 8002af6:	f04f 0400 	mov.w	r4, #0
 8002afa:	0154      	lsls	r4, r2, #5
 8002afc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b00:	014b      	lsls	r3, r1, #5
 8002b02:	4619      	mov	r1, r3
 8002b04:	4622      	mov	r2, r4
 8002b06:	1b49      	subs	r1, r1, r5
 8002b08:	eb62 0206 	sbc.w	r2, r2, r6
 8002b0c:	f04f 0300 	mov.w	r3, #0
 8002b10:	f04f 0400 	mov.w	r4, #0
 8002b14:	0194      	lsls	r4, r2, #6
 8002b16:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b1a:	018b      	lsls	r3, r1, #6
 8002b1c:	1a5b      	subs	r3, r3, r1
 8002b1e:	eb64 0402 	sbc.w	r4, r4, r2
 8002b22:	f04f 0100 	mov.w	r1, #0
 8002b26:	f04f 0200 	mov.w	r2, #0
 8002b2a:	00e2      	lsls	r2, r4, #3
 8002b2c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b30:	00d9      	lsls	r1, r3, #3
 8002b32:	460b      	mov	r3, r1
 8002b34:	4614      	mov	r4, r2
 8002b36:	195b      	adds	r3, r3, r5
 8002b38:	eb44 0406 	adc.w	r4, r4, r6
 8002b3c:	f04f 0100 	mov.w	r1, #0
 8002b40:	f04f 0200 	mov.w	r2, #0
 8002b44:	02a2      	lsls	r2, r4, #10
 8002b46:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002b4a:	0299      	lsls	r1, r3, #10
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	4614      	mov	r4, r2
 8002b50:	4618      	mov	r0, r3
 8002b52:	4621      	mov	r1, r4
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f04f 0400 	mov.w	r4, #0
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	4623      	mov	r3, r4
 8002b5e:	f7fd fb87 	bl	8000270 <__aeabi_uldivmod>
 8002b62:	4603      	mov	r3, r0
 8002b64:	460c      	mov	r4, r1
 8002b66:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b68:	4b0a      	ldr	r3, [pc, #40]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	0c1b      	lsrs	r3, r3, #16
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	3301      	adds	r3, #1
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b80:	60bb      	str	r3, [r7, #8]
      break;
 8002b82:	e002      	b.n	8002b8a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b84:	4b04      	ldr	r3, [pc, #16]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002b86:	60bb      	str	r3, [r7, #8]
      break;
 8002b88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b8a:	68bb      	ldr	r3, [r7, #8]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b94:	40023800 	.word	0x40023800
 8002b98:	00f42400 	.word	0x00f42400
 8002b9c:	007a1200 	.word	0x007a1200

08002ba0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ba4:	4b03      	ldr	r3, [pc, #12]	; (8002bb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	20000000 	.word	0x20000000

08002bb8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
	IP_ADDRESS[0] = 192;
 8002bbe:	4b85      	ldr	r3, [pc, #532]	; (8002dd4 <MX_LWIP_Init+0x21c>)
 8002bc0:	22c0      	movs	r2, #192	; 0xc0
 8002bc2:	701a      	strb	r2, [r3, #0]
	IP_ADDRESS[1] = 168;
 8002bc4:	4b83      	ldr	r3, [pc, #524]	; (8002dd4 <MX_LWIP_Init+0x21c>)
 8002bc6:	22a8      	movs	r2, #168	; 0xa8
 8002bc8:	705a      	strb	r2, [r3, #1]
	IP_ADDRESS[2] = 0;
 8002bca:	4b82      	ldr	r3, [pc, #520]	; (8002dd4 <MX_LWIP_Init+0x21c>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	709a      	strb	r2, [r3, #2]
	IP_ADDRESS[3] = 10;
 8002bd0:	4b80      	ldr	r3, [pc, #512]	; (8002dd4 <MX_LWIP_Init+0x21c>)
 8002bd2:	220a      	movs	r2, #10
 8002bd4:	70da      	strb	r2, [r3, #3]
	NETMASK_ADDRESS[0] = 255;
 8002bd6:	4b80      	ldr	r3, [pc, #512]	; (8002dd8 <MX_LWIP_Init+0x220>)
 8002bd8:	22ff      	movs	r2, #255	; 0xff
 8002bda:	701a      	strb	r2, [r3, #0]
	NETMASK_ADDRESS[1] = 255;
 8002bdc:	4b7e      	ldr	r3, [pc, #504]	; (8002dd8 <MX_LWIP_Init+0x220>)
 8002bde:	22ff      	movs	r2, #255	; 0xff
 8002be0:	705a      	strb	r2, [r3, #1]
	NETMASK_ADDRESS[2] = 255;
 8002be2:	4b7d      	ldr	r3, [pc, #500]	; (8002dd8 <MX_LWIP_Init+0x220>)
 8002be4:	22ff      	movs	r2, #255	; 0xff
 8002be6:	709a      	strb	r2, [r3, #2]
	NETMASK_ADDRESS[3] = 0;
 8002be8:	4b7b      	ldr	r3, [pc, #492]	; (8002dd8 <MX_LWIP_Init+0x220>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	70da      	strb	r2, [r3, #3]
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8002bee:	f000 fc30 	bl	8003452 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8002bf2:	4b78      	ldr	r3, [pc, #480]	; (8002dd4 <MX_LWIP_Init+0x21c>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	061a      	lsls	r2, r3, #24
 8002bf8:	4b76      	ldr	r3, [pc, #472]	; (8002dd4 <MX_LWIP_Init+0x21c>)
 8002bfa:	785b      	ldrb	r3, [r3, #1]
 8002bfc:	041b      	lsls	r3, r3, #16
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	4b74      	ldr	r3, [pc, #464]	; (8002dd4 <MX_LWIP_Init+0x21c>)
 8002c02:	789b      	ldrb	r3, [r3, #2]
 8002c04:	021b      	lsls	r3, r3, #8
 8002c06:	4313      	orrs	r3, r2
 8002c08:	4a72      	ldr	r2, [pc, #456]	; (8002dd4 <MX_LWIP_Init+0x21c>)
 8002c0a:	78d2      	ldrb	r2, [r2, #3]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	061a      	lsls	r2, r3, #24
 8002c10:	4b70      	ldr	r3, [pc, #448]	; (8002dd4 <MX_LWIP_Init+0x21c>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	0619      	lsls	r1, r3, #24
 8002c16:	4b6f      	ldr	r3, [pc, #444]	; (8002dd4 <MX_LWIP_Init+0x21c>)
 8002c18:	785b      	ldrb	r3, [r3, #1]
 8002c1a:	041b      	lsls	r3, r3, #16
 8002c1c:	4319      	orrs	r1, r3
 8002c1e:	4b6d      	ldr	r3, [pc, #436]	; (8002dd4 <MX_LWIP_Init+0x21c>)
 8002c20:	789b      	ldrb	r3, [r3, #2]
 8002c22:	021b      	lsls	r3, r3, #8
 8002c24:	430b      	orrs	r3, r1
 8002c26:	496b      	ldr	r1, [pc, #428]	; (8002dd4 <MX_LWIP_Init+0x21c>)
 8002c28:	78c9      	ldrb	r1, [r1, #3]
 8002c2a:	430b      	orrs	r3, r1
 8002c2c:	021b      	lsls	r3, r3, #8
 8002c2e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002c32:	431a      	orrs	r2, r3
 8002c34:	4b67      	ldr	r3, [pc, #412]	; (8002dd4 <MX_LWIP_Init+0x21c>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	0619      	lsls	r1, r3, #24
 8002c3a:	4b66      	ldr	r3, [pc, #408]	; (8002dd4 <MX_LWIP_Init+0x21c>)
 8002c3c:	785b      	ldrb	r3, [r3, #1]
 8002c3e:	041b      	lsls	r3, r3, #16
 8002c40:	4319      	orrs	r1, r3
 8002c42:	4b64      	ldr	r3, [pc, #400]	; (8002dd4 <MX_LWIP_Init+0x21c>)
 8002c44:	789b      	ldrb	r3, [r3, #2]
 8002c46:	021b      	lsls	r3, r3, #8
 8002c48:	430b      	orrs	r3, r1
 8002c4a:	4962      	ldr	r1, [pc, #392]	; (8002dd4 <MX_LWIP_Init+0x21c>)
 8002c4c:	78c9      	ldrb	r1, [r1, #3]
 8002c4e:	430b      	orrs	r3, r1
 8002c50:	0a1b      	lsrs	r3, r3, #8
 8002c52:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002c56:	431a      	orrs	r2, r3
 8002c58:	4b5e      	ldr	r3, [pc, #376]	; (8002dd4 <MX_LWIP_Init+0x21c>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	0619      	lsls	r1, r3, #24
 8002c5e:	4b5d      	ldr	r3, [pc, #372]	; (8002dd4 <MX_LWIP_Init+0x21c>)
 8002c60:	785b      	ldrb	r3, [r3, #1]
 8002c62:	041b      	lsls	r3, r3, #16
 8002c64:	4319      	orrs	r1, r3
 8002c66:	4b5b      	ldr	r3, [pc, #364]	; (8002dd4 <MX_LWIP_Init+0x21c>)
 8002c68:	789b      	ldrb	r3, [r3, #2]
 8002c6a:	021b      	lsls	r3, r3, #8
 8002c6c:	430b      	orrs	r3, r1
 8002c6e:	4959      	ldr	r1, [pc, #356]	; (8002dd4 <MX_LWIP_Init+0x21c>)
 8002c70:	78c9      	ldrb	r1, [r1, #3]
 8002c72:	430b      	orrs	r3, r1
 8002c74:	0e1b      	lsrs	r3, r3, #24
 8002c76:	4313      	orrs	r3, r2
 8002c78:	4a58      	ldr	r2, [pc, #352]	; (8002ddc <MX_LWIP_Init+0x224>)
 8002c7a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8002c7c:	4b56      	ldr	r3, [pc, #344]	; (8002dd8 <MX_LWIP_Init+0x220>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	061a      	lsls	r2, r3, #24
 8002c82:	4b55      	ldr	r3, [pc, #340]	; (8002dd8 <MX_LWIP_Init+0x220>)
 8002c84:	785b      	ldrb	r3, [r3, #1]
 8002c86:	041b      	lsls	r3, r3, #16
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	4b53      	ldr	r3, [pc, #332]	; (8002dd8 <MX_LWIP_Init+0x220>)
 8002c8c:	789b      	ldrb	r3, [r3, #2]
 8002c8e:	021b      	lsls	r3, r3, #8
 8002c90:	4313      	orrs	r3, r2
 8002c92:	4a51      	ldr	r2, [pc, #324]	; (8002dd8 <MX_LWIP_Init+0x220>)
 8002c94:	78d2      	ldrb	r2, [r2, #3]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	061a      	lsls	r2, r3, #24
 8002c9a:	4b4f      	ldr	r3, [pc, #316]	; (8002dd8 <MX_LWIP_Init+0x220>)
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	0619      	lsls	r1, r3, #24
 8002ca0:	4b4d      	ldr	r3, [pc, #308]	; (8002dd8 <MX_LWIP_Init+0x220>)
 8002ca2:	785b      	ldrb	r3, [r3, #1]
 8002ca4:	041b      	lsls	r3, r3, #16
 8002ca6:	4319      	orrs	r1, r3
 8002ca8:	4b4b      	ldr	r3, [pc, #300]	; (8002dd8 <MX_LWIP_Init+0x220>)
 8002caa:	789b      	ldrb	r3, [r3, #2]
 8002cac:	021b      	lsls	r3, r3, #8
 8002cae:	430b      	orrs	r3, r1
 8002cb0:	4949      	ldr	r1, [pc, #292]	; (8002dd8 <MX_LWIP_Init+0x220>)
 8002cb2:	78c9      	ldrb	r1, [r1, #3]
 8002cb4:	430b      	orrs	r3, r1
 8002cb6:	021b      	lsls	r3, r3, #8
 8002cb8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	4b46      	ldr	r3, [pc, #280]	; (8002dd8 <MX_LWIP_Init+0x220>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	0619      	lsls	r1, r3, #24
 8002cc4:	4b44      	ldr	r3, [pc, #272]	; (8002dd8 <MX_LWIP_Init+0x220>)
 8002cc6:	785b      	ldrb	r3, [r3, #1]
 8002cc8:	041b      	lsls	r3, r3, #16
 8002cca:	4319      	orrs	r1, r3
 8002ccc:	4b42      	ldr	r3, [pc, #264]	; (8002dd8 <MX_LWIP_Init+0x220>)
 8002cce:	789b      	ldrb	r3, [r3, #2]
 8002cd0:	021b      	lsls	r3, r3, #8
 8002cd2:	430b      	orrs	r3, r1
 8002cd4:	4940      	ldr	r1, [pc, #256]	; (8002dd8 <MX_LWIP_Init+0x220>)
 8002cd6:	78c9      	ldrb	r1, [r1, #3]
 8002cd8:	430b      	orrs	r3, r1
 8002cda:	0a1b      	lsrs	r3, r3, #8
 8002cdc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	4b3d      	ldr	r3, [pc, #244]	; (8002dd8 <MX_LWIP_Init+0x220>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	0619      	lsls	r1, r3, #24
 8002ce8:	4b3b      	ldr	r3, [pc, #236]	; (8002dd8 <MX_LWIP_Init+0x220>)
 8002cea:	785b      	ldrb	r3, [r3, #1]
 8002cec:	041b      	lsls	r3, r3, #16
 8002cee:	4319      	orrs	r1, r3
 8002cf0:	4b39      	ldr	r3, [pc, #228]	; (8002dd8 <MX_LWIP_Init+0x220>)
 8002cf2:	789b      	ldrb	r3, [r3, #2]
 8002cf4:	021b      	lsls	r3, r3, #8
 8002cf6:	430b      	orrs	r3, r1
 8002cf8:	4937      	ldr	r1, [pc, #220]	; (8002dd8 <MX_LWIP_Init+0x220>)
 8002cfa:	78c9      	ldrb	r1, [r1, #3]
 8002cfc:	430b      	orrs	r3, r1
 8002cfe:	0e1b      	lsrs	r3, r3, #24
 8002d00:	4313      	orrs	r3, r2
 8002d02:	4a37      	ldr	r2, [pc, #220]	; (8002de0 <MX_LWIP_Init+0x228>)
 8002d04:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8002d06:	4b37      	ldr	r3, [pc, #220]	; (8002de4 <MX_LWIP_Init+0x22c>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	061a      	lsls	r2, r3, #24
 8002d0c:	4b35      	ldr	r3, [pc, #212]	; (8002de4 <MX_LWIP_Init+0x22c>)
 8002d0e:	785b      	ldrb	r3, [r3, #1]
 8002d10:	041b      	lsls	r3, r3, #16
 8002d12:	431a      	orrs	r2, r3
 8002d14:	4b33      	ldr	r3, [pc, #204]	; (8002de4 <MX_LWIP_Init+0x22c>)
 8002d16:	789b      	ldrb	r3, [r3, #2]
 8002d18:	021b      	lsls	r3, r3, #8
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	4a31      	ldr	r2, [pc, #196]	; (8002de4 <MX_LWIP_Init+0x22c>)
 8002d1e:	78d2      	ldrb	r2, [r2, #3]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	061a      	lsls	r2, r3, #24
 8002d24:	4b2f      	ldr	r3, [pc, #188]	; (8002de4 <MX_LWIP_Init+0x22c>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	0619      	lsls	r1, r3, #24
 8002d2a:	4b2e      	ldr	r3, [pc, #184]	; (8002de4 <MX_LWIP_Init+0x22c>)
 8002d2c:	785b      	ldrb	r3, [r3, #1]
 8002d2e:	041b      	lsls	r3, r3, #16
 8002d30:	4319      	orrs	r1, r3
 8002d32:	4b2c      	ldr	r3, [pc, #176]	; (8002de4 <MX_LWIP_Init+0x22c>)
 8002d34:	789b      	ldrb	r3, [r3, #2]
 8002d36:	021b      	lsls	r3, r3, #8
 8002d38:	430b      	orrs	r3, r1
 8002d3a:	492a      	ldr	r1, [pc, #168]	; (8002de4 <MX_LWIP_Init+0x22c>)
 8002d3c:	78c9      	ldrb	r1, [r1, #3]
 8002d3e:	430b      	orrs	r3, r1
 8002d40:	021b      	lsls	r3, r3, #8
 8002d42:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002d46:	431a      	orrs	r2, r3
 8002d48:	4b26      	ldr	r3, [pc, #152]	; (8002de4 <MX_LWIP_Init+0x22c>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	0619      	lsls	r1, r3, #24
 8002d4e:	4b25      	ldr	r3, [pc, #148]	; (8002de4 <MX_LWIP_Init+0x22c>)
 8002d50:	785b      	ldrb	r3, [r3, #1]
 8002d52:	041b      	lsls	r3, r3, #16
 8002d54:	4319      	orrs	r1, r3
 8002d56:	4b23      	ldr	r3, [pc, #140]	; (8002de4 <MX_LWIP_Init+0x22c>)
 8002d58:	789b      	ldrb	r3, [r3, #2]
 8002d5a:	021b      	lsls	r3, r3, #8
 8002d5c:	430b      	orrs	r3, r1
 8002d5e:	4921      	ldr	r1, [pc, #132]	; (8002de4 <MX_LWIP_Init+0x22c>)
 8002d60:	78c9      	ldrb	r1, [r1, #3]
 8002d62:	430b      	orrs	r3, r1
 8002d64:	0a1b      	lsrs	r3, r3, #8
 8002d66:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	4b1d      	ldr	r3, [pc, #116]	; (8002de4 <MX_LWIP_Init+0x22c>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	0619      	lsls	r1, r3, #24
 8002d72:	4b1c      	ldr	r3, [pc, #112]	; (8002de4 <MX_LWIP_Init+0x22c>)
 8002d74:	785b      	ldrb	r3, [r3, #1]
 8002d76:	041b      	lsls	r3, r3, #16
 8002d78:	4319      	orrs	r1, r3
 8002d7a:	4b1a      	ldr	r3, [pc, #104]	; (8002de4 <MX_LWIP_Init+0x22c>)
 8002d7c:	789b      	ldrb	r3, [r3, #2]
 8002d7e:	021b      	lsls	r3, r3, #8
 8002d80:	430b      	orrs	r3, r1
 8002d82:	4918      	ldr	r1, [pc, #96]	; (8002de4 <MX_LWIP_Init+0x22c>)
 8002d84:	78c9      	ldrb	r1, [r1, #3]
 8002d86:	430b      	orrs	r3, r1
 8002d88:	0e1b      	lsrs	r3, r3, #24
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	4a16      	ldr	r2, [pc, #88]	; (8002de8 <MX_LWIP_Init+0x230>)
 8002d8e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8002d90:	4b16      	ldr	r3, [pc, #88]	; (8002dec <MX_LWIP_Init+0x234>)
 8002d92:	9302      	str	r3, [sp, #8]
 8002d94:	4b16      	ldr	r3, [pc, #88]	; (8002df0 <MX_LWIP_Init+0x238>)
 8002d96:	9301      	str	r3, [sp, #4]
 8002d98:	2300      	movs	r3, #0
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	4b12      	ldr	r3, [pc, #72]	; (8002de8 <MX_LWIP_Init+0x230>)
 8002d9e:	4a10      	ldr	r2, [pc, #64]	; (8002de0 <MX_LWIP_Init+0x228>)
 8002da0:	490e      	ldr	r1, [pc, #56]	; (8002ddc <MX_LWIP_Init+0x224>)
 8002da2:	4814      	ldr	r0, [pc, #80]	; (8002df4 <MX_LWIP_Init+0x23c>)
 8002da4:	f000 fffa 	bl	8003d9c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8002da8:	4812      	ldr	r0, [pc, #72]	; (8002df4 <MX_LWIP_Init+0x23c>)
 8002daa:	f001 f9a7 	bl	80040fc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8002dae:	4b11      	ldr	r3, [pc, #68]	; (8002df4 <MX_LWIP_Init+0x23c>)
 8002db0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002db4:	089b      	lsrs	r3, r3, #2
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d003      	beq.n	8002dc8 <MX_LWIP_Init+0x210>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8002dc0:	480c      	ldr	r0, [pc, #48]	; (8002df4 <MX_LWIP_Init+0x23c>)
 8002dc2:	f001 f9ab 	bl	800411c <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8002dc6:	e002      	b.n	8002dce <MX_LWIP_Init+0x216>
    netif_set_down(&gnetif);
 8002dc8:	480a      	ldr	r0, [pc, #40]	; (8002df4 <MX_LWIP_Init+0x23c>)
 8002dca:	f001 fa13 	bl	80041f4 <netif_set_down>
}
 8002dce:	bf00      	nop
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	20000254 	.word	0x20000254
 8002dd8:	20000250 	.word	0x20000250
 8002ddc:	2000024c 	.word	0x2000024c
 8002de0:	20000258 	.word	0x20000258
 8002de4:	20000218 	.word	0x20000218
 8002de8:	2000025c 	.word	0x2000025c
 8002dec:	0800e051 	.word	0x0800e051
 8002df0:	0800338d 	.word	0x0800338d
 8002df4:	2000021c 	.word	0x2000021c

08002df8 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS 
 */
void MX_LWIP_Process(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8002dfc:	4803      	ldr	r0, [pc, #12]	; (8002e0c <MX_LWIP_Process+0x14>)
 8002dfe:	f000 faa5 	bl	800334c <ethernetif_input>
  
/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */  
  /* Handle timeouts */
  sys_check_timeouts();
 8002e02:	f008 f98b 	bl	800b11c <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8002e06:	bf00      	nop
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	2000021c 	.word	0x2000021c

08002e10 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b08e      	sub	sp, #56	; 0x38
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	605a      	str	r2, [r3, #4]
 8002e22:	609a      	str	r2, [r3, #8]
 8002e24:	60da      	str	r2, [r3, #12]
 8002e26:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a46      	ldr	r2, [pc, #280]	; (8002f48 <HAL_ETH_MspInit+0x138>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	f040 8085 	bne.w	8002f3e <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002e34:	2300      	movs	r3, #0
 8002e36:	623b      	str	r3, [r7, #32]
 8002e38:	4b44      	ldr	r3, [pc, #272]	; (8002f4c <HAL_ETH_MspInit+0x13c>)
 8002e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3c:	4a43      	ldr	r2, [pc, #268]	; (8002f4c <HAL_ETH_MspInit+0x13c>)
 8002e3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e42:	6313      	str	r3, [r2, #48]	; 0x30
 8002e44:	4b41      	ldr	r3, [pc, #260]	; (8002f4c <HAL_ETH_MspInit+0x13c>)
 8002e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4c:	623b      	str	r3, [r7, #32]
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	2300      	movs	r3, #0
 8002e52:	61fb      	str	r3, [r7, #28]
 8002e54:	4b3d      	ldr	r3, [pc, #244]	; (8002f4c <HAL_ETH_MspInit+0x13c>)
 8002e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e58:	4a3c      	ldr	r2, [pc, #240]	; (8002f4c <HAL_ETH_MspInit+0x13c>)
 8002e5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e5e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e60:	4b3a      	ldr	r3, [pc, #232]	; (8002f4c <HAL_ETH_MspInit+0x13c>)
 8002e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e68:	61fb      	str	r3, [r7, #28]
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	61bb      	str	r3, [r7, #24]
 8002e70:	4b36      	ldr	r3, [pc, #216]	; (8002f4c <HAL_ETH_MspInit+0x13c>)
 8002e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e74:	4a35      	ldr	r2, [pc, #212]	; (8002f4c <HAL_ETH_MspInit+0x13c>)
 8002e76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002e7a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7c:	4b33      	ldr	r3, [pc, #204]	; (8002f4c <HAL_ETH_MspInit+0x13c>)
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e84:	61bb      	str	r3, [r7, #24]
 8002e86:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]
 8002e8c:	4b2f      	ldr	r3, [pc, #188]	; (8002f4c <HAL_ETH_MspInit+0x13c>)
 8002e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e90:	4a2e      	ldr	r2, [pc, #184]	; (8002f4c <HAL_ETH_MspInit+0x13c>)
 8002e92:	f043 0304 	orr.w	r3, r3, #4
 8002e96:	6313      	str	r3, [r2, #48]	; 0x30
 8002e98:	4b2c      	ldr	r3, [pc, #176]	; (8002f4c <HAL_ETH_MspInit+0x13c>)
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	617b      	str	r3, [r7, #20]
 8002ea2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	613b      	str	r3, [r7, #16]
 8002ea8:	4b28      	ldr	r3, [pc, #160]	; (8002f4c <HAL_ETH_MspInit+0x13c>)
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eac:	4a27      	ldr	r2, [pc, #156]	; (8002f4c <HAL_ETH_MspInit+0x13c>)
 8002eae:	f043 0301 	orr.w	r3, r3, #1
 8002eb2:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb4:	4b25      	ldr	r3, [pc, #148]	; (8002f4c <HAL_ETH_MspInit+0x13c>)
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	613b      	str	r3, [r7, #16]
 8002ebe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	4b21      	ldr	r3, [pc, #132]	; (8002f4c <HAL_ETH_MspInit+0x13c>)
 8002ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec8:	4a20      	ldr	r2, [pc, #128]	; (8002f4c <HAL_ETH_MspInit+0x13c>)
 8002eca:	f043 0302 	orr.w	r3, r3, #2
 8002ece:	6313      	str	r3, [r2, #48]	; 0x30
 8002ed0:	4b1e      	ldr	r3, [pc, #120]	; (8002f4c <HAL_ETH_MspInit+0x13c>)
 8002ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002edc:	2332      	movs	r3, #50	; 0x32
 8002ede:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002eec:	230b      	movs	r3, #11
 8002eee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ef0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4816      	ldr	r0, [pc, #88]	; (8002f50 <HAL_ETH_MspInit+0x140>)
 8002ef8:	f7ff f88a 	bl	8002010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8002efc:	2386      	movs	r3, #134	; 0x86
 8002efe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f00:	2302      	movs	r3, #2
 8002f02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f04:	2300      	movs	r3, #0
 8002f06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002f0c:	230b      	movs	r3, #11
 8002f0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f14:	4619      	mov	r1, r3
 8002f16:	480f      	ldr	r0, [pc, #60]	; (8002f54 <HAL_ETH_MspInit+0x144>)
 8002f18:	f7ff f87a 	bl	8002010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8002f1c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002f20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f22:	2302      	movs	r3, #2
 8002f24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f26:	2300      	movs	r3, #0
 8002f28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002f2e:	230b      	movs	r3, #11
 8002f30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f36:	4619      	mov	r1, r3
 8002f38:	4807      	ldr	r0, [pc, #28]	; (8002f58 <HAL_ETH_MspInit+0x148>)
 8002f3a:	f7ff f869 	bl	8002010 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8002f3e:	bf00      	nop
 8002f40:	3738      	adds	r7, #56	; 0x38
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40028000 	.word	0x40028000
 8002f4c:	40023800 	.word	0x40023800
 8002f50:	40020800 	.word	0x40020800
 8002f54:	40020000 	.word	0x40020000
 8002f58:	40020400 	.word	0x40020400

08002f5c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8002f64:	2300      	movs	r3, #0
 8002f66:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8002f68:	4b49      	ldr	r3, [pc, #292]	; (8003090 <low_level_init+0x134>)
 8002f6a:	4a4a      	ldr	r2, [pc, #296]	; (8003094 <low_level_init+0x138>)
 8002f6c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8002f6e:	4b48      	ldr	r3, [pc, #288]	; (8003090 <low_level_init+0x134>)
 8002f70:	2201      	movs	r2, #1
 8002f72:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8002f74:	4b46      	ldr	r3, [pc, #280]	; (8003090 <low_level_init+0x134>)
 8002f76:	2201      	movs	r2, #1
 8002f78:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8002f7e:	2380      	movs	r3, #128	; 0x80
 8002f80:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8002f82:	23e1      	movs	r3, #225	; 0xe1
 8002f84:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8002f86:	2300      	movs	r3, #0
 8002f88:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8002f92:	4a3f      	ldr	r2, [pc, #252]	; (8003090 <low_level_init+0x134>)
 8002f94:	f107 0308 	add.w	r3, r7, #8
 8002f98:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8002f9a:	4b3d      	ldr	r3, [pc, #244]	; (8003090 <low_level_init+0x134>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8002fa0:	4b3b      	ldr	r3, [pc, #236]	; (8003090 <low_level_init+0x134>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8002fa6:	4b3a      	ldr	r3, [pc, #232]	; (8003090 <low_level_init+0x134>)
 8002fa8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002fac:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8002fae:	4838      	ldr	r0, [pc, #224]	; (8003090 <low_level_init+0x134>)
 8002fb0:	f7fe f89a 	bl	80010e8 <HAL_ETH_Init>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8002fb8:	7dfb      	ldrb	r3, [r7, #23]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d108      	bne.n	8002fd0 <low_level_init+0x74>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002fc4:	f043 0304 	orr.w	r3, r3, #4
 8002fc8:	b2da      	uxtb	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8002fd0:	2304      	movs	r3, #4
 8002fd2:	4a31      	ldr	r2, [pc, #196]	; (8003098 <low_level_init+0x13c>)
 8002fd4:	4931      	ldr	r1, [pc, #196]	; (800309c <low_level_init+0x140>)
 8002fd6:	482e      	ldr	r0, [pc, #184]	; (8003090 <low_level_init+0x134>)
 8002fd8:	f7fe fa24 	bl	8001424 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8002fdc:	2304      	movs	r3, #4
 8002fde:	4a30      	ldr	r2, [pc, #192]	; (80030a0 <low_level_init+0x144>)
 8002fe0:	4930      	ldr	r1, [pc, #192]	; (80030a4 <low_level_init+0x148>)
 8002fe2:	482b      	ldr	r0, [pc, #172]	; (8003090 <low_level_init+0x134>)
 8002fe4:	f7fe fa87 	bl	80014f6 <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2206      	movs	r2, #6
 8002fec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8002ff0:	4b27      	ldr	r3, [pc, #156]	; (8003090 <low_level_init+0x134>)
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	781a      	ldrb	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8002ffc:	4b24      	ldr	r3, [pc, #144]	; (8003090 <low_level_init+0x134>)
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	785a      	ldrb	r2, [r3, #1]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003008:	4b21      	ldr	r3, [pc, #132]	; (8003090 <low_level_init+0x134>)
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	789a      	ldrb	r2, [r3, #2]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003014:	4b1e      	ldr	r3, [pc, #120]	; (8003090 <low_level_init+0x134>)
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	78da      	ldrb	r2, [r3, #3]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003020:	4b1b      	ldr	r3, [pc, #108]	; (8003090 <low_level_init+0x134>)
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	791a      	ldrb	r2, [r3, #4]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800302c:	4b18      	ldr	r3, [pc, #96]	; (8003090 <low_level_init+0x134>)
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	795a      	ldrb	r2, [r3, #5]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800303e:	841a      	strh	r2, [r3, #32]
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003046:	f043 030a 	orr.w	r3, r3, #10
 800304a:	b2da      	uxtb	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8003052:	480f      	ldr	r0, [pc, #60]	; (8003090 <low_level_init+0x134>)
 8003054:	f7fe fcf8 	bl	8001a48 <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8003058:	f107 0310 	add.w	r3, r7, #16
 800305c:	461a      	mov	r2, r3
 800305e:	211d      	movs	r1, #29
 8003060:	480b      	ldr	r0, [pc, #44]	; (8003090 <low_level_init+0x134>)
 8003062:	f7fe fc23 	bl	80018ac <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	f043 030b 	orr.w	r3, r3, #11
 800306c:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	461a      	mov	r2, r3
 8003072:	211d      	movs	r1, #29
 8003074:	4806      	ldr	r0, [pc, #24]	; (8003090 <low_level_init+0x134>)
 8003076:	f7fe fc81 	bl	800197c <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800307a:	f107 0310 	add.w	r3, r7, #16
 800307e:	461a      	mov	r2, r3
 8003080:	211d      	movs	r1, #29
 8003082:	4803      	ldr	r0, [pc, #12]	; (8003090 <low_level_init+0x134>)
 8003084:	f7fe fc12 	bl	80018ac <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8003088:	bf00      	nop
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	20001b30 	.word	0x20001b30
 8003094:	40028000 	.word	0x40028000
 8003098:	20001b78 	.word	0x20001b78
 800309c:	20000260 	.word	0x20000260
 80030a0:	200002e0 	.word	0x200002e0
 80030a4:	20001ab0 	.word	0x20001ab0

080030a8 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b08a      	sub	sp, #40	; 0x28
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80030b2:	4b4b      	ldr	r3, [pc, #300]	; (80031e0 <low_level_output+0x138>)
 80030b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80030ba:	2300      	movs	r3, #0
 80030bc:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80030be:	2300      	movs	r3, #0
 80030c0:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80030c2:	2300      	movs	r3, #0
 80030c4:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80030c6:	2300      	movs	r3, #0
 80030c8:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80030ca:	4b45      	ldr	r3, [pc, #276]	; (80031e0 <low_level_output+0x138>)
 80030cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ce:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80030d0:	2300      	movs	r3, #0
 80030d2:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	623b      	str	r3, [r7, #32]
 80030d8:	e05a      	b.n	8003190 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	da03      	bge.n	80030ea <low_level_output+0x42>
      {
        errval = ERR_USE;
 80030e2:	23f8      	movs	r3, #248	; 0xf8
 80030e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80030e8:	e05c      	b.n	80031a4 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80030ea:	6a3b      	ldr	r3, [r7, #32]
 80030ec:	895b      	ldrh	r3, [r3, #10]
 80030ee:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80030f0:	2300      	movs	r3, #0
 80030f2:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80030f4:	e02f      	b.n	8003156 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80030f6:	69fa      	ldr	r2, [r7, #28]
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	18d0      	adds	r0, r2, r3
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	685a      	ldr	r2, [r3, #4]
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	18d1      	adds	r1, r2, r3
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800310a:	3304      	adds	r3, #4
 800310c:	461a      	mov	r2, r3
 800310e:	f00b f8a8 	bl	800e262 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	da03      	bge.n	8003128 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8003120:	23f8      	movs	r3, #248	; 0xf8
 8003122:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8003126:	e03d      	b.n	80031a4 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	4413      	add	r3, r2
 8003134:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003138:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003144:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003150:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8003152:	2300      	movs	r3, #0
 8003154:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	4413      	add	r3, r2
 800315c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003160:	4293      	cmp	r3, r2
 8003162:	d8c8      	bhi.n	80030f6 <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8003164:	69fa      	ldr	r2, [r7, #28]
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	18d0      	adds	r0, r2, r3
 800316a:	6a3b      	ldr	r3, [r7, #32]
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	4413      	add	r3, r2
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	4619      	mov	r1, r3
 8003176:	f00b f874 	bl	800e262 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4413      	add	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4413      	add	r3, r2
 8003188:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800318a:	6a3b      	ldr	r3, [r7, #32]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	623b      	str	r3, [r7, #32]
 8003190:	6a3b      	ldr	r3, [r7, #32]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1a1      	bne.n	80030da <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8003196:	6979      	ldr	r1, [r7, #20]
 8003198:	4811      	ldr	r0, [pc, #68]	; (80031e0 <low_level_output+0x138>)
 800319a:	f7fe fa19 	bl	80015d0 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 800319e:	2300      	movs	r3, #0
 80031a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80031a4:	4b0e      	ldr	r3, [pc, #56]	; (80031e0 <low_level_output+0x138>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031ac:	3314      	adds	r3, #20
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0320 	and.w	r3, r3, #32
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00d      	beq.n	80031d4 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80031b8:	4b09      	ldr	r3, [pc, #36]	; (80031e0 <low_level_output+0x138>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031c0:	3314      	adds	r3, #20
 80031c2:	2220      	movs	r2, #32
 80031c4:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80031c6:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <low_level_output+0x138>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031ce:	3304      	adds	r3, #4
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80031d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3728      	adds	r7, #40	; 0x28
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	20001b30 	.word	0x20001b30

080031e4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b08c      	sub	sp, #48	; 0x30
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80031ec:	2300      	movs	r3, #0
 80031ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80031f0:	2300      	movs	r3, #0
 80031f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80031f4:	2300      	movs	r3, #0
 80031f6:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80031f8:	2300      	movs	r3, #0
 80031fa:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80031fc:	2300      	movs	r3, #0
 80031fe:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8003200:	2300      	movs	r3, #0
 8003202:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8003204:	2300      	movs	r3, #0
 8003206:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8003208:	484f      	ldr	r0, [pc, #316]	; (8003348 <low_level_input+0x164>)
 800320a:	f7fe facb 	bl	80017a4 <HAL_ETH_GetReceivedFrame>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <low_level_input+0x34>
  
    return NULL;
 8003214:	2300      	movs	r3, #0
 8003216:	e092      	b.n	800333e <low_level_input+0x15a>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8003218:	4b4b      	ldr	r3, [pc, #300]	; (8003348 <low_level_input+0x164>)
 800321a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800321e:	4b4a      	ldr	r3, [pc, #296]	; (8003348 <low_level_input+0x164>)
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 8003224:	89fb      	ldrh	r3, [r7, #14]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d007      	beq.n	800323a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800322a:	89fb      	ldrh	r3, [r7, #14]
 800322c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8003230:	4619      	mov	r1, r3
 8003232:	2000      	movs	r0, #0
 8003234:	f001 f89a 	bl	800436c <pbuf_alloc>
 8003238:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 800323a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323c:	2b00      	cmp	r3, #0
 800323e:	d04b      	beq.n	80032d8 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003240:	4b41      	ldr	r3, [pc, #260]	; (8003348 <low_level_input+0x164>)
 8003242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003244:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8003246:	2300      	movs	r3, #0
 8003248:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800324a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324c:	62bb      	str	r3, [r7, #40]	; 0x28
 800324e:	e040      	b.n	80032d2 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8003250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003252:	895b      	ldrh	r3, [r3, #10]
 8003254:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8003256:	2300      	movs	r3, #0
 8003258:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800325a:	e021      	b.n	80032a0 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800325c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	18d0      	adds	r0, r2, r3
 8003264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	18d1      	adds	r1, r2, r3
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8003270:	3304      	adds	r3, #4
 8003272:	461a      	mov	r2, r3
 8003274:	f00a fff5 	bl	800e262 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003278:	6a3b      	ldr	r3, [r7, #32]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800327e:	6a3b      	ldr	r3, [r7, #32]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8003284:	69fa      	ldr	r2, [r7, #28]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	4413      	add	r3, r2
 800328a:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800328e:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800329a:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800329c:	2300      	movs	r3, #0
 800329e:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	4413      	add	r3, r2
 80032a6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d8d6      	bhi.n	800325c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80032ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	18d0      	adds	r0, r2, r3
 80032b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	4413      	add	r3, r2
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	4619      	mov	r1, r3
 80032c0:	f00a ffcf 	bl	800e262 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80032c4:	69fa      	ldr	r2, [r7, #28]
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	4413      	add	r3, r2
 80032ca:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80032cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80032d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1bb      	bne.n	8003250 <low_level_input+0x6c>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80032d8:	4b1b      	ldr	r3, [pc, #108]	; (8003348 <low_level_input+0x164>)
 80032da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032dc:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80032de:	2300      	movs	r3, #0
 80032e0:	613b      	str	r3, [r7, #16]
 80032e2:	e00b      	b.n	80032fc <low_level_input+0x118>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80032e4:	6a3b      	ldr	r3, [r7, #32]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80032f0:	6a3b      	ldr	r3, [r7, #32]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	3301      	adds	r3, #1
 80032fa:	613b      	str	r3, [r7, #16]
 80032fc:	4b12      	ldr	r3, [pc, #72]	; (8003348 <low_level_input+0x164>)
 80032fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	429a      	cmp	r2, r3
 8003304:	d3ee      	bcc.n	80032e4 <low_level_input+0x100>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 8003306:	4b10      	ldr	r3, [pc, #64]	; (8003348 <low_level_input+0x164>)
 8003308:	2200      	movs	r2, #0
 800330a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800330c:	4b0e      	ldr	r3, [pc, #56]	; (8003348 <low_level_input+0x164>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003314:	3314      	adds	r3, #20
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00d      	beq.n	800333c <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8003320:	4b09      	ldr	r3, [pc, #36]	; (8003348 <low_level_input+0x164>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003328:	3314      	adds	r3, #20
 800332a:	2280      	movs	r2, #128	; 0x80
 800332c:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800332e:	4b06      	ldr	r3, [pc, #24]	; (8003348 <low_level_input+0x164>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003336:	3308      	adds	r3, #8
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]
  }
  return p;
 800333c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800333e:	4618      	mov	r0, r3
 8003340:	3730      	adds	r7, #48	; 0x30
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	20001b30 	.word	0x20001b30

0800334c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7ff ff45 	bl	80031e4 <low_level_input>
 800335a:	60f8      	str	r0, [r7, #12]
    
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d010      	beq.n	8003384 <ethernetif_input+0x38>
    
  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	4798      	blx	r3
 800336c:	4603      	mov	r3, r0
 800336e:	72fb      	strb	r3, [r7, #11]
    
  if (err != ERR_OK)
 8003370:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d006      	beq.n	8003386 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f001 fad7 	bl	800492c <pbuf_free>
    p = NULL;    
 800337e:	2300      	movs	r3, #0
 8003380:	60fb      	str	r3, [r7, #12]
 8003382:	e000      	b.n	8003386 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8003384:	bf00      	nop
  }
}
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d106      	bne.n	80033a8 <ethernetif_init+0x1c>
 800339a:	4b0e      	ldr	r3, [pc, #56]	; (80033d4 <ethernetif_init+0x48>)
 800339c:	f240 2207 	movw	r2, #519	; 0x207
 80033a0:	490d      	ldr	r1, [pc, #52]	; (80033d8 <ethernetif_init+0x4c>)
 80033a2:	480e      	ldr	r0, [pc, #56]	; (80033dc <ethernetif_init+0x50>)
 80033a4:	f00a ff70 	bl	800e288 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2273      	movs	r2, #115	; 0x73
 80033ac:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->name[1] = IFNAME1;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2274      	movs	r2, #116	; 0x74
 80033b4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a09      	ldr	r2, [pc, #36]	; (80033e0 <ethernetif_init+0x54>)
 80033bc:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a08      	ldr	r2, [pc, #32]	; (80033e4 <ethernetif_init+0x58>)
 80033c2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f7ff fdc9 	bl	8002f5c <low_level_init>

  return ERR_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	0800f140 	.word	0x0800f140
 80033d8:	0800f15c 	.word	0x0800f15c
 80033dc:	0800f16c 	.word	0x0800f16c
 80033e0:	0800c521 	.word	0x0800c521
 80033e4:	080030a9 	.word	0x080030a9

080033e8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80033ec:	f7fd fd68 	bl	8000ec0 <HAL_GetTick>
 80033f0:	4603      	mov	r3, r0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b083      	sub	sp, #12
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	4603      	mov	r3, r0
 80033fe:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8003400:	88fb      	ldrh	r3, [r7, #6]
 8003402:	021b      	lsls	r3, r3, #8
 8003404:	b21a      	sxth	r2, r3
 8003406:	88fb      	ldrh	r3, [r7, #6]
 8003408:	0a1b      	lsrs	r3, r3, #8
 800340a:	b29b      	uxth	r3, r3
 800340c:	b21b      	sxth	r3, r3
 800340e:	4313      	orrs	r3, r2
 8003410:	b21b      	sxth	r3, r3
 8003412:	b29b      	uxth	r3, r3
}
 8003414:	4618      	mov	r0, r3
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	061a      	lsls	r2, r3, #24
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	021b      	lsls	r3, r3, #8
 8003430:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003434:	431a      	orrs	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	0a1b      	lsrs	r3, r3, #8
 800343a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800343e:	431a      	orrs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	0e1b      	lsrs	r3, r3, #24
 8003444:	4313      	orrs	r3, r2
}
 8003446:	4618      	mov	r0, r3
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b082      	sub	sp, #8
 8003456:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8003458:	2300      	movs	r3, #0
 800345a:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800345c:	f000 f8d4 	bl	8003608 <mem_init>
  memp_init();
 8003460:	f000 fbda 	bl	8003c18 <memp_init>
  pbuf_init();
  netif_init();
 8003464:	f000 fc92 	bl	8003d8c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8003468:	f007 fe9a 	bl	800b1a0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800346c:	f001 fcfc 	bl	8004e68 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8003470:	f007 fe0e 	bl	800b090 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8003474:	bf00      	nop
 8003476:	3708      	adds	r7, #8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	4603      	mov	r3, r0
 8003484:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8003486:	4b05      	ldr	r3, [pc, #20]	; (800349c <ptr_to_mem+0x20>)
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	88fb      	ldrh	r3, [r7, #6]
 800348c:	4413      	add	r3, r2
}
 800348e:	4618      	mov	r0, r3
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	2000009c 	.word	0x2000009c

080034a0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a05      	ldr	r2, [pc, #20]	; (80034c0 <mem_to_ptr+0x20>)
 80034ac:	6812      	ldr	r2, [r2, #0]
 80034ae:	1a9b      	subs	r3, r3, r2
 80034b0:	b29b      	uxth	r3, r3
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	2000009c 	.word	0x2000009c

080034c4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80034c4:	b590      	push	{r4, r7, lr}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80034cc:	4b45      	ldr	r3, [pc, #276]	; (80035e4 <plug_holes+0x120>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d206      	bcs.n	80034e4 <plug_holes+0x20>
 80034d6:	4b44      	ldr	r3, [pc, #272]	; (80035e8 <plug_holes+0x124>)
 80034d8:	f240 12df 	movw	r2, #479	; 0x1df
 80034dc:	4943      	ldr	r1, [pc, #268]	; (80035ec <plug_holes+0x128>)
 80034de:	4844      	ldr	r0, [pc, #272]	; (80035f0 <plug_holes+0x12c>)
 80034e0:	f00a fed2 	bl	800e288 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80034e4:	4b43      	ldr	r3, [pc, #268]	; (80035f4 <plug_holes+0x130>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d306      	bcc.n	80034fc <plug_holes+0x38>
 80034ee:	4b3e      	ldr	r3, [pc, #248]	; (80035e8 <plug_holes+0x124>)
 80034f0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80034f4:	4940      	ldr	r1, [pc, #256]	; (80035f8 <plug_holes+0x134>)
 80034f6:	483e      	ldr	r0, [pc, #248]	; (80035f0 <plug_holes+0x12c>)
 80034f8:	f00a fec6 	bl	800e288 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	791b      	ldrb	r3, [r3, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d006      	beq.n	8003512 <plug_holes+0x4e>
 8003504:	4b38      	ldr	r3, [pc, #224]	; (80035e8 <plug_holes+0x124>)
 8003506:	f240 12e1 	movw	r2, #481	; 0x1e1
 800350a:	493c      	ldr	r1, [pc, #240]	; (80035fc <plug_holes+0x138>)
 800350c:	4838      	ldr	r0, [pc, #224]	; (80035f0 <plug_holes+0x12c>)
 800350e:	f00a febb 	bl	800e288 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	881b      	ldrh	r3, [r3, #0]
 8003516:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800351a:	d906      	bls.n	800352a <plug_holes+0x66>
 800351c:	4b32      	ldr	r3, [pc, #200]	; (80035e8 <plug_holes+0x124>)
 800351e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8003522:	4937      	ldr	r1, [pc, #220]	; (8003600 <plug_holes+0x13c>)
 8003524:	4832      	ldr	r0, [pc, #200]	; (80035f0 <plug_holes+0x12c>)
 8003526:	f00a feaf 	bl	800e288 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	881b      	ldrh	r3, [r3, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff ffa4 	bl	800347c <ptr_to_mem>
 8003534:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	429a      	cmp	r2, r3
 800353c:	d024      	beq.n	8003588 <plug_holes+0xc4>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	791b      	ldrb	r3, [r3, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d120      	bne.n	8003588 <plug_holes+0xc4>
 8003546:	4b2b      	ldr	r3, [pc, #172]	; (80035f4 <plug_holes+0x130>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	429a      	cmp	r2, r3
 800354e:	d01b      	beq.n	8003588 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8003550:	4b2c      	ldr	r3, [pc, #176]	; (8003604 <plug_holes+0x140>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	429a      	cmp	r2, r3
 8003558:	d102      	bne.n	8003560 <plug_holes+0x9c>
      lfree = mem;
 800355a:	4a2a      	ldr	r2, [pc, #168]	; (8003604 <plug_holes+0x140>)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	881a      	ldrh	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	881b      	ldrh	r3, [r3, #0]
 800356c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003570:	d00a      	beq.n	8003588 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	881b      	ldrh	r3, [r3, #0]
 8003576:	4618      	mov	r0, r3
 8003578:	f7ff ff80 	bl	800347c <ptr_to_mem>
 800357c:	4604      	mov	r4, r0
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7ff ff8e 	bl	80034a0 <mem_to_ptr>
 8003584:	4603      	mov	r3, r0
 8003586:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	885b      	ldrh	r3, [r3, #2]
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff ff75 	bl	800347c <ptr_to_mem>
 8003592:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	429a      	cmp	r2, r3
 800359a:	d01f      	beq.n	80035dc <plug_holes+0x118>
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	791b      	ldrb	r3, [r3, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d11b      	bne.n	80035dc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80035a4:	4b17      	ldr	r3, [pc, #92]	; (8003604 <plug_holes+0x140>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d102      	bne.n	80035b4 <plug_holes+0xf0>
      lfree = pmem;
 80035ae:	4a15      	ldr	r2, [pc, #84]	; (8003604 <plug_holes+0x140>)
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	881a      	ldrh	r2, [r3, #0]
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	881b      	ldrh	r3, [r3, #0]
 80035c0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80035c4:	d00a      	beq.n	80035dc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff ff56 	bl	800347c <ptr_to_mem>
 80035d0:	4604      	mov	r4, r0
 80035d2:	68b8      	ldr	r0, [r7, #8]
 80035d4:	f7ff ff64 	bl	80034a0 <mem_to_ptr>
 80035d8:	4603      	mov	r3, r0
 80035da:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80035dc:	bf00      	nop
 80035de:	3714      	adds	r7, #20
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd90      	pop	{r4, r7, pc}
 80035e4:	2000009c 	.word	0x2000009c
 80035e8:	0800f194 	.word	0x0800f194
 80035ec:	0800f1c4 	.word	0x0800f1c4
 80035f0:	0800f1dc 	.word	0x0800f1dc
 80035f4:	200000a0 	.word	0x200000a0
 80035f8:	0800f204 	.word	0x0800f204
 80035fc:	0800f220 	.word	0x0800f220
 8003600:	0800f23c 	.word	0x0800f23c
 8003604:	200000a4 	.word	0x200000a4

08003608 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800360e:	4b18      	ldr	r3, [pc, #96]	; (8003670 <mem_init+0x68>)
 8003610:	3303      	adds	r3, #3
 8003612:	f023 0303 	bic.w	r3, r3, #3
 8003616:	461a      	mov	r2, r3
 8003618:	4b16      	ldr	r3, [pc, #88]	; (8003674 <mem_init+0x6c>)
 800361a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800361c:	4b15      	ldr	r3, [pc, #84]	; (8003674 <mem_init+0x6c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003628:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8003636:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800363a:	f7ff ff1f 	bl	800347c <ptr_to_mem>
 800363e:	4602      	mov	r2, r0
 8003640:	4b0d      	ldr	r3, [pc, #52]	; (8003678 <mem_init+0x70>)
 8003642:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 8003644:	4b0c      	ldr	r3, [pc, #48]	; (8003678 <mem_init+0x70>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2201      	movs	r2, #1
 800364a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800364c:	4b0a      	ldr	r3, [pc, #40]	; (8003678 <mem_init+0x70>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003654:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8003656:	4b08      	ldr	r3, [pc, #32]	; (8003678 <mem_init+0x70>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800365e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8003660:	4b04      	ldr	r3, [pc, #16]	; (8003674 <mem_init+0x6c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a05      	ldr	r2, [pc, #20]	; (800367c <mem_init+0x74>)
 8003666:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8003668:	bf00      	nop
 800366a:	3708      	adds	r7, #8
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	20003360 	.word	0x20003360
 8003674:	2000009c 	.word	0x2000009c
 8003678:	200000a0 	.word	0x200000a0
 800367c:	200000a4 	.word	0x200000a4

08003680 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7ff ff09 	bl	80034a0 <mem_to_ptr>
 800368e:	4603      	mov	r3, r0
 8003690:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	881b      	ldrh	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f7ff fef0 	bl	800347c <ptr_to_mem>
 800369c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	885b      	ldrh	r3, [r3, #2]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff feea 	bl	800347c <ptr_to_mem>
 80036a8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	881b      	ldrh	r3, [r3, #0]
 80036ae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80036b2:	d818      	bhi.n	80036e6 <mem_link_valid+0x66>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	885b      	ldrh	r3, [r3, #2]
 80036b8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80036bc:	d813      	bhi.n	80036e6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80036c2:	8afa      	ldrh	r2, [r7, #22]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d004      	beq.n	80036d2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	881b      	ldrh	r3, [r3, #0]
 80036cc:	8afa      	ldrh	r2, [r7, #22]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d109      	bne.n	80036e6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80036d2:	4b08      	ldr	r3, [pc, #32]	; (80036f4 <mem_link_valid+0x74>)
 80036d4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d006      	beq.n	80036ea <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	885b      	ldrh	r3, [r3, #2]
 80036e0:	8afa      	ldrh	r2, [r7, #22]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d001      	beq.n	80036ea <mem_link_valid+0x6a>
    return 0;
 80036e6:	2300      	movs	r3, #0
 80036e8:	e000      	b.n	80036ec <mem_link_valid+0x6c>
  }
  return 1;
 80036ea:	2301      	movs	r3, #1
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3718      	adds	r7, #24
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	200000a0 	.word	0x200000a0

080036f8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d04c      	beq.n	80037a0 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f003 0303 	and.w	r3, r3, #3
 800370c:	2b00      	cmp	r3, #0
 800370e:	d007      	beq.n	8003720 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8003710:	4b25      	ldr	r3, [pc, #148]	; (80037a8 <mem_free+0xb0>)
 8003712:	f240 2273 	movw	r2, #627	; 0x273
 8003716:	4925      	ldr	r1, [pc, #148]	; (80037ac <mem_free+0xb4>)
 8003718:	4825      	ldr	r0, [pc, #148]	; (80037b0 <mem_free+0xb8>)
 800371a:	f00a fdb5 	bl	800e288 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800371e:	e040      	b.n	80037a2 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3b08      	subs	r3, #8
 8003724:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8003726:	4b23      	ldr	r3, [pc, #140]	; (80037b4 <mem_free+0xbc>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	429a      	cmp	r2, r3
 800372e:	d306      	bcc.n	800373e <mem_free+0x46>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f103 020c 	add.w	r2, r3, #12
 8003736:	4b20      	ldr	r3, [pc, #128]	; (80037b8 <mem_free+0xc0>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	429a      	cmp	r2, r3
 800373c:	d907      	bls.n	800374e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800373e:	4b1a      	ldr	r3, [pc, #104]	; (80037a8 <mem_free+0xb0>)
 8003740:	f240 227f 	movw	r2, #639	; 0x27f
 8003744:	491d      	ldr	r1, [pc, #116]	; (80037bc <mem_free+0xc4>)
 8003746:	481a      	ldr	r0, [pc, #104]	; (80037b0 <mem_free+0xb8>)
 8003748:	f00a fd9e 	bl	800e288 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800374c:	e029      	b.n	80037a2 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	791b      	ldrb	r3, [r3, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d107      	bne.n	8003766 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8003756:	4b14      	ldr	r3, [pc, #80]	; (80037a8 <mem_free+0xb0>)
 8003758:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800375c:	4918      	ldr	r1, [pc, #96]	; (80037c0 <mem_free+0xc8>)
 800375e:	4814      	ldr	r0, [pc, #80]	; (80037b0 <mem_free+0xb8>)
 8003760:	f00a fd92 	bl	800e288 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003764:	e01d      	b.n	80037a2 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f7ff ff8a 	bl	8003680 <mem_link_valid>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d107      	bne.n	8003782 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8003772:	4b0d      	ldr	r3, [pc, #52]	; (80037a8 <mem_free+0xb0>)
 8003774:	f240 2295 	movw	r2, #661	; 0x295
 8003778:	4912      	ldr	r1, [pc, #72]	; (80037c4 <mem_free+0xcc>)
 800377a:	480d      	ldr	r0, [pc, #52]	; (80037b0 <mem_free+0xb8>)
 800377c:	f00a fd84 	bl	800e288 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003780:	e00f      	b.n	80037a2 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8003788:	4b0f      	ldr	r3, [pc, #60]	; (80037c8 <mem_free+0xd0>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	429a      	cmp	r2, r3
 8003790:	d202      	bcs.n	8003798 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8003792:	4a0d      	ldr	r2, [pc, #52]	; (80037c8 <mem_free+0xd0>)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	f7ff fe93 	bl	80034c4 <plug_holes>
 800379e:	e000      	b.n	80037a2 <mem_free+0xaa>
    return;
 80037a0:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	0800f194 	.word	0x0800f194
 80037ac:	0800f268 	.word	0x0800f268
 80037b0:	0800f1dc 	.word	0x0800f1dc
 80037b4:	2000009c 	.word	0x2000009c
 80037b8:	200000a0 	.word	0x200000a0
 80037bc:	0800f28c 	.word	0x0800f28c
 80037c0:	0800f2a8 	.word	0x0800f2a8
 80037c4:	0800f2d0 	.word	0x0800f2d0
 80037c8:	200000a4 	.word	0x200000a4

080037cc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b088      	sub	sp, #32
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	460b      	mov	r3, r1
 80037d6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80037d8:	887b      	ldrh	r3, [r7, #2]
 80037da:	3303      	adds	r3, #3
 80037dc:	b29b      	uxth	r3, r3
 80037de:	f023 0303 	bic.w	r3, r3, #3
 80037e2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80037e4:	8bfb      	ldrh	r3, [r7, #30]
 80037e6:	2b0b      	cmp	r3, #11
 80037e8:	d801      	bhi.n	80037ee <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80037ea:	230c      	movs	r3, #12
 80037ec:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80037ee:	8bfb      	ldrh	r3, [r7, #30]
 80037f0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80037f4:	d803      	bhi.n	80037fe <mem_trim+0x32>
 80037f6:	8bfa      	ldrh	r2, [r7, #30]
 80037f8:	887b      	ldrh	r3, [r7, #2]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d201      	bcs.n	8003802 <mem_trim+0x36>
    return NULL;
 80037fe:	2300      	movs	r3, #0
 8003800:	e0cc      	b.n	800399c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8003802:	4b68      	ldr	r3, [pc, #416]	; (80039a4 <mem_trim+0x1d8>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	429a      	cmp	r2, r3
 800380a:	d304      	bcc.n	8003816 <mem_trim+0x4a>
 800380c:	4b66      	ldr	r3, [pc, #408]	; (80039a8 <mem_trim+0x1dc>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	429a      	cmp	r2, r3
 8003814:	d306      	bcc.n	8003824 <mem_trim+0x58>
 8003816:	4b65      	ldr	r3, [pc, #404]	; (80039ac <mem_trim+0x1e0>)
 8003818:	f240 22d2 	movw	r2, #722	; 0x2d2
 800381c:	4964      	ldr	r1, [pc, #400]	; (80039b0 <mem_trim+0x1e4>)
 800381e:	4865      	ldr	r0, [pc, #404]	; (80039b4 <mem_trim+0x1e8>)
 8003820:	f00a fd32 	bl	800e288 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8003824:	4b5f      	ldr	r3, [pc, #380]	; (80039a4 <mem_trim+0x1d8>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	429a      	cmp	r2, r3
 800382c:	d304      	bcc.n	8003838 <mem_trim+0x6c>
 800382e:	4b5e      	ldr	r3, [pc, #376]	; (80039a8 <mem_trim+0x1dc>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	429a      	cmp	r2, r3
 8003836:	d301      	bcc.n	800383c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	e0af      	b.n	800399c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	3b08      	subs	r3, #8
 8003840:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8003842:	69b8      	ldr	r0, [r7, #24]
 8003844:	f7ff fe2c 	bl	80034a0 <mem_to_ptr>
 8003848:	4603      	mov	r3, r0
 800384a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	881a      	ldrh	r2, [r3, #0]
 8003850:	8afb      	ldrh	r3, [r7, #22]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	b29b      	uxth	r3, r3
 8003856:	3b08      	subs	r3, #8
 8003858:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800385a:	8bfa      	ldrh	r2, [r7, #30]
 800385c:	8abb      	ldrh	r3, [r7, #20]
 800385e:	429a      	cmp	r2, r3
 8003860:	d906      	bls.n	8003870 <mem_trim+0xa4>
 8003862:	4b52      	ldr	r3, [pc, #328]	; (80039ac <mem_trim+0x1e0>)
 8003864:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8003868:	4953      	ldr	r1, [pc, #332]	; (80039b8 <mem_trim+0x1ec>)
 800386a:	4852      	ldr	r0, [pc, #328]	; (80039b4 <mem_trim+0x1e8>)
 800386c:	f00a fd0c 	bl	800e288 <iprintf>
  if (newsize > size) {
 8003870:	8bfa      	ldrh	r2, [r7, #30]
 8003872:	8abb      	ldrh	r3, [r7, #20]
 8003874:	429a      	cmp	r2, r3
 8003876:	d901      	bls.n	800387c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8003878:	2300      	movs	r3, #0
 800387a:	e08f      	b.n	800399c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800387c:	8bfa      	ldrh	r2, [r7, #30]
 800387e:	8abb      	ldrh	r3, [r7, #20]
 8003880:	429a      	cmp	r2, r3
 8003882:	d101      	bne.n	8003888 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	e089      	b.n	800399c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	881b      	ldrh	r3, [r3, #0]
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff fdf5 	bl	800347c <ptr_to_mem>
 8003892:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	791b      	ldrb	r3, [r3, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d13f      	bne.n	800391c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	881b      	ldrh	r3, [r3, #0]
 80038a0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80038a4:	d106      	bne.n	80038b4 <mem_trim+0xe8>
 80038a6:	4b41      	ldr	r3, [pc, #260]	; (80039ac <mem_trim+0x1e0>)
 80038a8:	f240 22f5 	movw	r2, #757	; 0x2f5
 80038ac:	4943      	ldr	r1, [pc, #268]	; (80039bc <mem_trim+0x1f0>)
 80038ae:	4841      	ldr	r0, [pc, #260]	; (80039b4 <mem_trim+0x1e8>)
 80038b0:	f00a fcea 	bl	800e288 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	881b      	ldrh	r3, [r3, #0]
 80038b8:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80038ba:	8afa      	ldrh	r2, [r7, #22]
 80038bc:	8bfb      	ldrh	r3, [r7, #30]
 80038be:	4413      	add	r3, r2
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	3308      	adds	r3, #8
 80038c4:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80038c6:	4b3e      	ldr	r3, [pc, #248]	; (80039c0 <mem_trim+0x1f4>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d106      	bne.n	80038de <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80038d0:	89fb      	ldrh	r3, [r7, #14]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7ff fdd2 	bl	800347c <ptr_to_mem>
 80038d8:	4602      	mov	r2, r0
 80038da:	4b39      	ldr	r3, [pc, #228]	; (80039c0 <mem_trim+0x1f4>)
 80038dc:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80038de:	89fb      	ldrh	r3, [r7, #14]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7ff fdcb 	bl	800347c <ptr_to_mem>
 80038e6:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	2200      	movs	r2, #0
 80038ec:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	89ba      	ldrh	r2, [r7, #12]
 80038f2:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	8afa      	ldrh	r2, [r7, #22]
 80038f8:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	89fa      	ldrh	r2, [r7, #14]
 80038fe:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003908:	d047      	beq.n	800399a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	881b      	ldrh	r3, [r3, #0]
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff fdb4 	bl	800347c <ptr_to_mem>
 8003914:	4602      	mov	r2, r0
 8003916:	89fb      	ldrh	r3, [r7, #14]
 8003918:	8053      	strh	r3, [r2, #2]
 800391a:	e03e      	b.n	800399a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800391c:	8bfb      	ldrh	r3, [r7, #30]
 800391e:	f103 0214 	add.w	r2, r3, #20
 8003922:	8abb      	ldrh	r3, [r7, #20]
 8003924:	429a      	cmp	r2, r3
 8003926:	d838      	bhi.n	800399a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8003928:	8afa      	ldrh	r2, [r7, #22]
 800392a:	8bfb      	ldrh	r3, [r7, #30]
 800392c:	4413      	add	r3, r2
 800392e:	b29b      	uxth	r3, r3
 8003930:	3308      	adds	r3, #8
 8003932:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	881b      	ldrh	r3, [r3, #0]
 8003938:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800393c:	d106      	bne.n	800394c <mem_trim+0x180>
 800393e:	4b1b      	ldr	r3, [pc, #108]	; (80039ac <mem_trim+0x1e0>)
 8003940:	f240 3216 	movw	r2, #790	; 0x316
 8003944:	491d      	ldr	r1, [pc, #116]	; (80039bc <mem_trim+0x1f0>)
 8003946:	481b      	ldr	r0, [pc, #108]	; (80039b4 <mem_trim+0x1e8>)
 8003948:	f00a fc9e 	bl	800e288 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800394c:	89fb      	ldrh	r3, [r7, #14]
 800394e:	4618      	mov	r0, r3
 8003950:	f7ff fd94 	bl	800347c <ptr_to_mem>
 8003954:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8003956:	4b1a      	ldr	r3, [pc, #104]	; (80039c0 <mem_trim+0x1f4>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	429a      	cmp	r2, r3
 800395e:	d202      	bcs.n	8003966 <mem_trim+0x19a>
      lfree = mem2;
 8003960:	4a17      	ldr	r2, [pc, #92]	; (80039c0 <mem_trim+0x1f4>)
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	2200      	movs	r2, #0
 800396a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	881a      	ldrh	r2, [r3, #0]
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	8afa      	ldrh	r2, [r7, #22]
 8003978:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	89fa      	ldrh	r2, [r7, #14]
 800397e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	881b      	ldrh	r3, [r3, #0]
 8003984:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003988:	d007      	beq.n	800399a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	881b      	ldrh	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f7ff fd74 	bl	800347c <ptr_to_mem>
 8003994:	4602      	mov	r2, r0
 8003996:	89fb      	ldrh	r3, [r7, #14]
 8003998:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800399a:	687b      	ldr	r3, [r7, #4]
}
 800399c:	4618      	mov	r0, r3
 800399e:	3720      	adds	r7, #32
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	2000009c 	.word	0x2000009c
 80039a8:	200000a0 	.word	0x200000a0
 80039ac:	0800f194 	.word	0x0800f194
 80039b0:	0800f304 	.word	0x0800f304
 80039b4:	0800f1dc 	.word	0x0800f1dc
 80039b8:	0800f31c 	.word	0x0800f31c
 80039bc:	0800f33c 	.word	0x0800f33c
 80039c0:	200000a4 	.word	0x200000a4

080039c4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b088      	sub	sp, #32
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	4603      	mov	r3, r0
 80039cc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80039ce:	88fb      	ldrh	r3, [r7, #6]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d101      	bne.n	80039d8 <mem_malloc+0x14>
    return NULL;
 80039d4:	2300      	movs	r3, #0
 80039d6:	e0d9      	b.n	8003b8c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80039d8:	88fb      	ldrh	r3, [r7, #6]
 80039da:	3303      	adds	r3, #3
 80039dc:	b29b      	uxth	r3, r3
 80039de:	f023 0303 	bic.w	r3, r3, #3
 80039e2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80039e4:	8bbb      	ldrh	r3, [r7, #28]
 80039e6:	2b0b      	cmp	r3, #11
 80039e8:	d801      	bhi.n	80039ee <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80039ea:	230c      	movs	r3, #12
 80039ec:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80039ee:	8bbb      	ldrh	r3, [r7, #28]
 80039f0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80039f4:	d803      	bhi.n	80039fe <mem_malloc+0x3a>
 80039f6:	8bba      	ldrh	r2, [r7, #28]
 80039f8:	88fb      	ldrh	r3, [r7, #6]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d201      	bcs.n	8003a02 <mem_malloc+0x3e>
    return NULL;
 80039fe:	2300      	movs	r3, #0
 8003a00:	e0c4      	b.n	8003b8c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8003a02:	4b64      	ldr	r3, [pc, #400]	; (8003b94 <mem_malloc+0x1d0>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7ff fd4a 	bl	80034a0 <mem_to_ptr>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	83fb      	strh	r3, [r7, #30]
 8003a10:	e0b4      	b.n	8003b7c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8003a12:	8bfb      	ldrh	r3, [r7, #30]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff fd31 	bl	800347c <ptr_to_mem>
 8003a1a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	791b      	ldrb	r3, [r3, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f040 80a4 	bne.w	8003b6e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	881b      	ldrh	r3, [r3, #0]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	8bfb      	ldrh	r3, [r7, #30]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	f1a3 0208 	sub.w	r2, r3, #8
 8003a34:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8003a36:	429a      	cmp	r2, r3
 8003a38:	f0c0 8099 	bcc.w	8003b6e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	881b      	ldrh	r3, [r3, #0]
 8003a40:	461a      	mov	r2, r3
 8003a42:	8bfb      	ldrh	r3, [r7, #30]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	f1a3 0208 	sub.w	r2, r3, #8
 8003a4a:	8bbb      	ldrh	r3, [r7, #28]
 8003a4c:	3314      	adds	r3, #20
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d333      	bcc.n	8003aba <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8003a52:	8bfa      	ldrh	r2, [r7, #30]
 8003a54:	8bbb      	ldrh	r3, [r7, #28]
 8003a56:	4413      	add	r3, r2
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	3308      	adds	r3, #8
 8003a5c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8003a5e:	8a7b      	ldrh	r3, [r7, #18]
 8003a60:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003a64:	d106      	bne.n	8003a74 <mem_malloc+0xb0>
 8003a66:	4b4c      	ldr	r3, [pc, #304]	; (8003b98 <mem_malloc+0x1d4>)
 8003a68:	f240 3287 	movw	r2, #903	; 0x387
 8003a6c:	494b      	ldr	r1, [pc, #300]	; (8003b9c <mem_malloc+0x1d8>)
 8003a6e:	484c      	ldr	r0, [pc, #304]	; (8003ba0 <mem_malloc+0x1dc>)
 8003a70:	f00a fc0a 	bl	800e288 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8003a74:	8a7b      	ldrh	r3, [r7, #18]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7ff fd00 	bl	800347c <ptr_to_mem>
 8003a7c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	881a      	ldrh	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8bfa      	ldrh	r2, [r7, #30]
 8003a90:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	8a7a      	ldrh	r2, [r7, #18]
 8003a96:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	881b      	ldrh	r3, [r3, #0]
 8003aa2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003aa6:	d00b      	beq.n	8003ac0 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	881b      	ldrh	r3, [r3, #0]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff fce5 	bl	800347c <ptr_to_mem>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	8a7b      	ldrh	r3, [r7, #18]
 8003ab6:	8053      	strh	r3, [r2, #2]
 8003ab8:	e002      	b.n	8003ac0 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	2201      	movs	r2, #1
 8003abe:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8003ac0:	4b34      	ldr	r3, [pc, #208]	; (8003b94 <mem_malloc+0x1d0>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d127      	bne.n	8003b1a <mem_malloc+0x156>
          struct mem *cur = lfree;
 8003aca:	4b32      	ldr	r3, [pc, #200]	; (8003b94 <mem_malloc+0x1d0>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8003ad0:	e005      	b.n	8003ade <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	881b      	ldrh	r3, [r3, #0]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7ff fcd0 	bl	800347c <ptr_to_mem>
 8003adc:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	791b      	ldrb	r3, [r3, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d004      	beq.n	8003af0 <mem_malloc+0x12c>
 8003ae6:	4b2f      	ldr	r3, [pc, #188]	; (8003ba4 <mem_malloc+0x1e0>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d1f0      	bne.n	8003ad2 <mem_malloc+0x10e>
          }
          lfree = cur;
 8003af0:	4a28      	ldr	r2, [pc, #160]	; (8003b94 <mem_malloc+0x1d0>)
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8003af6:	4b27      	ldr	r3, [pc, #156]	; (8003b94 <mem_malloc+0x1d0>)
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	4b2a      	ldr	r3, [pc, #168]	; (8003ba4 <mem_malloc+0x1e0>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d00b      	beq.n	8003b1a <mem_malloc+0x156>
 8003b02:	4b24      	ldr	r3, [pc, #144]	; (8003b94 <mem_malloc+0x1d0>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	791b      	ldrb	r3, [r3, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d006      	beq.n	8003b1a <mem_malloc+0x156>
 8003b0c:	4b22      	ldr	r3, [pc, #136]	; (8003b98 <mem_malloc+0x1d4>)
 8003b0e:	f240 32b5 	movw	r2, #949	; 0x3b5
 8003b12:	4925      	ldr	r1, [pc, #148]	; (8003ba8 <mem_malloc+0x1e4>)
 8003b14:	4822      	ldr	r0, [pc, #136]	; (8003ba0 <mem_malloc+0x1dc>)
 8003b16:	f00a fbb7 	bl	800e288 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8003b1a:	8bba      	ldrh	r2, [r7, #28]
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	4413      	add	r3, r2
 8003b20:	3308      	adds	r3, #8
 8003b22:	4a20      	ldr	r2, [pc, #128]	; (8003ba4 <mem_malloc+0x1e0>)
 8003b24:	6812      	ldr	r2, [r2, #0]
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d906      	bls.n	8003b38 <mem_malloc+0x174>
 8003b2a:	4b1b      	ldr	r3, [pc, #108]	; (8003b98 <mem_malloc+0x1d4>)
 8003b2c:	f240 32ba 	movw	r2, #954	; 0x3ba
 8003b30:	491e      	ldr	r1, [pc, #120]	; (8003bac <mem_malloc+0x1e8>)
 8003b32:	481b      	ldr	r0, [pc, #108]	; (8003ba0 <mem_malloc+0x1dc>)
 8003b34:	f00a fba8 	bl	800e288 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d006      	beq.n	8003b50 <mem_malloc+0x18c>
 8003b42:	4b15      	ldr	r3, [pc, #84]	; (8003b98 <mem_malloc+0x1d4>)
 8003b44:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8003b48:	4919      	ldr	r1, [pc, #100]	; (8003bb0 <mem_malloc+0x1ec>)
 8003b4a:	4815      	ldr	r0, [pc, #84]	; (8003ba0 <mem_malloc+0x1dc>)
 8003b4c:	f00a fb9c 	bl	800e288 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f003 0303 	and.w	r3, r3, #3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d006      	beq.n	8003b68 <mem_malloc+0x1a4>
 8003b5a:	4b0f      	ldr	r3, [pc, #60]	; (8003b98 <mem_malloc+0x1d4>)
 8003b5c:	f240 32be 	movw	r2, #958	; 0x3be
 8003b60:	4914      	ldr	r1, [pc, #80]	; (8003bb4 <mem_malloc+0x1f0>)
 8003b62:	480f      	ldr	r0, [pc, #60]	; (8003ba0 <mem_malloc+0x1dc>)
 8003b64:	f00a fb90 	bl	800e288 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	3308      	adds	r3, #8
 8003b6c:	e00e      	b.n	8003b8c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8003b6e:	8bfb      	ldrh	r3, [r7, #30]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff fc83 	bl	800347c <ptr_to_mem>
 8003b76:	4603      	mov	r3, r0
 8003b78:	881b      	ldrh	r3, [r3, #0]
 8003b7a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8003b7c:	8bfa      	ldrh	r2, [r7, #30]
 8003b7e:	8bbb      	ldrh	r3, [r7, #28]
 8003b80:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8003b84:	429a      	cmp	r2, r3
 8003b86:	f4ff af44 	bcc.w	8003a12 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3720      	adds	r7, #32
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	200000a4 	.word	0x200000a4
 8003b98:	0800f194 	.word	0x0800f194
 8003b9c:	0800f33c 	.word	0x0800f33c
 8003ba0:	0800f1dc 	.word	0x0800f1dc
 8003ba4:	200000a0 	.word	0x200000a0
 8003ba8:	0800f350 	.word	0x0800f350
 8003bac:	0800f36c 	.word	0x0800f36c
 8003bb0:	0800f39c 	.word	0x0800f39c
 8003bb4:	0800f3cc 	.word	0x0800f3cc

08003bb8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	3303      	adds	r3, #3
 8003bce:	f023 0303 	bic.w	r3, r3, #3
 8003bd2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	e011      	b.n	8003bfe <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	68ba      	ldr	r2, [r7, #8]
 8003bea:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	881b      	ldrh	r3, [r3, #0]
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	60fb      	str	r3, [r7, #12]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	885b      	ldrh	r3, [r3, #2]
 8003c02:	461a      	mov	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4293      	cmp	r3, r2
 8003c08:	dbe7      	blt.n	8003bda <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8003c0a:	bf00      	nop
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
	...

08003c18 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8003c1e:	2300      	movs	r3, #0
 8003c20:	80fb      	strh	r3, [r7, #6]
 8003c22:	e009      	b.n	8003c38 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8003c24:	88fb      	ldrh	r3, [r7, #6]
 8003c26:	4a08      	ldr	r2, [pc, #32]	; (8003c48 <memp_init+0x30>)
 8003c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7ff ffc3 	bl	8003bb8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8003c32:	88fb      	ldrh	r3, [r7, #6]
 8003c34:	3301      	adds	r3, #1
 8003c36:	80fb      	strh	r3, [r7, #6]
 8003c38:	88fb      	ldrh	r3, [r7, #6]
 8003c3a:	2b08      	cmp	r3, #8
 8003c3c:	d9f2      	bls.n	8003c24 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8003c3e:	bf00      	nop
 8003c40:	3708      	adds	r7, #8
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	08011b9c 	.word	0x08011b9c

08003c4c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d012      	beq.n	8003c88 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	6812      	ldr	r2, [r2, #0]
 8003c6a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f003 0303 	and.w	r3, r3, #3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d006      	beq.n	8003c84 <do_memp_malloc_pool+0x38>
 8003c76:	4b07      	ldr	r3, [pc, #28]	; (8003c94 <do_memp_malloc_pool+0x48>)
 8003c78:	f240 1219 	movw	r2, #281	; 0x119
 8003c7c:	4906      	ldr	r1, [pc, #24]	; (8003c98 <do_memp_malloc_pool+0x4c>)
 8003c7e:	4807      	ldr	r0, [pc, #28]	; (8003c9c <do_memp_malloc_pool+0x50>)
 8003c80:	f00a fb02 	bl	800e288 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	e000      	b.n	8003c8a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	0800f3f0 	.word	0x0800f3f0
 8003c98:	0800f420 	.word	0x0800f420
 8003c9c:	0800f444 	.word	0x0800f444

08003ca0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8003caa:	79fb      	ldrb	r3, [r7, #7]
 8003cac:	2b08      	cmp	r3, #8
 8003cae:	d908      	bls.n	8003cc2 <memp_malloc+0x22>
 8003cb0:	4b0a      	ldr	r3, [pc, #40]	; (8003cdc <memp_malloc+0x3c>)
 8003cb2:	f240 1257 	movw	r2, #343	; 0x157
 8003cb6:	490a      	ldr	r1, [pc, #40]	; (8003ce0 <memp_malloc+0x40>)
 8003cb8:	480a      	ldr	r0, [pc, #40]	; (8003ce4 <memp_malloc+0x44>)
 8003cba:	f00a fae5 	bl	800e288 <iprintf>
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	e008      	b.n	8003cd4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8003cc2:	79fb      	ldrb	r3, [r7, #7]
 8003cc4:	4a08      	ldr	r2, [pc, #32]	; (8003ce8 <memp_malloc+0x48>)
 8003cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7ff ffbe 	bl	8003c4c <do_memp_malloc_pool>
 8003cd0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	0800f3f0 	.word	0x0800f3f0
 8003ce0:	0800f480 	.word	0x0800f480
 8003ce4:	0800f444 	.word	0x0800f444
 8003ce8:	08011b9c 	.word	0x08011b9c

08003cec <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	f003 0303 	and.w	r3, r3, #3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d006      	beq.n	8003d0e <do_memp_free_pool+0x22>
 8003d00:	4b0a      	ldr	r3, [pc, #40]	; (8003d2c <do_memp_free_pool+0x40>)
 8003d02:	f240 126d 	movw	r2, #365	; 0x16d
 8003d06:	490a      	ldr	r1, [pc, #40]	; (8003d30 <do_memp_free_pool+0x44>)
 8003d08:	480a      	ldr	r0, [pc, #40]	; (8003d34 <do_memp_free_pool+0x48>)
 8003d0a:	f00a fabd 	bl	800e288 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8003d24:	bf00      	nop
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	0800f3f0 	.word	0x0800f3f0
 8003d30:	0800f4a0 	.word	0x0800f4a0
 8003d34:	0800f444 	.word	0x0800f444

08003d38 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	4603      	mov	r3, r0
 8003d40:	6039      	str	r1, [r7, #0]
 8003d42:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8003d44:	79fb      	ldrb	r3, [r7, #7]
 8003d46:	2b08      	cmp	r3, #8
 8003d48:	d907      	bls.n	8003d5a <memp_free+0x22>
 8003d4a:	4b0c      	ldr	r3, [pc, #48]	; (8003d7c <memp_free+0x44>)
 8003d4c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8003d50:	490b      	ldr	r1, [pc, #44]	; (8003d80 <memp_free+0x48>)
 8003d52:	480c      	ldr	r0, [pc, #48]	; (8003d84 <memp_free+0x4c>)
 8003d54:	f00a fa98 	bl	800e288 <iprintf>
 8003d58:	e00c      	b.n	8003d74 <memp_free+0x3c>

  if (mem == NULL) {
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d008      	beq.n	8003d72 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8003d60:	79fb      	ldrb	r3, [r7, #7]
 8003d62:	4a09      	ldr	r2, [pc, #36]	; (8003d88 <memp_free+0x50>)
 8003d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d68:	6839      	ldr	r1, [r7, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7ff ffbe 	bl	8003cec <do_memp_free_pool>
 8003d70:	e000      	b.n	8003d74 <memp_free+0x3c>
    return;
 8003d72:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	0800f3f0 	.word	0x0800f3f0
 8003d80:	0800f4c0 	.word	0x0800f4c0
 8003d84:	0800f444 	.word	0x0800f444
 8003d88:	08011b9c 	.word	0x08011b9c

08003d8c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8003d90:	bf00      	nop
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
	...

08003d9c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
 8003da8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d108      	bne.n	8003dc2 <netif_add+0x26>
 8003db0:	4b56      	ldr	r3, [pc, #344]	; (8003f0c <netif_add+0x170>)
 8003db2:	f240 1227 	movw	r2, #295	; 0x127
 8003db6:	4956      	ldr	r1, [pc, #344]	; (8003f10 <netif_add+0x174>)
 8003db8:	4856      	ldr	r0, [pc, #344]	; (8003f14 <netif_add+0x178>)
 8003dba:	f00a fa65 	bl	800e288 <iprintf>
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	e09f      	b.n	8003f02 <netif_add+0x166>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d108      	bne.n	8003dda <netif_add+0x3e>
 8003dc8:	4b50      	ldr	r3, [pc, #320]	; (8003f0c <netif_add+0x170>)
 8003dca:	f44f 7294 	mov.w	r2, #296	; 0x128
 8003dce:	4952      	ldr	r1, [pc, #328]	; (8003f18 <netif_add+0x17c>)
 8003dd0:	4850      	ldr	r0, [pc, #320]	; (8003f14 <netif_add+0x178>)
 8003dd2:	f00a fa59 	bl	800e288 <iprintf>
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	e093      	b.n	8003f02 <netif_add+0x166>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8003de0:	4b4e      	ldr	r3, [pc, #312]	; (8003f1c <netif_add+0x180>)
 8003de2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8003dea:	4b4c      	ldr	r3, [pc, #304]	; (8003f1c <netif_add+0x180>)
 8003dec:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8003df4:	4b49      	ldr	r3, [pc, #292]	; (8003f1c <netif_add+0x180>)
 8003df6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	4a44      	ldr	r2, [pc, #272]	; (8003f20 <netif_add+0x184>)
 8003e0e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	841a      	strh	r2, [r3, #32]
  netif->flags = 0;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a3a      	ldr	r2, [r7, #32]
 8003e22:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 8003e24:	4b3f      	ldr	r3, [pc, #252]	; (8003f24 <netif_add+0x188>)
 8003e26:	781a      	ldrb	r2, [r3, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->input = input;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e32:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	68b9      	ldr	r1, [r7, #8]
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f000 f914 	bl	8004068 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	4798      	blx	r3
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <netif_add+0xb4>
    return NULL;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	e058      	b.n	8003f02 <netif_add+0x166>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003e56:	2bff      	cmp	r3, #255	; 0xff
 8003e58:	d103      	bne.n	8003e62 <netif_add+0xc6>
        netif->num = 0;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      }
      num_netifs = 0;
 8003e62:	2300      	movs	r3, #0
 8003e64:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8003e66:	4b30      	ldr	r3, [pc, #192]	; (8003f28 <netif_add+0x18c>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	617b      	str	r3, [r7, #20]
 8003e6c:	e02b      	b.n	8003ec6 <netif_add+0x12a>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d106      	bne.n	8003e84 <netif_add+0xe8>
 8003e76:	4b25      	ldr	r3, [pc, #148]	; (8003f0c <netif_add+0x170>)
 8003e78:	f240 128b 	movw	r2, #395	; 0x18b
 8003e7c:	492b      	ldr	r1, [pc, #172]	; (8003f2c <netif_add+0x190>)
 8003e7e:	4825      	ldr	r0, [pc, #148]	; (8003f14 <netif_add+0x178>)
 8003e80:	f00a fa02 	bl	800e288 <iprintf>
        num_netifs++;
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	3301      	adds	r3, #1
 8003e88:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	2bff      	cmp	r3, #255	; 0xff
 8003e8e:	dd06      	ble.n	8003e9e <netif_add+0x102>
 8003e90:	4b1e      	ldr	r3, [pc, #120]	; (8003f0c <netif_add+0x170>)
 8003e92:	f240 128d 	movw	r2, #397	; 0x18d
 8003e96:	4926      	ldr	r1, [pc, #152]	; (8003f30 <netif_add+0x194>)
 8003e98:	481e      	ldr	r0, [pc, #120]	; (8003f14 <netif_add+0x178>)
 8003e9a:	f00a f9f5 	bl	800e288 <iprintf>
        if (netif2->num == netif->num) {
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d108      	bne.n	8003ec0 <netif_add+0x124>
          netif->num++;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
          break;
 8003ebe:	e005      	b.n	8003ecc <netif_add+0x130>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	617b      	str	r3, [r7, #20]
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1d0      	bne.n	8003e6e <netif_add+0xd2>
        }
      }
    } while (netif2 != NULL);
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1be      	bne.n	8003e50 <netif_add+0xb4>
  }
  if (netif->num == 254) {
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003ed8:	2bfe      	cmp	r3, #254	; 0xfe
 8003eda:	d103      	bne.n	8003ee4 <netif_add+0x148>
    netif_num = 0;
 8003edc:	4b11      	ldr	r3, [pc, #68]	; (8003f24 <netif_add+0x188>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	701a      	strb	r2, [r3, #0]
 8003ee2:	e006      	b.n	8003ef2 <netif_add+0x156>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003eea:	3301      	adds	r3, #1
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	4b0d      	ldr	r3, [pc, #52]	; (8003f24 <netif_add+0x188>)
 8003ef0:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8003ef2:	4b0d      	ldr	r3, [pc, #52]	; (8003f28 <netif_add+0x18c>)
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8003efa:	4a0b      	ldr	r2, [pc, #44]	; (8003f28 <netif_add+0x18c>)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8003f00:	68fb      	ldr	r3, [r7, #12]
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3718      	adds	r7, #24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	0800f4dc 	.word	0x0800f4dc
 8003f10:	0800f570 	.word	0x0800f570
 8003f14:	0800f52c 	.word	0x0800f52c
 8003f18:	0800f58c 	.word	0x0800f58c
 8003f1c:	08011c00 	.word	0x08011c00
 8003f20:	08004259 	.word	0x08004259
 8003f24:	200000cc 	.word	0x200000cc
 8003f28:	2000687c 	.word	0x2000687c
 8003f2c:	0800f5b0 	.word	0x0800f5b0
 8003f30:	0800f5c4 	.word	0x0800f5c4

08003f34 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8003f3e:	6839      	ldr	r1, [r7, #0]
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f002 fd6d 	bl	8006a20 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8003f46:	6839      	ldr	r1, [r7, #0]
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f007 fe6d 	bl	800bc28 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8003f4e:	bf00      	nop
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
	...

08003f58 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d106      	bne.n	8003f78 <netif_do_set_ipaddr+0x20>
 8003f6a:	4b1d      	ldr	r3, [pc, #116]	; (8003fe0 <netif_do_set_ipaddr+0x88>)
 8003f6c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8003f70:	491c      	ldr	r1, [pc, #112]	; (8003fe4 <netif_do_set_ipaddr+0x8c>)
 8003f72:	481d      	ldr	r0, [pc, #116]	; (8003fe8 <netif_do_set_ipaddr+0x90>)
 8003f74:	f00a f988 	bl	800e288 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d106      	bne.n	8003f8c <netif_do_set_ipaddr+0x34>
 8003f7e:	4b18      	ldr	r3, [pc, #96]	; (8003fe0 <netif_do_set_ipaddr+0x88>)
 8003f80:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8003f84:	4917      	ldr	r1, [pc, #92]	; (8003fe4 <netif_do_set_ipaddr+0x8c>)
 8003f86:	4818      	ldr	r0, [pc, #96]	; (8003fe8 <netif_do_set_ipaddr+0x90>)
 8003f88:	f00a f97e 	bl	800e288 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	3304      	adds	r3, #4
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d01c      	beq.n	8003fd4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	3304      	adds	r3, #4
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8003faa:	f107 0314 	add.w	r3, r7, #20
 8003fae:	4619      	mov	r1, r3
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f7ff ffbf 	bl	8003f34 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d002      	beq.n	8003fc2 <netif_do_set_ipaddr+0x6a>
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	e000      	b.n	8003fc4 <netif_do_set_ipaddr+0x6c>
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8003fc8:	2101      	movs	r1, #1
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f000 f8d2 	bl	8004174 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e000      	b.n	8003fd6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3718      	adds	r7, #24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	0800f4dc 	.word	0x0800f4dc
 8003fe4:	0800f5f4 	.word	0x0800f5f4
 8003fe8:	0800f52c 	.word	0x0800f52c

08003fec <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	3308      	adds	r3, #8
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	429a      	cmp	r2, r3
 8004004:	d00a      	beq.n	800401c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d002      	beq.n	8004012 <netif_do_set_netmask+0x26>
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	e000      	b.n	8004014 <netif_do_set_netmask+0x28>
 8004012:	2300      	movs	r3, #0
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8004018:	2301      	movs	r3, #1
 800401a:	e000      	b.n	800401e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr

0800402a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800402a:	b480      	push	{r7}
 800402c:	b085      	sub	sp, #20
 800402e:	af00      	add	r7, sp, #0
 8004030:	60f8      	str	r0, [r7, #12]
 8004032:	60b9      	str	r1, [r7, #8]
 8004034:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	330c      	adds	r3, #12
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	429a      	cmp	r2, r3
 8004042:	d00a      	beq.n	800405a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <netif_do_set_gw+0x26>
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	e000      	b.n	8004052 <netif_do_set_gw+0x28>
 8004050:	2300      	movs	r3, #0
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8004056:	2301      	movs	r3, #1
 8004058:	e000      	b.n	800405c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3714      	adds	r7, #20
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b088      	sub	sp, #32
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
 8004074:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8004076:	2300      	movs	r3, #0
 8004078:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800407a:	2300      	movs	r3, #0
 800407c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8004084:	4b1c      	ldr	r3, [pc, #112]	; (80040f8 <netif_set_addr+0x90>)
 8004086:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800408e:	4b1a      	ldr	r3, [pc, #104]	; (80040f8 <netif_set_addr+0x90>)
 8004090:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8004098:	4b17      	ldr	r3, [pc, #92]	; (80040f8 <netif_set_addr+0x90>)
 800409a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <netif_set_addr+0x42>
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <netif_set_addr+0x46>
 80040aa:	2301      	movs	r3, #1
 80040ac:	e000      	b.n	80040b0 <netif_set_addr+0x48>
 80040ae:	2300      	movs	r3, #0
 80040b0:	617b      	str	r3, [r7, #20]
  if (remove) {
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d006      	beq.n	80040c6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80040b8:	f107 0310 	add.w	r3, r7, #16
 80040bc:	461a      	mov	r2, r3
 80040be:	68b9      	ldr	r1, [r7, #8]
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f7ff ff49 	bl	8003f58 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80040c6:	69fa      	ldr	r2, [r7, #28]
 80040c8:	6879      	ldr	r1, [r7, #4]
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f7ff ff8e 	bl	8003fec <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	6839      	ldr	r1, [r7, #0]
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f7ff ffa8 	bl	800402a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d106      	bne.n	80040ee <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80040e0:	f107 0310 	add.w	r3, r7, #16
 80040e4:	461a      	mov	r2, r3
 80040e6:	68b9      	ldr	r1, [r7, #8]
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f7ff ff35 	bl	8003f58 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80040ee:	bf00      	nop
 80040f0:	3720      	adds	r7, #32
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	08011c00 	.word	0x08011c00

080040fc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8004104:	4a04      	ldr	r2, [pc, #16]	; (8004118 <netif_set_default+0x1c>)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800410a:	bf00      	nop
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	20006880 	.word	0x20006880

0800411c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d107      	bne.n	800413a <netif_set_up+0x1e>
 800412a:	4b0f      	ldr	r3, [pc, #60]	; (8004168 <netif_set_up+0x4c>)
 800412c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8004130:	490e      	ldr	r1, [pc, #56]	; (800416c <netif_set_up+0x50>)
 8004132:	480f      	ldr	r0, [pc, #60]	; (8004170 <netif_set_up+0x54>)
 8004134:	f00a f8a8 	bl	800e288 <iprintf>
 8004138:	e013      	b.n	8004162 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b00      	cmp	r3, #0
 8004146:	d10c      	bne.n	8004162 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800414e:	f043 0301 	orr.w	r3, r3, #1
 8004152:	b2da      	uxtb	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800415a:	2103      	movs	r1, #3
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f809 	bl	8004174 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8004162:	3708      	adds	r7, #8
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	0800f4dc 	.word	0x0800f4dc
 800416c:	0800f664 	.word	0x0800f664
 8004170:	0800f52c 	.word	0x0800f52c

08004174 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	460b      	mov	r3, r1
 800417e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d106      	bne.n	8004194 <netif_issue_reports+0x20>
 8004186:	4b18      	ldr	r3, [pc, #96]	; (80041e8 <netif_issue_reports+0x74>)
 8004188:	f240 326d 	movw	r2, #877	; 0x36d
 800418c:	4917      	ldr	r1, [pc, #92]	; (80041ec <netif_issue_reports+0x78>)
 800418e:	4818      	ldr	r0, [pc, #96]	; (80041f0 <netif_issue_reports+0x7c>)
 8004190:	f00a f87a 	bl	800e288 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800419a:	f003 0304 	and.w	r3, r3, #4
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d01e      	beq.n	80041e0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80041a8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d017      	beq.n	80041e0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80041b0:	78fb      	ldrb	r3, [r7, #3]
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d013      	beq.n	80041e2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	3304      	adds	r3, #4
 80041be:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00e      	beq.n	80041e2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80041ca:	f003 0308 	and.w	r3, r3, #8
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d007      	beq.n	80041e2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	3304      	adds	r3, #4
 80041d6:	4619      	mov	r1, r3
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f008 fc8f 	bl	800cafc <etharp_request>
 80041de:	e000      	b.n	80041e2 <netif_issue_reports+0x6e>
    return;
 80041e0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80041e2:	3708      	adds	r7, #8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	0800f4dc 	.word	0x0800f4dc
 80041ec:	0800f680 	.word	0x0800f680
 80041f0:	0800f52c 	.word	0x0800f52c

080041f4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d107      	bne.n	8004212 <netif_set_down+0x1e>
 8004202:	4b12      	ldr	r3, [pc, #72]	; (800424c <netif_set_down+0x58>)
 8004204:	f240 329b 	movw	r2, #923	; 0x39b
 8004208:	4911      	ldr	r1, [pc, #68]	; (8004250 <netif_set_down+0x5c>)
 800420a:	4812      	ldr	r0, [pc, #72]	; (8004254 <netif_set_down+0x60>)
 800420c:	f00a f83c 	bl	800e288 <iprintf>
 8004210:	e019      	b.n	8004246 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b00      	cmp	r3, #0
 800421e:	d012      	beq.n	8004246 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004226:	f023 0301 	bic.w	r3, r3, #1
 800422a:	b2da      	uxtb	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004238:	f003 0308 	and.w	r3, r3, #8
 800423c:	2b00      	cmp	r3, #0
 800423e:	d002      	beq.n	8004246 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f008 f819 	bl	800c278 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8004246:	3708      	adds	r7, #8
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	0800f4dc 	.word	0x0800f4dc
 8004250:	0800f6a4 	.word	0x0800f6a4
 8004254:	0800f52c 	.word	0x0800f52c

08004258 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8004264:	f06f 030b 	mvn.w	r3, #11
}
 8004268:	4618      	mov	r0, r3
 800426a:	3714      	adds	r7, #20
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	4603      	mov	r3, r0
 800427c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800427e:	79fb      	ldrb	r3, [r7, #7]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d013      	beq.n	80042ac <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8004284:	4b0d      	ldr	r3, [pc, #52]	; (80042bc <netif_get_by_index+0x48>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	60fb      	str	r3, [r7, #12]
 800428a:	e00c      	b.n	80042a6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004292:	3301      	adds	r3, #1
 8004294:	b2db      	uxtb	r3, r3
 8004296:	79fa      	ldrb	r2, [r7, #7]
 8004298:	429a      	cmp	r2, r3
 800429a:	d101      	bne.n	80042a0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	e006      	b.n	80042ae <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	60fb      	str	r3, [r7, #12]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1ef      	bne.n	800428c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3714      	adds	r7, #20
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	2000687c 	.word	0x2000687c

080042c0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80042c6:	4b0c      	ldr	r3, [pc, #48]	; (80042f8 <pbuf_free_ooseq+0x38>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80042cc:	4b0b      	ldr	r3, [pc, #44]	; (80042fc <pbuf_free_ooseq+0x3c>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	607b      	str	r3, [r7, #4]
 80042d2:	e00a      	b.n	80042ea <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f002 fbdd 	bl	8006a9c <tcp_free_ooseq>
      return;
 80042e2:	e005      	b.n	80042f0 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	607b      	str	r3, [r7, #4]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1f1      	bne.n	80042d4 <pbuf_free_ooseq+0x14>
    }
  }
}
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	20006884 	.word	0x20006884
 80042fc:	2000688c 	.word	0x2000688c

08004300 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8004300:	b480      	push	{r7}
 8004302:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8004304:	4b03      	ldr	r3, [pc, #12]	; (8004314 <pbuf_pool_is_empty+0x14>)
 8004306:	2201      	movs	r2, #1
 8004308:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800430a:	bf00      	nop
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	20006884 	.word	0x20006884

08004318 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	4611      	mov	r1, r2
 8004324:	461a      	mov	r2, r3
 8004326:	460b      	mov	r3, r1
 8004328:	80fb      	strh	r3, [r7, #6]
 800432a:	4613      	mov	r3, r2
 800432c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	88fa      	ldrh	r2, [r7, #6]
 800433e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	88ba      	ldrh	r2, [r7, #4]
 8004344:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8004346:	8b3b      	ldrh	r3, [r7, #24]
 8004348:	b2da      	uxtb	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	7f3a      	ldrb	r2, [r7, #28]
 8004352:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2201      	movs	r2, #1
 8004358:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	73da      	strb	r2, [r3, #15]
}
 8004360:	bf00      	nop
 8004362:	3714      	adds	r7, #20
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b08c      	sub	sp, #48	; 0x30
 8004370:	af02      	add	r7, sp, #8
 8004372:	4603      	mov	r3, r0
 8004374:	71fb      	strb	r3, [r7, #7]
 8004376:	460b      	mov	r3, r1
 8004378:	80bb      	strh	r3, [r7, #4]
 800437a:	4613      	mov	r3, r2
 800437c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800437e:	79fb      	ldrb	r3, [r7, #7]
 8004380:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8004382:	887b      	ldrh	r3, [r7, #2]
 8004384:	2b41      	cmp	r3, #65	; 0x41
 8004386:	d00b      	beq.n	80043a0 <pbuf_alloc+0x34>
 8004388:	2b41      	cmp	r3, #65	; 0x41
 800438a:	dc02      	bgt.n	8004392 <pbuf_alloc+0x26>
 800438c:	2b01      	cmp	r3, #1
 800438e:	d007      	beq.n	80043a0 <pbuf_alloc+0x34>
 8004390:	e0c2      	b.n	8004518 <pbuf_alloc+0x1ac>
 8004392:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8004396:	d00b      	beq.n	80043b0 <pbuf_alloc+0x44>
 8004398:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800439c:	d070      	beq.n	8004480 <pbuf_alloc+0x114>
 800439e:	e0bb      	b.n	8004518 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80043a0:	887a      	ldrh	r2, [r7, #2]
 80043a2:	88bb      	ldrh	r3, [r7, #4]
 80043a4:	4619      	mov	r1, r3
 80043a6:	2000      	movs	r0, #0
 80043a8:	f000 f8d2 	bl	8004550 <pbuf_alloc_reference>
 80043ac:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80043ae:	e0bd      	b.n	800452c <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80043b0:	2300      	movs	r3, #0
 80043b2:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80043b4:	2300      	movs	r3, #0
 80043b6:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80043b8:	88bb      	ldrh	r3, [r7, #4]
 80043ba:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80043bc:	2008      	movs	r0, #8
 80043be:	f7ff fc6f 	bl	8003ca0 <memp_malloc>
 80043c2:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d109      	bne.n	80043de <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 80043ca:	f7ff ff99 	bl	8004300 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80043ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d002      	beq.n	80043da <pbuf_alloc+0x6e>
            pbuf_free(p);
 80043d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80043d6:	f000 faa9 	bl	800492c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80043da:	2300      	movs	r3, #0
 80043dc:	e0a7      	b.n	800452e <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80043de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80043e0:	3303      	adds	r3, #3
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	f023 0303 	bic.w	r3, r3, #3
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	8b7a      	ldrh	r2, [r7, #26]
 80043f2:	4293      	cmp	r3, r2
 80043f4:	bf28      	it	cs
 80043f6:	4613      	movcs	r3, r2
 80043f8:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80043fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80043fc:	3310      	adds	r3, #16
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	4413      	add	r3, r2
 8004402:	3303      	adds	r3, #3
 8004404:	f023 0303 	bic.w	r3, r3, #3
 8004408:	4618      	mov	r0, r3
 800440a:	89f9      	ldrh	r1, [r7, #14]
 800440c:	8b7a      	ldrh	r2, [r7, #26]
 800440e:	2300      	movs	r3, #0
 8004410:	9301      	str	r3, [sp, #4]
 8004412:	887b      	ldrh	r3, [r7, #2]
 8004414:	9300      	str	r3, [sp, #0]
 8004416:	460b      	mov	r3, r1
 8004418:	4601      	mov	r1, r0
 800441a:	6938      	ldr	r0, [r7, #16]
 800441c:	f7ff ff7c 	bl	8004318 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f003 0303 	and.w	r3, r3, #3
 8004428:	2b00      	cmp	r3, #0
 800442a:	d006      	beq.n	800443a <pbuf_alloc+0xce>
 800442c:	4b42      	ldr	r3, [pc, #264]	; (8004538 <pbuf_alloc+0x1cc>)
 800442e:	f240 1201 	movw	r2, #257	; 0x101
 8004432:	4942      	ldr	r1, [pc, #264]	; (800453c <pbuf_alloc+0x1d0>)
 8004434:	4842      	ldr	r0, [pc, #264]	; (8004540 <pbuf_alloc+0x1d4>)
 8004436:	f009 ff27 	bl	800e288 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800443a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800443c:	3303      	adds	r3, #3
 800443e:	f023 0303 	bic.w	r3, r3, #3
 8004442:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8004446:	d106      	bne.n	8004456 <pbuf_alloc+0xea>
 8004448:	4b3b      	ldr	r3, [pc, #236]	; (8004538 <pbuf_alloc+0x1cc>)
 800444a:	f240 1203 	movw	r2, #259	; 0x103
 800444e:	493d      	ldr	r1, [pc, #244]	; (8004544 <pbuf_alloc+0x1d8>)
 8004450:	483b      	ldr	r0, [pc, #236]	; (8004540 <pbuf_alloc+0x1d4>)
 8004452:	f009 ff19 	bl	800e288 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8004456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004458:	2b00      	cmp	r3, #0
 800445a:	d102      	bne.n	8004462 <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	627b      	str	r3, [r7, #36]	; 0x24
 8004460:	e002      	b.n	8004468 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800446c:	8b7a      	ldrh	r2, [r7, #26]
 800446e:	89fb      	ldrh	r3, [r7, #14]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8004474:	2300      	movs	r3, #0
 8004476:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8004478:	8b7b      	ldrh	r3, [r7, #26]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d19e      	bne.n	80043bc <pbuf_alloc+0x50>
      break;
 800447e:	e055      	b.n	800452c <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8004480:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004482:	3303      	adds	r3, #3
 8004484:	b29b      	uxth	r3, r3
 8004486:	f023 0303 	bic.w	r3, r3, #3
 800448a:	b29a      	uxth	r2, r3
 800448c:	88bb      	ldrh	r3, [r7, #4]
 800448e:	3303      	adds	r3, #3
 8004490:	b29b      	uxth	r3, r3
 8004492:	f023 0303 	bic.w	r3, r3, #3
 8004496:	b29b      	uxth	r3, r3
 8004498:	4413      	add	r3, r2
 800449a:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800449c:	8b3b      	ldrh	r3, [r7, #24]
 800449e:	3310      	adds	r3, #16
 80044a0:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80044a2:	8b3a      	ldrh	r2, [r7, #24]
 80044a4:	88bb      	ldrh	r3, [r7, #4]
 80044a6:	3303      	adds	r3, #3
 80044a8:	f023 0303 	bic.w	r3, r3, #3
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d306      	bcc.n	80044be <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80044b0:	8afa      	ldrh	r2, [r7, #22]
 80044b2:	88bb      	ldrh	r3, [r7, #4]
 80044b4:	3303      	adds	r3, #3
 80044b6:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d201      	bcs.n	80044c2 <pbuf_alloc+0x156>
        return NULL;
 80044be:	2300      	movs	r3, #0
 80044c0:	e035      	b.n	800452e <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80044c2:	8afb      	ldrh	r3, [r7, #22]
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7ff fa7d 	bl	80039c4 <mem_malloc>
 80044ca:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80044cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <pbuf_alloc+0x16a>
        return NULL;
 80044d2:	2300      	movs	r3, #0
 80044d4:	e02b      	b.n	800452e <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80044d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80044d8:	3310      	adds	r3, #16
 80044da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044dc:	4413      	add	r3, r2
 80044de:	3303      	adds	r3, #3
 80044e0:	f023 0303 	bic.w	r3, r3, #3
 80044e4:	4618      	mov	r0, r3
 80044e6:	88b9      	ldrh	r1, [r7, #4]
 80044e8:	88ba      	ldrh	r2, [r7, #4]
 80044ea:	2300      	movs	r3, #0
 80044ec:	9301      	str	r3, [sp, #4]
 80044ee:	887b      	ldrh	r3, [r7, #2]
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	460b      	mov	r3, r1
 80044f4:	4601      	mov	r1, r0
 80044f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80044f8:	f7ff ff0e 	bl	8004318 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80044fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f003 0303 	and.w	r3, r3, #3
 8004504:	2b00      	cmp	r3, #0
 8004506:	d010      	beq.n	800452a <pbuf_alloc+0x1be>
 8004508:	4b0b      	ldr	r3, [pc, #44]	; (8004538 <pbuf_alloc+0x1cc>)
 800450a:	f240 1223 	movw	r2, #291	; 0x123
 800450e:	490e      	ldr	r1, [pc, #56]	; (8004548 <pbuf_alloc+0x1dc>)
 8004510:	480b      	ldr	r0, [pc, #44]	; (8004540 <pbuf_alloc+0x1d4>)
 8004512:	f009 feb9 	bl	800e288 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8004516:	e008      	b.n	800452a <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8004518:	4b07      	ldr	r3, [pc, #28]	; (8004538 <pbuf_alloc+0x1cc>)
 800451a:	f240 1227 	movw	r2, #295	; 0x127
 800451e:	490b      	ldr	r1, [pc, #44]	; (800454c <pbuf_alloc+0x1e0>)
 8004520:	4807      	ldr	r0, [pc, #28]	; (8004540 <pbuf_alloc+0x1d4>)
 8004522:	f009 feb1 	bl	800e288 <iprintf>
      return NULL;
 8004526:	2300      	movs	r3, #0
 8004528:	e001      	b.n	800452e <pbuf_alloc+0x1c2>
      break;
 800452a:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800452e:	4618      	mov	r0, r3
 8004530:	3728      	adds	r7, #40	; 0x28
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	0800f70c 	.word	0x0800f70c
 800453c:	0800f73c 	.word	0x0800f73c
 8004540:	0800f76c 	.word	0x0800f76c
 8004544:	0800f794 	.word	0x0800f794
 8004548:	0800f7c8 	.word	0x0800f7c8
 800454c:	0800f7f4 	.word	0x0800f7f4

08004550 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af02      	add	r7, sp, #8
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	460b      	mov	r3, r1
 800455a:	807b      	strh	r3, [r7, #2]
 800455c:	4613      	mov	r3, r2
 800455e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8004560:	883b      	ldrh	r3, [r7, #0]
 8004562:	2b41      	cmp	r3, #65	; 0x41
 8004564:	d009      	beq.n	800457a <pbuf_alloc_reference+0x2a>
 8004566:	883b      	ldrh	r3, [r7, #0]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d006      	beq.n	800457a <pbuf_alloc_reference+0x2a>
 800456c:	4b0f      	ldr	r3, [pc, #60]	; (80045ac <pbuf_alloc_reference+0x5c>)
 800456e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8004572:	490f      	ldr	r1, [pc, #60]	; (80045b0 <pbuf_alloc_reference+0x60>)
 8004574:	480f      	ldr	r0, [pc, #60]	; (80045b4 <pbuf_alloc_reference+0x64>)
 8004576:	f009 fe87 	bl	800e288 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800457a:	2007      	movs	r0, #7
 800457c:	f7ff fb90 	bl	8003ca0 <memp_malloc>
 8004580:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d101      	bne.n	800458c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8004588:	2300      	movs	r3, #0
 800458a:	e00b      	b.n	80045a4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800458c:	8879      	ldrh	r1, [r7, #2]
 800458e:	887a      	ldrh	r2, [r7, #2]
 8004590:	2300      	movs	r3, #0
 8004592:	9301      	str	r3, [sp, #4]
 8004594:	883b      	ldrh	r3, [r7, #0]
 8004596:	9300      	str	r3, [sp, #0]
 8004598:	460b      	mov	r3, r1
 800459a:	6879      	ldr	r1, [r7, #4]
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f7ff febb 	bl	8004318 <pbuf_init_alloced_pbuf>
  return p;
 80045a2:	68fb      	ldr	r3, [r7, #12]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	0800f70c 	.word	0x0800f70c
 80045b0:	0800f810 	.word	0x0800f810
 80045b4:	0800f76c 	.word	0x0800f76c

080045b8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b088      	sub	sp, #32
 80045bc:	af02      	add	r7, sp, #8
 80045be:	607b      	str	r3, [r7, #4]
 80045c0:	4603      	mov	r3, r0
 80045c2:	73fb      	strb	r3, [r7, #15]
 80045c4:	460b      	mov	r3, r1
 80045c6:	81bb      	strh	r3, [r7, #12]
 80045c8:	4613      	mov	r3, r2
 80045ca:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80045cc:	7bfb      	ldrb	r3, [r7, #15]
 80045ce:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80045d0:	8a7b      	ldrh	r3, [r7, #18]
 80045d2:	3303      	adds	r3, #3
 80045d4:	f023 0203 	bic.w	r2, r3, #3
 80045d8:	89bb      	ldrh	r3, [r7, #12]
 80045da:	441a      	add	r2, r3
 80045dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80045de:	429a      	cmp	r2, r3
 80045e0:	d901      	bls.n	80045e6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80045e2:	2300      	movs	r3, #0
 80045e4:	e018      	b.n	8004618 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80045e6:	6a3b      	ldr	r3, [r7, #32]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d007      	beq.n	80045fc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80045ec:	8a7b      	ldrh	r3, [r7, #18]
 80045ee:	3303      	adds	r3, #3
 80045f0:	f023 0303 	bic.w	r3, r3, #3
 80045f4:	6a3a      	ldr	r2, [r7, #32]
 80045f6:	4413      	add	r3, r2
 80045f8:	617b      	str	r3, [r7, #20]
 80045fa:	e001      	b.n	8004600 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80045fc:	2300      	movs	r3, #0
 80045fe:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	89b9      	ldrh	r1, [r7, #12]
 8004604:	89ba      	ldrh	r2, [r7, #12]
 8004606:	2302      	movs	r3, #2
 8004608:	9301      	str	r3, [sp, #4]
 800460a:	897b      	ldrh	r3, [r7, #10]
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	460b      	mov	r3, r1
 8004610:	6979      	ldr	r1, [r7, #20]
 8004612:	f7ff fe81 	bl	8004318 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8004616:	687b      	ldr	r3, [r7, #4]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3718      	adds	r7, #24
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	460b      	mov	r3, r1
 800462a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d106      	bne.n	8004640 <pbuf_realloc+0x20>
 8004632:	4b3a      	ldr	r3, [pc, #232]	; (800471c <pbuf_realloc+0xfc>)
 8004634:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8004638:	4939      	ldr	r1, [pc, #228]	; (8004720 <pbuf_realloc+0x100>)
 800463a:	483a      	ldr	r0, [pc, #232]	; (8004724 <pbuf_realloc+0x104>)
 800463c:	f009 fe24 	bl	800e288 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	891b      	ldrh	r3, [r3, #8]
 8004644:	887a      	ldrh	r2, [r7, #2]
 8004646:	429a      	cmp	r2, r3
 8004648:	d264      	bcs.n	8004714 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	891a      	ldrh	r2, [r3, #8]
 800464e:	887b      	ldrh	r3, [r7, #2]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8004654:	887b      	ldrh	r3, [r7, #2]
 8004656:	817b      	strh	r3, [r7, #10]
  q = p;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800465c:	e018      	b.n	8004690 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	895b      	ldrh	r3, [r3, #10]
 8004662:	897a      	ldrh	r2, [r7, #10]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	891a      	ldrh	r2, [r3, #8]
 800466c:	893b      	ldrh	r3, [r7, #8]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	b29a      	uxth	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d106      	bne.n	8004690 <pbuf_realloc+0x70>
 8004682:	4b26      	ldr	r3, [pc, #152]	; (800471c <pbuf_realloc+0xfc>)
 8004684:	f240 12af 	movw	r2, #431	; 0x1af
 8004688:	4927      	ldr	r1, [pc, #156]	; (8004728 <pbuf_realloc+0x108>)
 800468a:	4826      	ldr	r0, [pc, #152]	; (8004724 <pbuf_realloc+0x104>)
 800468c:	f009 fdfc 	bl	800e288 <iprintf>
  while (rem_len > q->len) {
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	895b      	ldrh	r3, [r3, #10]
 8004694:	897a      	ldrh	r2, [r7, #10]
 8004696:	429a      	cmp	r2, r3
 8004698:	d8e1      	bhi.n	800465e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	7b1b      	ldrb	r3, [r3, #12]
 800469e:	f003 030f 	and.w	r3, r3, #15
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d122      	bne.n	80046ec <pbuf_realloc+0xcc>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	895b      	ldrh	r3, [r3, #10]
 80046aa:	897a      	ldrh	r2, [r7, #10]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d01d      	beq.n	80046ec <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	7b5b      	ldrb	r3, [r3, #13]
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d117      	bne.n	80046ec <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	461a      	mov	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	897b      	ldrh	r3, [r7, #10]
 80046ca:	4413      	add	r3, r2
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	4619      	mov	r1, r3
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f7ff f87b 	bl	80037cc <mem_trim>
 80046d6:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d106      	bne.n	80046ec <pbuf_realloc+0xcc>
 80046de:	4b0f      	ldr	r3, [pc, #60]	; (800471c <pbuf_realloc+0xfc>)
 80046e0:	f240 12bd 	movw	r2, #445	; 0x1bd
 80046e4:	4911      	ldr	r1, [pc, #68]	; (800472c <pbuf_realloc+0x10c>)
 80046e6:	480f      	ldr	r0, [pc, #60]	; (8004724 <pbuf_realloc+0x104>)
 80046e8:	f009 fdce 	bl	800e288 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	897a      	ldrh	r2, [r7, #10]
 80046f0:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	895a      	ldrh	r2, [r3, #10]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d004      	beq.n	800470c <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4618      	mov	r0, r3
 8004708:	f000 f910 	bl	800492c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	601a      	str	r2, [r3, #0]
 8004712:	e000      	b.n	8004716 <pbuf_realloc+0xf6>
    return;
 8004714:	bf00      	nop

}
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	0800f70c 	.word	0x0800f70c
 8004720:	0800f824 	.word	0x0800f824
 8004724:	0800f76c 	.word	0x0800f76c
 8004728:	0800f83c 	.word	0x0800f83c
 800472c:	0800f854 	.word	0x0800f854

08004730 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	4613      	mov	r3, r2
 800473c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d106      	bne.n	8004752 <pbuf_add_header_impl+0x22>
 8004744:	4b2b      	ldr	r3, [pc, #172]	; (80047f4 <pbuf_add_header_impl+0xc4>)
 8004746:	f240 12df 	movw	r2, #479	; 0x1df
 800474a:	492b      	ldr	r1, [pc, #172]	; (80047f8 <pbuf_add_header_impl+0xc8>)
 800474c:	482b      	ldr	r0, [pc, #172]	; (80047fc <pbuf_add_header_impl+0xcc>)
 800474e:	f009 fd9b 	bl	800e288 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d003      	beq.n	8004760 <pbuf_add_header_impl+0x30>
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800475e:	d301      	bcc.n	8004764 <pbuf_add_header_impl+0x34>
    return 1;
 8004760:	2301      	movs	r3, #1
 8004762:	e043      	b.n	80047ec <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <pbuf_add_header_impl+0x3e>
    return 0;
 800476a:	2300      	movs	r3, #0
 800476c:	e03e      	b.n	80047ec <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	891a      	ldrh	r2, [r3, #8]
 8004776:	8a7b      	ldrh	r3, [r7, #18]
 8004778:	4413      	add	r3, r2
 800477a:	b29b      	uxth	r3, r3
 800477c:	8a7a      	ldrh	r2, [r7, #18]
 800477e:	429a      	cmp	r2, r3
 8004780:	d901      	bls.n	8004786 <pbuf_add_header_impl+0x56>
    return 1;
 8004782:	2301      	movs	r3, #1
 8004784:	e032      	b.n	80047ec <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	7b1b      	ldrb	r3, [r3, #12]
 800478a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800478c:	8a3b      	ldrh	r3, [r7, #16]
 800478e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00c      	beq.n	80047b0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	425b      	negs	r3, r3
 800479e:	4413      	add	r3, r2
 80047a0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	3310      	adds	r3, #16
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d20d      	bcs.n	80047c8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e01d      	b.n	80047ec <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80047b0:	79fb      	ldrb	r3, [r7, #7]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d006      	beq.n	80047c4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	425b      	negs	r3, r3
 80047be:	4413      	add	r3, r2
 80047c0:	617b      	str	r3, [r7, #20]
 80047c2:	e001      	b.n	80047c8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e011      	b.n	80047ec <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	895a      	ldrh	r2, [r3, #10]
 80047d2:	8a7b      	ldrh	r3, [r7, #18]
 80047d4:	4413      	add	r3, r2
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	891a      	ldrh	r2, [r3, #8]
 80047e0:	8a7b      	ldrh	r3, [r7, #18]
 80047e2:	4413      	add	r3, r2
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	811a      	strh	r2, [r3, #8]


  return 0;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3718      	adds	r7, #24
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	0800f70c 	.word	0x0800f70c
 80047f8:	0800f870 	.word	0x0800f870
 80047fc:	0800f76c 	.word	0x0800f76c

08004800 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800480a:	2200      	movs	r2, #0
 800480c:	6839      	ldr	r1, [r7, #0]
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7ff ff8e 	bl	8004730 <pbuf_add_header_impl>
 8004814:	4603      	mov	r3, r0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3708      	adds	r7, #8
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
	...

08004820 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d106      	bne.n	800483e <pbuf_remove_header+0x1e>
 8004830:	4b20      	ldr	r3, [pc, #128]	; (80048b4 <pbuf_remove_header+0x94>)
 8004832:	f240 224b 	movw	r2, #587	; 0x24b
 8004836:	4920      	ldr	r1, [pc, #128]	; (80048b8 <pbuf_remove_header+0x98>)
 8004838:	4820      	ldr	r0, [pc, #128]	; (80048bc <pbuf_remove_header+0x9c>)
 800483a:	f009 fd25 	bl	800e288 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d003      	beq.n	800484c <pbuf_remove_header+0x2c>
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800484a:	d301      	bcc.n	8004850 <pbuf_remove_header+0x30>
    return 1;
 800484c:	2301      	movs	r3, #1
 800484e:	e02c      	b.n	80048aa <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <pbuf_remove_header+0x3a>
    return 0;
 8004856:	2300      	movs	r3, #0
 8004858:	e027      	b.n	80048aa <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	895b      	ldrh	r3, [r3, #10]
 8004862:	89fa      	ldrh	r2, [r7, #14]
 8004864:	429a      	cmp	r2, r3
 8004866:	d908      	bls.n	800487a <pbuf_remove_header+0x5a>
 8004868:	4b12      	ldr	r3, [pc, #72]	; (80048b4 <pbuf_remove_header+0x94>)
 800486a:	f240 2255 	movw	r2, #597	; 0x255
 800486e:	4914      	ldr	r1, [pc, #80]	; (80048c0 <pbuf_remove_header+0xa0>)
 8004870:	4812      	ldr	r0, [pc, #72]	; (80048bc <pbuf_remove_header+0x9c>)
 8004872:	f009 fd09 	bl	800e288 <iprintf>
 8004876:	2301      	movs	r3, #1
 8004878:	e017      	b.n	80048aa <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	441a      	add	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	895a      	ldrh	r2, [r3, #10]
 8004890:	89fb      	ldrh	r3, [r7, #14]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	b29a      	uxth	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	891a      	ldrh	r2, [r3, #8]
 800489e:	89fb      	ldrh	r3, [r7, #14]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	0800f70c 	.word	0x0800f70c
 80048b8:	0800f870 	.word	0x0800f870
 80048bc:	0800f76c 	.word	0x0800f76c
 80048c0:	0800f87c 	.word	0x0800f87c

080048c4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	460b      	mov	r3, r1
 80048ce:	807b      	strh	r3, [r7, #2]
 80048d0:	4613      	mov	r3, r2
 80048d2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80048d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	da08      	bge.n	80048ee <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80048dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80048e0:	425b      	negs	r3, r3
 80048e2:	4619      	mov	r1, r3
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f7ff ff9b 	bl	8004820 <pbuf_remove_header>
 80048ea:	4603      	mov	r3, r0
 80048ec:	e007      	b.n	80048fe <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80048ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80048f2:	787a      	ldrb	r2, [r7, #1]
 80048f4:	4619      	mov	r1, r3
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7ff ff1a 	bl	8004730 <pbuf_add_header_impl>
 80048fc:	4603      	mov	r3, r0
  }
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3708      	adds	r7, #8
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b082      	sub	sp, #8
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
 800490e:	460b      	mov	r3, r1
 8004910:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8004912:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004916:	2201      	movs	r2, #1
 8004918:	4619      	mov	r1, r3
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f7ff ffd2 	bl	80048c4 <pbuf_header_impl>
 8004920:	4603      	mov	r3, r0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3708      	adds	r7, #8
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
	...

0800492c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10b      	bne.n	8004952 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d106      	bne.n	800494e <pbuf_free+0x22>
 8004940:	4b38      	ldr	r3, [pc, #224]	; (8004a24 <pbuf_free+0xf8>)
 8004942:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8004946:	4938      	ldr	r1, [pc, #224]	; (8004a28 <pbuf_free+0xfc>)
 8004948:	4838      	ldr	r0, [pc, #224]	; (8004a2c <pbuf_free+0x100>)
 800494a:	f009 fc9d 	bl	800e288 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800494e:	2300      	movs	r3, #0
 8004950:	e063      	b.n	8004a1a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8004952:	2300      	movs	r3, #0
 8004954:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8004956:	e05c      	b.n	8004a12 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	7b9b      	ldrb	r3, [r3, #14]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d106      	bne.n	800496e <pbuf_free+0x42>
 8004960:	4b30      	ldr	r3, [pc, #192]	; (8004a24 <pbuf_free+0xf8>)
 8004962:	f240 22f1 	movw	r2, #753	; 0x2f1
 8004966:	4932      	ldr	r1, [pc, #200]	; (8004a30 <pbuf_free+0x104>)
 8004968:	4830      	ldr	r0, [pc, #192]	; (8004a2c <pbuf_free+0x100>)
 800496a:	f009 fc8d 	bl	800e288 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	7b9b      	ldrb	r3, [r3, #14]
 8004972:	3b01      	subs	r3, #1
 8004974:	b2da      	uxtb	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	739a      	strb	r2, [r3, #14]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	7b9b      	ldrb	r3, [r3, #14]
 800497e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8004980:	7dbb      	ldrb	r3, [r7, #22]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d143      	bne.n	8004a0e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	7b1b      	ldrb	r3, [r3, #12]
 8004990:	f003 030f 	and.w	r3, r3, #15
 8004994:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	7b5b      	ldrb	r3, [r3, #13]
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d011      	beq.n	80049c6 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d106      	bne.n	80049bc <pbuf_free+0x90>
 80049ae:	4b1d      	ldr	r3, [pc, #116]	; (8004a24 <pbuf_free+0xf8>)
 80049b0:	f240 22ff 	movw	r2, #767	; 0x2ff
 80049b4:	491f      	ldr	r1, [pc, #124]	; (8004a34 <pbuf_free+0x108>)
 80049b6:	481d      	ldr	r0, [pc, #116]	; (8004a2c <pbuf_free+0x100>)
 80049b8:	f009 fc66 	bl	800e288 <iprintf>
        pc->custom_free_function(p);
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	4798      	blx	r3
 80049c4:	e01d      	b.n	8004a02 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80049c6:	7bfb      	ldrb	r3, [r7, #15]
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d104      	bne.n	80049d6 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80049cc:	6879      	ldr	r1, [r7, #4]
 80049ce:	2008      	movs	r0, #8
 80049d0:	f7ff f9b2 	bl	8003d38 <memp_free>
 80049d4:	e015      	b.n	8004a02 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80049d6:	7bfb      	ldrb	r3, [r7, #15]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d104      	bne.n	80049e6 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80049dc:	6879      	ldr	r1, [r7, #4]
 80049de:	2007      	movs	r0, #7
 80049e0:	f7ff f9aa 	bl	8003d38 <memp_free>
 80049e4:	e00d      	b.n	8004a02 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80049e6:	7bfb      	ldrb	r3, [r7, #15]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d103      	bne.n	80049f4 <pbuf_free+0xc8>
          mem_free(p);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f7fe fe83 	bl	80036f8 <mem_free>
 80049f2:	e006      	b.n	8004a02 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80049f4:	4b0b      	ldr	r3, [pc, #44]	; (8004a24 <pbuf_free+0xf8>)
 80049f6:	f240 320f 	movw	r2, #783	; 0x30f
 80049fa:	490f      	ldr	r1, [pc, #60]	; (8004a38 <pbuf_free+0x10c>)
 80049fc:	480b      	ldr	r0, [pc, #44]	; (8004a2c <pbuf_free+0x100>)
 80049fe:	f009 fc43 	bl	800e288 <iprintf>
        }
      }
      count++;
 8004a02:	7dfb      	ldrb	r3, [r7, #23]
 8004a04:	3301      	adds	r3, #1
 8004a06:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	607b      	str	r3, [r7, #4]
 8004a0c:	e001      	b.n	8004a12 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d19f      	bne.n	8004958 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8004a18:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3718      	adds	r7, #24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	0800f70c 	.word	0x0800f70c
 8004a28:	0800f870 	.word	0x0800f870
 8004a2c:	0800f76c 	.word	0x0800f76c
 8004a30:	0800f89c 	.word	0x0800f89c
 8004a34:	0800f8b4 	.word	0x0800f8b4
 8004a38:	0800f8d8 	.word	0x0800f8d8

08004a3c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8004a44:	2300      	movs	r3, #0
 8004a46:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8004a48:	e005      	b.n	8004a56 <pbuf_clen+0x1a>
    ++len;
 8004a4a:	89fb      	ldrh	r3, [r7, #14]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1f6      	bne.n	8004a4a <pbuf_clen+0xe>
  }
  return len;
 8004a5c:	89fb      	ldrh	r3, [r7, #14]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
	...

08004a6c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d010      	beq.n	8004a9c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	7b9b      	ldrb	r3, [r3, #14]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	b2da      	uxtb	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	7b9b      	ldrb	r3, [r3, #14]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d106      	bne.n	8004a9c <pbuf_ref+0x30>
 8004a8e:	4b05      	ldr	r3, [pc, #20]	; (8004aa4 <pbuf_ref+0x38>)
 8004a90:	f240 3242 	movw	r2, #834	; 0x342
 8004a94:	4904      	ldr	r1, [pc, #16]	; (8004aa8 <pbuf_ref+0x3c>)
 8004a96:	4805      	ldr	r0, [pc, #20]	; (8004aac <pbuf_ref+0x40>)
 8004a98:	f009 fbf6 	bl	800e288 <iprintf>
  }
}
 8004a9c:	bf00      	nop
 8004a9e:	3708      	adds	r7, #8
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	0800f70c 	.word	0x0800f70c
 8004aa8:	0800f8ec 	.word	0x0800f8ec
 8004aac:	0800f76c 	.word	0x0800f76c

08004ab0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d002      	beq.n	8004ac6 <pbuf_cat+0x16>
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d107      	bne.n	8004ad6 <pbuf_cat+0x26>
 8004ac6:	4b20      	ldr	r3, [pc, #128]	; (8004b48 <pbuf_cat+0x98>)
 8004ac8:	f240 325a 	movw	r2, #858	; 0x35a
 8004acc:	491f      	ldr	r1, [pc, #124]	; (8004b4c <pbuf_cat+0x9c>)
 8004ace:	4820      	ldr	r0, [pc, #128]	; (8004b50 <pbuf_cat+0xa0>)
 8004ad0:	f009 fbda 	bl	800e288 <iprintf>
 8004ad4:	e034      	b.n	8004b40 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	60fb      	str	r3, [r7, #12]
 8004ada:	e00a      	b.n	8004af2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	891a      	ldrh	r2, [r3, #8]
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	891b      	ldrh	r3, [r3, #8]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	60fb      	str	r3, [r7, #12]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1f0      	bne.n	8004adc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	891a      	ldrh	r2, [r3, #8]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	895b      	ldrh	r3, [r3, #10]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d006      	beq.n	8004b14 <pbuf_cat+0x64>
 8004b06:	4b10      	ldr	r3, [pc, #64]	; (8004b48 <pbuf_cat+0x98>)
 8004b08:	f240 3262 	movw	r2, #866	; 0x362
 8004b0c:	4911      	ldr	r1, [pc, #68]	; (8004b54 <pbuf_cat+0xa4>)
 8004b0e:	4810      	ldr	r0, [pc, #64]	; (8004b50 <pbuf_cat+0xa0>)
 8004b10:	f009 fbba 	bl	800e288 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d006      	beq.n	8004b2a <pbuf_cat+0x7a>
 8004b1c:	4b0a      	ldr	r3, [pc, #40]	; (8004b48 <pbuf_cat+0x98>)
 8004b1e:	f240 3263 	movw	r2, #867	; 0x363
 8004b22:	490d      	ldr	r1, [pc, #52]	; (8004b58 <pbuf_cat+0xa8>)
 8004b24:	480a      	ldr	r0, [pc, #40]	; (8004b50 <pbuf_cat+0xa0>)
 8004b26:	f009 fbaf 	bl	800e288 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	891a      	ldrh	r2, [r3, #8]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	891b      	ldrh	r3, [r3, #8]
 8004b32:	4413      	add	r3, r2
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	683a      	ldr	r2, [r7, #0]
 8004b3e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	0800f70c 	.word	0x0800f70c
 8004b4c:	0800f900 	.word	0x0800f900
 8004b50:	0800f76c 	.word	0x0800f76c
 8004b54:	0800f938 	.word	0x0800f938
 8004b58:	0800f968 	.word	0x0800f968

08004b5c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8004b66:	6839      	ldr	r1, [r7, #0]
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f7ff ffa1 	bl	8004ab0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8004b6e:	6838      	ldr	r0, [r7, #0]
 8004b70:	f7ff ff7c 	bl	8004a6c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8004b74:	bf00      	nop
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8004b86:	2300      	movs	r3, #0
 8004b88:	617b      	str	r3, [r7, #20]
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d008      	beq.n	8004ba6 <pbuf_copy+0x2a>
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d005      	beq.n	8004ba6 <pbuf_copy+0x2a>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	891a      	ldrh	r2, [r3, #8]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	891b      	ldrh	r3, [r3, #8]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d209      	bcs.n	8004bba <pbuf_copy+0x3e>
 8004ba6:	4b57      	ldr	r3, [pc, #348]	; (8004d04 <pbuf_copy+0x188>)
 8004ba8:	f240 32ca 	movw	r2, #970	; 0x3ca
 8004bac:	4956      	ldr	r1, [pc, #344]	; (8004d08 <pbuf_copy+0x18c>)
 8004bae:	4857      	ldr	r0, [pc, #348]	; (8004d0c <pbuf_copy+0x190>)
 8004bb0:	f009 fb6a 	bl	800e288 <iprintf>
 8004bb4:	f06f 030f 	mvn.w	r3, #15
 8004bb8:	e09f      	b.n	8004cfa <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	895b      	ldrh	r3, [r3, #10]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	1ad2      	subs	r2, r2, r3
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	895b      	ldrh	r3, [r3, #10]
 8004bc8:	4619      	mov	r1, r3
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	1acb      	subs	r3, r1, r3
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d306      	bcc.n	8004be0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	895b      	ldrh	r3, [r3, #10]
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	60fb      	str	r3, [r7, #12]
 8004bde:	e005      	b.n	8004bec <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	895b      	ldrh	r3, [r3, #10]
 8004be4:	461a      	mov	r2, r3
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	18d0      	adds	r0, r2, r3
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	4619      	mov	r1, r3
 8004c00:	f009 fb2f 	bl	800e262 <memcpy>
    offset_to += len;
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	4413      	add	r3, r2
 8004c0a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	4413      	add	r3, r2
 8004c12:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	895b      	ldrh	r3, [r3, #10]
 8004c18:	461a      	mov	r2, r3
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d906      	bls.n	8004c2e <pbuf_copy+0xb2>
 8004c20:	4b38      	ldr	r3, [pc, #224]	; (8004d04 <pbuf_copy+0x188>)
 8004c22:	f240 32d9 	movw	r2, #985	; 0x3d9
 8004c26:	493a      	ldr	r1, [pc, #232]	; (8004d10 <pbuf_copy+0x194>)
 8004c28:	4838      	ldr	r0, [pc, #224]	; (8004d0c <pbuf_copy+0x190>)
 8004c2a:	f009 fb2d 	bl	800e288 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	895b      	ldrh	r3, [r3, #10]
 8004c32:	461a      	mov	r2, r3
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d906      	bls.n	8004c48 <pbuf_copy+0xcc>
 8004c3a:	4b32      	ldr	r3, [pc, #200]	; (8004d04 <pbuf_copy+0x188>)
 8004c3c:	f240 32da 	movw	r2, #986	; 0x3da
 8004c40:	4934      	ldr	r1, [pc, #208]	; (8004d14 <pbuf_copy+0x198>)
 8004c42:	4832      	ldr	r0, [pc, #200]	; (8004d0c <pbuf_copy+0x190>)
 8004c44:	f009 fb20 	bl	800e288 <iprintf>
    if (offset_from >= p_from->len) {
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	895b      	ldrh	r3, [r3, #10]
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d304      	bcc.n	8004c5e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8004c54:	2300      	movs	r3, #0
 8004c56:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	895b      	ldrh	r3, [r3, #10]
 8004c62:	461a      	mov	r2, r3
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d114      	bne.n	8004c94 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10c      	bne.n	8004c94 <pbuf_copy+0x118>
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d009      	beq.n	8004c94 <pbuf_copy+0x118>
 8004c80:	4b20      	ldr	r3, [pc, #128]	; (8004d04 <pbuf_copy+0x188>)
 8004c82:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8004c86:	4924      	ldr	r1, [pc, #144]	; (8004d18 <pbuf_copy+0x19c>)
 8004c88:	4820      	ldr	r0, [pc, #128]	; (8004d0c <pbuf_copy+0x190>)
 8004c8a:	f009 fafd 	bl	800e288 <iprintf>
 8004c8e:	f06f 030f 	mvn.w	r3, #15
 8004c92:	e032      	b.n	8004cfa <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d013      	beq.n	8004cc2 <pbuf_copy+0x146>
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	895a      	ldrh	r2, [r3, #10]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	891b      	ldrh	r3, [r3, #8]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d10d      	bne.n	8004cc2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d009      	beq.n	8004cc2 <pbuf_copy+0x146>
 8004cae:	4b15      	ldr	r3, [pc, #84]	; (8004d04 <pbuf_copy+0x188>)
 8004cb0:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8004cb4:	4919      	ldr	r1, [pc, #100]	; (8004d1c <pbuf_copy+0x1a0>)
 8004cb6:	4815      	ldr	r0, [pc, #84]	; (8004d0c <pbuf_copy+0x190>)
 8004cb8:	f009 fae6 	bl	800e288 <iprintf>
 8004cbc:	f06f 0305 	mvn.w	r3, #5
 8004cc0:	e01b      	b.n	8004cfa <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d013      	beq.n	8004cf0 <pbuf_copy+0x174>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	895a      	ldrh	r2, [r3, #10]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	891b      	ldrh	r3, [r3, #8]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d10d      	bne.n	8004cf0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d009      	beq.n	8004cf0 <pbuf_copy+0x174>
 8004cdc:	4b09      	ldr	r3, [pc, #36]	; (8004d04 <pbuf_copy+0x188>)
 8004cde:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8004ce2:	490e      	ldr	r1, [pc, #56]	; (8004d1c <pbuf_copy+0x1a0>)
 8004ce4:	4809      	ldr	r0, [pc, #36]	; (8004d0c <pbuf_copy+0x190>)
 8004ce6:	f009 facf 	bl	800e288 <iprintf>
 8004cea:	f06f 0305 	mvn.w	r3, #5
 8004cee:	e004      	b.n	8004cfa <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f47f af61 	bne.w	8004bba <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3718      	adds	r7, #24
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	0800f70c 	.word	0x0800f70c
 8004d08:	0800f9b4 	.word	0x0800f9b4
 8004d0c:	0800f76c 	.word	0x0800f76c
 8004d10:	0800f9e4 	.word	0x0800f9e4
 8004d14:	0800f9fc 	.word	0x0800f9fc
 8004d18:	0800fa18 	.word	0x0800fa18
 8004d1c:	0800fa28 	.word	0x0800fa28

08004d20 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b088      	sub	sp, #32
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	4611      	mov	r1, r2
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	460b      	mov	r3, r1
 8004d30:	80fb      	strh	r3, [r7, #6]
 8004d32:	4613      	mov	r3, r2
 8004d34:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8004d36:	2300      	movs	r3, #0
 8004d38:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d108      	bne.n	8004d56 <pbuf_copy_partial+0x36>
 8004d44:	4b2b      	ldr	r3, [pc, #172]	; (8004df4 <pbuf_copy_partial+0xd4>)
 8004d46:	f240 420a 	movw	r2, #1034	; 0x40a
 8004d4a:	492b      	ldr	r1, [pc, #172]	; (8004df8 <pbuf_copy_partial+0xd8>)
 8004d4c:	482b      	ldr	r0, [pc, #172]	; (8004dfc <pbuf_copy_partial+0xdc>)
 8004d4e:	f009 fa9b 	bl	800e288 <iprintf>
 8004d52:	2300      	movs	r3, #0
 8004d54:	e04a      	b.n	8004dec <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d108      	bne.n	8004d6e <pbuf_copy_partial+0x4e>
 8004d5c:	4b25      	ldr	r3, [pc, #148]	; (8004df4 <pbuf_copy_partial+0xd4>)
 8004d5e:	f240 420b 	movw	r2, #1035	; 0x40b
 8004d62:	4927      	ldr	r1, [pc, #156]	; (8004e00 <pbuf_copy_partial+0xe0>)
 8004d64:	4825      	ldr	r0, [pc, #148]	; (8004dfc <pbuf_copy_partial+0xdc>)
 8004d66:	f009 fa8f 	bl	800e288 <iprintf>
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	e03e      	b.n	8004dec <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	61fb      	str	r3, [r7, #28]
 8004d72:	e034      	b.n	8004dde <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8004d74:	88bb      	ldrh	r3, [r7, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00a      	beq.n	8004d90 <pbuf_copy_partial+0x70>
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	895b      	ldrh	r3, [r3, #10]
 8004d7e:	88ba      	ldrh	r2, [r7, #4]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d305      	bcc.n	8004d90 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	895b      	ldrh	r3, [r3, #10]
 8004d88:	88ba      	ldrh	r2, [r7, #4]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	80bb      	strh	r3, [r7, #4]
 8004d8e:	e023      	b.n	8004dd8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	895a      	ldrh	r2, [r3, #10]
 8004d94:	88bb      	ldrh	r3, [r7, #4]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8004d9a:	8b3a      	ldrh	r2, [r7, #24]
 8004d9c:	88fb      	ldrh	r3, [r7, #6]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d901      	bls.n	8004da6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8004da2:	88fb      	ldrh	r3, [r7, #6]
 8004da4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8004da6:	8b7b      	ldrh	r3, [r7, #26]
 8004da8:	68ba      	ldr	r2, [r7, #8]
 8004daa:	18d0      	adds	r0, r2, r3
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	88bb      	ldrh	r3, [r7, #4]
 8004db2:	4413      	add	r3, r2
 8004db4:	8b3a      	ldrh	r2, [r7, #24]
 8004db6:	4619      	mov	r1, r3
 8004db8:	f009 fa53 	bl	800e262 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8004dbc:	8afa      	ldrh	r2, [r7, #22]
 8004dbe:	8b3b      	ldrh	r3, [r7, #24]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8004dc4:	8b7a      	ldrh	r2, [r7, #26]
 8004dc6:	8b3b      	ldrh	r3, [r7, #24]
 8004dc8:	4413      	add	r3, r2
 8004dca:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8004dcc:	88fa      	ldrh	r2, [r7, #6]
 8004dce:	8b3b      	ldrh	r3, [r7, #24]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	61fb      	str	r3, [r7, #28]
 8004dde:	88fb      	ldrh	r3, [r7, #6]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d002      	beq.n	8004dea <pbuf_copy_partial+0xca>
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1c4      	bne.n	8004d74 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8004dea:	8afb      	ldrh	r3, [r7, #22]
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3720      	adds	r7, #32
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	0800f70c 	.word	0x0800f70c
 8004df8:	0800fa54 	.word	0x0800fa54
 8004dfc:	0800f76c 	.word	0x0800f76c
 8004e00:	0800fa74 	.word	0x0800fa74

08004e04 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	603a      	str	r2, [r7, #0]
 8004e0e:	71fb      	strb	r3, [r7, #7]
 8004e10:	460b      	mov	r3, r1
 8004e12:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	8919      	ldrh	r1, [r3, #8]
 8004e18:	88ba      	ldrh	r2, [r7, #4]
 8004e1a:	79fb      	ldrb	r3, [r7, #7]
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7ff faa5 	bl	800436c <pbuf_alloc>
 8004e22:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <pbuf_clone+0x2a>
    return NULL;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	e011      	b.n	8004e52 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8004e2e:	6839      	ldr	r1, [r7, #0]
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f7ff fea3 	bl	8004b7c <pbuf_copy>
 8004e36:	4603      	mov	r3, r0
 8004e38:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8004e3a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d006      	beq.n	8004e50 <pbuf_clone+0x4c>
 8004e42:	4b06      	ldr	r3, [pc, #24]	; (8004e5c <pbuf_clone+0x58>)
 8004e44:	f240 5224 	movw	r2, #1316	; 0x524
 8004e48:	4905      	ldr	r1, [pc, #20]	; (8004e60 <pbuf_clone+0x5c>)
 8004e4a:	4806      	ldr	r0, [pc, #24]	; (8004e64 <pbuf_clone+0x60>)
 8004e4c:	f009 fa1c 	bl	800e288 <iprintf>
  return q;
 8004e50:	68fb      	ldr	r3, [r7, #12]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	0800f70c 	.word	0x0800f70c
 8004e60:	0800fb80 	.word	0x0800fb80
 8004e64:	0800f76c 	.word	0x0800f76c

08004e68 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8004e6c:	f009 fa24 	bl	800e2b8 <rand>
 8004e70:	4603      	mov	r3, r0
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	4b01      	ldr	r3, [pc, #4]	; (8004e88 <tcp_init+0x20>)
 8004e82:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8004e84:	bf00      	nop
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	2000000a 	.word	0x2000000a

08004e8c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	7d1b      	ldrb	r3, [r3, #20]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d105      	bne.n	8004ea8 <tcp_free+0x1c>
 8004e9c:	4b06      	ldr	r3, [pc, #24]	; (8004eb8 <tcp_free+0x2c>)
 8004e9e:	22d4      	movs	r2, #212	; 0xd4
 8004ea0:	4906      	ldr	r1, [pc, #24]	; (8004ebc <tcp_free+0x30>)
 8004ea2:	4807      	ldr	r0, [pc, #28]	; (8004ec0 <tcp_free+0x34>)
 8004ea4:	f009 f9f0 	bl	800e288 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8004ea8:	6879      	ldr	r1, [r7, #4]
 8004eaa:	2001      	movs	r0, #1
 8004eac:	f7fe ff44 	bl	8003d38 <memp_free>
}
 8004eb0:	bf00      	nop
 8004eb2:	3708      	adds	r7, #8
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	0800fc0c 	.word	0x0800fc0c
 8004ebc:	0800fc3c 	.word	0x0800fc3c
 8004ec0:	0800fc50 	.word	0x0800fc50

08004ec4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	7d1b      	ldrb	r3, [r3, #20]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d105      	bne.n	8004ee0 <tcp_free_listen+0x1c>
 8004ed4:	4b06      	ldr	r3, [pc, #24]	; (8004ef0 <tcp_free_listen+0x2c>)
 8004ed6:	22df      	movs	r2, #223	; 0xdf
 8004ed8:	4906      	ldr	r1, [pc, #24]	; (8004ef4 <tcp_free_listen+0x30>)
 8004eda:	4807      	ldr	r0, [pc, #28]	; (8004ef8 <tcp_free_listen+0x34>)
 8004edc:	f009 f9d4 	bl	800e288 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8004ee0:	6879      	ldr	r1, [r7, #4]
 8004ee2:	2002      	movs	r0, #2
 8004ee4:	f7fe ff28 	bl	8003d38 <memp_free>
}
 8004ee8:	bf00      	nop
 8004eea:	3708      	adds	r7, #8
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	0800fc0c 	.word	0x0800fc0c
 8004ef4:	0800fc78 	.word	0x0800fc78
 8004ef8:	0800fc50 	.word	0x0800fc50

08004efc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8004f00:	f001 f852 	bl	8005fa8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8004f04:	4b07      	ldr	r3, [pc, #28]	; (8004f24 <tcp_tmr+0x28>)
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	3301      	adds	r3, #1
 8004f0a:	b2da      	uxtb	r2, r3
 8004f0c:	4b05      	ldr	r3, [pc, #20]	; (8004f24 <tcp_tmr+0x28>)
 8004f0e:	701a      	strb	r2, [r3, #0]
 8004f10:	4b04      	ldr	r3, [pc, #16]	; (8004f24 <tcp_tmr+0x28>)
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d001      	beq.n	8004f20 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8004f1c:	f000 fd06 	bl	800592c <tcp_slowtmr>
  }
}
 8004f20:	bf00      	nop
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	200000cd 	.word	0x200000cd

08004f28 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d105      	bne.n	8004f44 <tcp_remove_listener+0x1c>
 8004f38:	4b0d      	ldr	r3, [pc, #52]	; (8004f70 <tcp_remove_listener+0x48>)
 8004f3a:	22ff      	movs	r2, #255	; 0xff
 8004f3c:	490d      	ldr	r1, [pc, #52]	; (8004f74 <tcp_remove_listener+0x4c>)
 8004f3e:	480e      	ldr	r0, [pc, #56]	; (8004f78 <tcp_remove_listener+0x50>)
 8004f40:	f009 f9a2 	bl	800e288 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	60fb      	str	r3, [r7, #12]
 8004f48:	e00a      	b.n	8004f60 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d102      	bne.n	8004f5a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	60fb      	str	r3, [r7, #12]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1f1      	bne.n	8004f4a <tcp_remove_listener+0x22>
    }
  }
}
 8004f66:	bf00      	nop
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	0800fc0c 	.word	0x0800fc0c
 8004f74:	0800fc94 	.word	0x0800fc94
 8004f78:	0800fc50 	.word	0x0800fc50

08004f7c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d106      	bne.n	8004f98 <tcp_listen_closed+0x1c>
 8004f8a:	4b14      	ldr	r3, [pc, #80]	; (8004fdc <tcp_listen_closed+0x60>)
 8004f8c:	f240 1211 	movw	r2, #273	; 0x111
 8004f90:	4913      	ldr	r1, [pc, #76]	; (8004fe0 <tcp_listen_closed+0x64>)
 8004f92:	4814      	ldr	r0, [pc, #80]	; (8004fe4 <tcp_listen_closed+0x68>)
 8004f94:	f009 f978 	bl	800e288 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	7d1b      	ldrb	r3, [r3, #20]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d006      	beq.n	8004fae <tcp_listen_closed+0x32>
 8004fa0:	4b0e      	ldr	r3, [pc, #56]	; (8004fdc <tcp_listen_closed+0x60>)
 8004fa2:	f44f 7289 	mov.w	r2, #274	; 0x112
 8004fa6:	4910      	ldr	r1, [pc, #64]	; (8004fe8 <tcp_listen_closed+0x6c>)
 8004fa8:	480e      	ldr	r0, [pc, #56]	; (8004fe4 <tcp_listen_closed+0x68>)
 8004faa:	f009 f96d 	bl	800e288 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8004fae:	2301      	movs	r3, #1
 8004fb0:	60fb      	str	r3, [r7, #12]
 8004fb2:	e00b      	b.n	8004fcc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8004fb4:	4a0d      	ldr	r2, [pc, #52]	; (8004fec <tcp_listen_closed+0x70>)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	6879      	ldr	r1, [r7, #4]
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7ff ffb1 	bl	8004f28 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	3301      	adds	r3, #1
 8004fca:	60fb      	str	r3, [r7, #12]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2b03      	cmp	r3, #3
 8004fd0:	d9f0      	bls.n	8004fb4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8004fd2:	bf00      	nop
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	0800fc0c 	.word	0x0800fc0c
 8004fe0:	0800fcbc 	.word	0x0800fcbc
 8004fe4:	0800fc50 	.word	0x0800fc50
 8004fe8:	0800fcc8 	.word	0x0800fcc8
 8004fec:	08011bd8 	.word	0x08011bd8

08004ff0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8004ff0:	b5b0      	push	{r4, r5, r7, lr}
 8004ff2:	b088      	sub	sp, #32
 8004ff4:	af04      	add	r7, sp, #16
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d106      	bne.n	8005010 <tcp_close_shutdown+0x20>
 8005002:	4b61      	ldr	r3, [pc, #388]	; (8005188 <tcp_close_shutdown+0x198>)
 8005004:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8005008:	4960      	ldr	r1, [pc, #384]	; (800518c <tcp_close_shutdown+0x19c>)
 800500a:	4861      	ldr	r0, [pc, #388]	; (8005190 <tcp_close_shutdown+0x1a0>)
 800500c:	f009 f93c 	bl	800e288 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8005010:	78fb      	ldrb	r3, [r7, #3]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d066      	beq.n	80050e4 <tcp_close_shutdown+0xf4>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	7d1b      	ldrb	r3, [r3, #20]
 800501a:	2b04      	cmp	r3, #4
 800501c:	d003      	beq.n	8005026 <tcp_close_shutdown+0x36>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	7d1b      	ldrb	r3, [r3, #20]
 8005022:	2b07      	cmp	r3, #7
 8005024:	d15e      	bne.n	80050e4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800502a:	2b00      	cmp	r3, #0
 800502c:	d104      	bne.n	8005038 <tcp_close_shutdown+0x48>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005032:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005036:	d055      	beq.n	80050e4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	8b5b      	ldrh	r3, [r3, #26]
 800503c:	f003 0310 	and.w	r3, r3, #16
 8005040:	2b00      	cmp	r3, #0
 8005042:	d106      	bne.n	8005052 <tcp_close_shutdown+0x62>
 8005044:	4b50      	ldr	r3, [pc, #320]	; (8005188 <tcp_close_shutdown+0x198>)
 8005046:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800504a:	4952      	ldr	r1, [pc, #328]	; (8005194 <tcp_close_shutdown+0x1a4>)
 800504c:	4850      	ldr	r0, [pc, #320]	; (8005190 <tcp_close_shutdown+0x1a0>)
 800504e:	f009 f91b 	bl	800e288 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800505a:	687d      	ldr	r5, [r7, #4]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	3304      	adds	r3, #4
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	8ad2      	ldrh	r2, [r2, #22]
 8005064:	6879      	ldr	r1, [r7, #4]
 8005066:	8b09      	ldrh	r1, [r1, #24]
 8005068:	9102      	str	r1, [sp, #8]
 800506a:	9201      	str	r2, [sp, #4]
 800506c:	9300      	str	r3, [sp, #0]
 800506e:	462b      	mov	r3, r5
 8005070:	4622      	mov	r2, r4
 8005072:	4601      	mov	r1, r0
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f005 fd89 	bl	800ab8c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f001 fb5a 	bl	8006734 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8005080:	4b45      	ldr	r3, [pc, #276]	; (8005198 <tcp_close_shutdown+0x1a8>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	429a      	cmp	r2, r3
 8005088:	d105      	bne.n	8005096 <tcp_close_shutdown+0xa6>
 800508a:	4b43      	ldr	r3, [pc, #268]	; (8005198 <tcp_close_shutdown+0x1a8>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	4a41      	ldr	r2, [pc, #260]	; (8005198 <tcp_close_shutdown+0x1a8>)
 8005092:	6013      	str	r3, [r2, #0]
 8005094:	e013      	b.n	80050be <tcp_close_shutdown+0xce>
 8005096:	4b40      	ldr	r3, [pc, #256]	; (8005198 <tcp_close_shutdown+0x1a8>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	60fb      	str	r3, [r7, #12]
 800509c:	e00c      	b.n	80050b8 <tcp_close_shutdown+0xc8>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d104      	bne.n	80050b2 <tcp_close_shutdown+0xc2>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68da      	ldr	r2, [r3, #12]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	60da      	str	r2, [r3, #12]
 80050b0:	e005      	b.n	80050be <tcp_close_shutdown+0xce>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	60fb      	str	r3, [r7, #12]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1ef      	bne.n	800509e <tcp_close_shutdown+0xae>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	60da      	str	r2, [r3, #12]
 80050c4:	4b35      	ldr	r3, [pc, #212]	; (800519c <tcp_close_shutdown+0x1ac>)
 80050c6:	2201      	movs	r2, #1
 80050c8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80050ca:	4b35      	ldr	r3, [pc, #212]	; (80051a0 <tcp_close_shutdown+0x1b0>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d102      	bne.n	80050da <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80050d4:	f003 ffec 	bl	80090b0 <tcp_trigger_input_pcb_close>
 80050d8:	e002      	b.n	80050e0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7ff fed6 	bl	8004e8c <tcp_free>
      }
      return ERR_OK;
 80050e0:	2300      	movs	r3, #0
 80050e2:	e04d      	b.n	8005180 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	7d1b      	ldrb	r3, [r3, #20]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d02d      	beq.n	8005148 <tcp_close_shutdown+0x158>
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d036      	beq.n	800515e <tcp_close_shutdown+0x16e>
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d13f      	bne.n	8005174 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	8adb      	ldrh	r3, [r3, #22]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d021      	beq.n	8005140 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80050fc:	4b29      	ldr	r3, [pc, #164]	; (80051a4 <tcp_close_shutdown+0x1b4>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	429a      	cmp	r2, r3
 8005104:	d105      	bne.n	8005112 <tcp_close_shutdown+0x122>
 8005106:	4b27      	ldr	r3, [pc, #156]	; (80051a4 <tcp_close_shutdown+0x1b4>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	4a25      	ldr	r2, [pc, #148]	; (80051a4 <tcp_close_shutdown+0x1b4>)
 800510e:	6013      	str	r3, [r2, #0]
 8005110:	e013      	b.n	800513a <tcp_close_shutdown+0x14a>
 8005112:	4b24      	ldr	r3, [pc, #144]	; (80051a4 <tcp_close_shutdown+0x1b4>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	60bb      	str	r3, [r7, #8]
 8005118:	e00c      	b.n	8005134 <tcp_close_shutdown+0x144>
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	429a      	cmp	r2, r3
 8005122:	d104      	bne.n	800512e <tcp_close_shutdown+0x13e>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	68da      	ldr	r2, [r3, #12]
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	60da      	str	r2, [r3, #12]
 800512c:	e005      	b.n	800513a <tcp_close_shutdown+0x14a>
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	60bb      	str	r3, [r7, #8]
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1ef      	bne.n	800511a <tcp_close_shutdown+0x12a>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f7ff fea3 	bl	8004e8c <tcp_free>
      break;
 8005146:	e01a      	b.n	800517e <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f7ff ff17 	bl	8004f7c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800514e:	6879      	ldr	r1, [r7, #4]
 8005150:	4815      	ldr	r0, [pc, #84]	; (80051a8 <tcp_close_shutdown+0x1b8>)
 8005152:	f001 fb3f 	bl	80067d4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7ff feb4 	bl	8004ec4 <tcp_free_listen>
      break;
 800515c:	e00f      	b.n	800517e <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800515e:	6879      	ldr	r1, [r7, #4]
 8005160:	480d      	ldr	r0, [pc, #52]	; (8005198 <tcp_close_shutdown+0x1a8>)
 8005162:	f001 fb37 	bl	80067d4 <tcp_pcb_remove>
 8005166:	4b0d      	ldr	r3, [pc, #52]	; (800519c <tcp_close_shutdown+0x1ac>)
 8005168:	2201      	movs	r2, #1
 800516a:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f7ff fe8d 	bl	8004e8c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8005172:	e004      	b.n	800517e <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f819 	bl	80051ac <tcp_close_shutdown_fin>
 800517a:	4603      	mov	r3, r0
 800517c:	e000      	b.n	8005180 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bdb0      	pop	{r4, r5, r7, pc}
 8005188:	0800fc0c 	.word	0x0800fc0c
 800518c:	0800fce0 	.word	0x0800fce0
 8005190:	0800fc50 	.word	0x0800fc50
 8005194:	0800fd00 	.word	0x0800fd00
 8005198:	2000688c 	.word	0x2000688c
 800519c:	20006888 	.word	0x20006888
 80051a0:	200068a0 	.word	0x200068a0
 80051a4:	20006898 	.word	0x20006898
 80051a8:	20006894 	.word	0x20006894

080051ac <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d106      	bne.n	80051c8 <tcp_close_shutdown_fin+0x1c>
 80051ba:	4b2c      	ldr	r3, [pc, #176]	; (800526c <tcp_close_shutdown_fin+0xc0>)
 80051bc:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80051c0:	492b      	ldr	r1, [pc, #172]	; (8005270 <tcp_close_shutdown_fin+0xc4>)
 80051c2:	482c      	ldr	r0, [pc, #176]	; (8005274 <tcp_close_shutdown_fin+0xc8>)
 80051c4:	f009 f860 	bl	800e288 <iprintf>

  switch (pcb->state) {
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	7d1b      	ldrb	r3, [r3, #20]
 80051cc:	2b04      	cmp	r3, #4
 80051ce:	d010      	beq.n	80051f2 <tcp_close_shutdown_fin+0x46>
 80051d0:	2b07      	cmp	r3, #7
 80051d2:	d01b      	beq.n	800520c <tcp_close_shutdown_fin+0x60>
 80051d4:	2b03      	cmp	r3, #3
 80051d6:	d126      	bne.n	8005226 <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f004 fdd5 	bl	8009d88 <tcp_send_fin>
 80051de:	4603      	mov	r3, r0
 80051e0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80051e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d11f      	bne.n	800522a <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2205      	movs	r2, #5
 80051ee:	751a      	strb	r2, [r3, #20]
      }
      break;
 80051f0:	e01b      	b.n	800522a <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f004 fdc8 	bl	8009d88 <tcp_send_fin>
 80051f8:	4603      	mov	r3, r0
 80051fa:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80051fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d114      	bne.n	800522e <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2205      	movs	r2, #5
 8005208:	751a      	strb	r2, [r3, #20]
      }
      break;
 800520a:	e010      	b.n	800522e <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f004 fdbb 	bl	8009d88 <tcp_send_fin>
 8005212:	4603      	mov	r3, r0
 8005214:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d109      	bne.n	8005232 <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2209      	movs	r2, #9
 8005222:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005224:	e005      	b.n	8005232 <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8005226:	2300      	movs	r3, #0
 8005228:	e01c      	b.n	8005264 <tcp_close_shutdown_fin+0xb8>
      break;
 800522a:	bf00      	nop
 800522c:	e002      	b.n	8005234 <tcp_close_shutdown_fin+0x88>
      break;
 800522e:	bf00      	nop
 8005230:	e000      	b.n	8005234 <tcp_close_shutdown_fin+0x88>
      break;
 8005232:	bf00      	nop
  }

  if (err == ERR_OK) {
 8005234:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d103      	bne.n	8005244 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f004 fee1 	bl	800a004 <tcp_output>
 8005242:	e00d      	b.n	8005260 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8005244:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524c:	d108      	bne.n	8005260 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	8b5b      	ldrh	r3, [r3, #26]
 8005252:	f043 0308 	orr.w	r3, r3, #8
 8005256:	b29a      	uxth	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800525c:	2300      	movs	r3, #0
 800525e:	e001      	b.n	8005264 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8005260:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005264:	4618      	mov	r0, r3
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	0800fc0c 	.word	0x0800fc0c
 8005270:	0800fcbc 	.word	0x0800fcbc
 8005274:	0800fc50 	.word	0x0800fc50

08005278 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d109      	bne.n	800529a <tcp_close+0x22>
 8005286:	4b0f      	ldr	r3, [pc, #60]	; (80052c4 <tcp_close+0x4c>)
 8005288:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800528c:	490e      	ldr	r1, [pc, #56]	; (80052c8 <tcp_close+0x50>)
 800528e:	480f      	ldr	r0, [pc, #60]	; (80052cc <tcp_close+0x54>)
 8005290:	f008 fffa 	bl	800e288 <iprintf>
 8005294:	f06f 030f 	mvn.w	r3, #15
 8005298:	e00f      	b.n	80052ba <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	7d1b      	ldrb	r3, [r3, #20]
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d006      	beq.n	80052b0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	8b5b      	ldrh	r3, [r3, #26]
 80052a6:	f043 0310 	orr.w	r3, r3, #16
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80052b0:	2101      	movs	r1, #1
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f7ff fe9c 	bl	8004ff0 <tcp_close_shutdown>
 80052b8:	4603      	mov	r3, r0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3708      	adds	r7, #8
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	0800fc0c 	.word	0x0800fc0c
 80052c8:	0800fd1c 	.word	0x0800fd1c
 80052cc:	0800fc50 	.word	0x0800fc50

080052d0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b08e      	sub	sp, #56	; 0x38
 80052d4:	af04      	add	r7, sp, #16
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d107      	bne.n	80052f0 <tcp_abandon+0x20>
 80052e0:	4b52      	ldr	r3, [pc, #328]	; (800542c <tcp_abandon+0x15c>)
 80052e2:	f240 223d 	movw	r2, #573	; 0x23d
 80052e6:	4952      	ldr	r1, [pc, #328]	; (8005430 <tcp_abandon+0x160>)
 80052e8:	4852      	ldr	r0, [pc, #328]	; (8005434 <tcp_abandon+0x164>)
 80052ea:	f008 ffcd 	bl	800e288 <iprintf>
 80052ee:	e099      	b.n	8005424 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	7d1b      	ldrb	r3, [r3, #20]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d106      	bne.n	8005306 <tcp_abandon+0x36>
 80052f8:	4b4c      	ldr	r3, [pc, #304]	; (800542c <tcp_abandon+0x15c>)
 80052fa:	f240 2241 	movw	r2, #577	; 0x241
 80052fe:	494e      	ldr	r1, [pc, #312]	; (8005438 <tcp_abandon+0x168>)
 8005300:	484c      	ldr	r0, [pc, #304]	; (8005434 <tcp_abandon+0x164>)
 8005302:	f008 ffc1 	bl	800e288 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	7d1b      	ldrb	r3, [r3, #20]
 800530a:	2b0a      	cmp	r3, #10
 800530c:	d107      	bne.n	800531e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800530e:	6879      	ldr	r1, [r7, #4]
 8005310:	484a      	ldr	r0, [pc, #296]	; (800543c <tcp_abandon+0x16c>)
 8005312:	f001 fa5f 	bl	80067d4 <tcp_pcb_remove>
    tcp_free(pcb);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f7ff fdb8 	bl	8004e8c <tcp_free>
 800531c:	e082      	b.n	8005424 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800531e:	2300      	movs	r3, #0
 8005320:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8005322:	2300      	movs	r3, #0
 8005324:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800532a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005330:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005338:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	7d1b      	ldrb	r3, [r3, #20]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d126      	bne.n	8005396 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	8adb      	ldrh	r3, [r3, #22]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d02e      	beq.n	80053ae <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005350:	4b3b      	ldr	r3, [pc, #236]	; (8005440 <tcp_abandon+0x170>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	429a      	cmp	r2, r3
 8005358:	d105      	bne.n	8005366 <tcp_abandon+0x96>
 800535a:	4b39      	ldr	r3, [pc, #228]	; (8005440 <tcp_abandon+0x170>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	4a37      	ldr	r2, [pc, #220]	; (8005440 <tcp_abandon+0x170>)
 8005362:	6013      	str	r3, [r2, #0]
 8005364:	e013      	b.n	800538e <tcp_abandon+0xbe>
 8005366:	4b36      	ldr	r3, [pc, #216]	; (8005440 <tcp_abandon+0x170>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	61fb      	str	r3, [r7, #28]
 800536c:	e00c      	b.n	8005388 <tcp_abandon+0xb8>
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	429a      	cmp	r2, r3
 8005376:	d104      	bne.n	8005382 <tcp_abandon+0xb2>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68da      	ldr	r2, [r3, #12]
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	60da      	str	r2, [r3, #12]
 8005380:	e005      	b.n	800538e <tcp_abandon+0xbe>
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	61fb      	str	r3, [r7, #28]
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1ef      	bne.n	800536e <tcp_abandon+0x9e>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	60da      	str	r2, [r3, #12]
 8005394:	e00b      	b.n	80053ae <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	8adb      	ldrh	r3, [r3, #22]
 800539e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80053a0:	6879      	ldr	r1, [r7, #4]
 80053a2:	4828      	ldr	r0, [pc, #160]	; (8005444 <tcp_abandon+0x174>)
 80053a4:	f001 fa16 	bl	80067d4 <tcp_pcb_remove>
 80053a8:	4b27      	ldr	r3, [pc, #156]	; (8005448 <tcp_abandon+0x178>)
 80053aa:	2201      	movs	r2, #1
 80053ac:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d004      	beq.n	80053c0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ba:	4618      	mov	r0, r3
 80053bc:	f000 fed4 	bl	8006168 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d004      	beq.n	80053d2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053cc:	4618      	mov	r0, r3
 80053ce:	f000 fecb 	bl	8006168 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d004      	beq.n	80053e4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053de:	4618      	mov	r0, r3
 80053e0:	f000 fec2 	bl	8006168 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80053e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00e      	beq.n	8005408 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80053ea:	6879      	ldr	r1, [r7, #4]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	3304      	adds	r3, #4
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	8b12      	ldrh	r2, [r2, #24]
 80053f4:	9202      	str	r2, [sp, #8]
 80053f6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80053f8:	9201      	str	r2, [sp, #4]
 80053fa:	9300      	str	r3, [sp, #0]
 80053fc:	460b      	mov	r3, r1
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	69b9      	ldr	r1, [r7, #24]
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f005 fbc2 	bl	800ab8c <tcp_rst>
    }
    last_state = pcb->state;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	7d1b      	ldrb	r3, [r3, #20]
 800540c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7ff fd3c 	bl	8004e8c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d004      	beq.n	8005424 <tcp_abandon+0x154>
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	f06f 010c 	mvn.w	r1, #12
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	4798      	blx	r3
  }
}
 8005424:	3728      	adds	r7, #40	; 0x28
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	0800fc0c 	.word	0x0800fc0c
 8005430:	0800fd50 	.word	0x0800fd50
 8005434:	0800fc50 	.word	0x0800fc50
 8005438:	0800fd6c 	.word	0x0800fd6c
 800543c:	2000689c 	.word	0x2000689c
 8005440:	20006898 	.word	0x20006898
 8005444:	2000688c 	.word	0x2000688c
 8005448:	20006888 	.word	0x20006888

0800544c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8005454:	2101      	movs	r1, #1
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f7ff ff3a 	bl	80052d0 <tcp_abandon>
}
 800545c:	bf00      	nop
 800545e:	3708      	adds	r7, #8
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b088      	sub	sp, #32
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	4613      	mov	r3, r2
 8005470:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8005472:	2304      	movs	r3, #4
 8005474:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d101      	bne.n	8005480 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800547c:	4b3e      	ldr	r3, [pc, #248]	; (8005578 <tcp_bind+0x114>)
 800547e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d109      	bne.n	800549a <tcp_bind+0x36>
 8005486:	4b3d      	ldr	r3, [pc, #244]	; (800557c <tcp_bind+0x118>)
 8005488:	f240 22a9 	movw	r2, #681	; 0x2a9
 800548c:	493c      	ldr	r1, [pc, #240]	; (8005580 <tcp_bind+0x11c>)
 800548e:	483d      	ldr	r0, [pc, #244]	; (8005584 <tcp_bind+0x120>)
 8005490:	f008 fefa 	bl	800e288 <iprintf>
 8005494:	f06f 030f 	mvn.w	r3, #15
 8005498:	e06a      	b.n	8005570 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	7d1b      	ldrb	r3, [r3, #20]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d009      	beq.n	80054b6 <tcp_bind+0x52>
 80054a2:	4b36      	ldr	r3, [pc, #216]	; (800557c <tcp_bind+0x118>)
 80054a4:	f240 22ab 	movw	r2, #683	; 0x2ab
 80054a8:	4937      	ldr	r1, [pc, #220]	; (8005588 <tcp_bind+0x124>)
 80054aa:	4836      	ldr	r0, [pc, #216]	; (8005584 <tcp_bind+0x120>)
 80054ac:	f008 feec 	bl	800e288 <iprintf>
 80054b0:	f06f 0305 	mvn.w	r3, #5
 80054b4:	e05c      	b.n	8005570 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80054b6:	88fb      	ldrh	r3, [r7, #6]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d109      	bne.n	80054d0 <tcp_bind+0x6c>
    port = tcp_new_port();
 80054bc:	f000 f9f0 	bl	80058a0 <tcp_new_port>
 80054c0:	4603      	mov	r3, r0
 80054c2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80054c4:	88fb      	ldrh	r3, [r7, #6]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d135      	bne.n	8005536 <tcp_bind+0xd2>
      return ERR_BUF;
 80054ca:	f06f 0301 	mvn.w	r3, #1
 80054ce:	e04f      	b.n	8005570 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80054d0:	2300      	movs	r3, #0
 80054d2:	61fb      	str	r3, [r7, #28]
 80054d4:	e02b      	b.n	800552e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80054d6:	4a2d      	ldr	r2, [pc, #180]	; (800558c <tcp_bind+0x128>)
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	61bb      	str	r3, [r7, #24]
 80054e2:	e01e      	b.n	8005522 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	8adb      	ldrh	r3, [r3, #22]
 80054e8:	88fa      	ldrh	r2, [r7, #6]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d116      	bne.n	800551c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80054ee:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d010      	beq.n	8005516 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00c      	beq.n	8005516 <tcp_bind+0xb2>
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d009      	beq.n	8005516 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d005      	beq.n	8005516 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8005512:	429a      	cmp	r2, r3
 8005514:	d102      	bne.n	800551c <tcp_bind+0xb8>
              return ERR_USE;
 8005516:	f06f 0307 	mvn.w	r3, #7
 800551a:	e029      	b.n	8005570 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	61bb      	str	r3, [r7, #24]
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d1dd      	bne.n	80054e4 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	3301      	adds	r3, #1
 800552c:	61fb      	str	r3, [r7, #28]
 800552e:	69fa      	ldr	r2, [r7, #28]
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	429a      	cmp	r2, r3
 8005534:	dbcf      	blt.n	80054d6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00c      	beq.n	8005556 <tcp_bind+0xf2>
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d008      	beq.n	8005556 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d002      	beq.n	8005550 <tcp_bind+0xec>
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	e000      	b.n	8005552 <tcp_bind+0xee>
 8005550:	2300      	movs	r3, #0
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	88fa      	ldrh	r2, [r7, #6]
 800555a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800555c:	4b0c      	ldr	r3, [pc, #48]	; (8005590 <tcp_bind+0x12c>)
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	60da      	str	r2, [r3, #12]
 8005564:	4a0a      	ldr	r2, [pc, #40]	; (8005590 <tcp_bind+0x12c>)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6013      	str	r3, [r2, #0]
 800556a:	f005 fcd1 	bl	800af10 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3720      	adds	r7, #32
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	08011c00 	.word	0x08011c00
 800557c:	0800fc0c 	.word	0x0800fc0c
 8005580:	0800fda0 	.word	0x0800fda0
 8005584:	0800fc50 	.word	0x0800fc50
 8005588:	0800fdb8 	.word	0x0800fdb8
 800558c:	08011bd8 	.word	0x08011bd8
 8005590:	20006898 	.word	0x20006898

08005594 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	4613      	mov	r3, r2
 80055a0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d106      	bne.n	80055b6 <tcp_accept_null+0x22>
 80055a8:	4b07      	ldr	r3, [pc, #28]	; (80055c8 <tcp_accept_null+0x34>)
 80055aa:	f240 320f 	movw	r2, #783	; 0x30f
 80055ae:	4907      	ldr	r1, [pc, #28]	; (80055cc <tcp_accept_null+0x38>)
 80055b0:	4807      	ldr	r0, [pc, #28]	; (80055d0 <tcp_accept_null+0x3c>)
 80055b2:	f008 fe69 	bl	800e288 <iprintf>

  tcp_abort(pcb);
 80055b6:	68b8      	ldr	r0, [r7, #8]
 80055b8:	f7ff ff48 	bl	800544c <tcp_abort>

  return ERR_ABRT;
 80055bc:	f06f 030c 	mvn.w	r3, #12
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	0800fc0c 	.word	0x0800fc0c
 80055cc:	0800fde0 	.word	0x0800fde0
 80055d0:	0800fc50 	.word	0x0800fc50

080055d4 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	460b      	mov	r3, r1
 80055de:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 80055e0:	78fb      	ldrb	r3, [r7, #3]
 80055e2:	2200      	movs	r2, #0
 80055e4:	4619      	mov	r1, r3
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f806 	bl	80055f8 <tcp_listen_with_backlog_and_err>
 80055ec:	4603      	mov	r3, r0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3708      	adds	r7, #8
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
	...

080055f8 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b088      	sub	sp, #32
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	460b      	mov	r3, r1
 8005602:	607a      	str	r2, [r7, #4]
 8005604:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8005606:	2300      	movs	r3, #0
 8005608:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d109      	bne.n	8005624 <tcp_listen_with_backlog_and_err+0x2c>
 8005610:	4b47      	ldr	r3, [pc, #284]	; (8005730 <tcp_listen_with_backlog_and_err+0x138>)
 8005612:	f240 3259 	movw	r2, #857	; 0x359
 8005616:	4947      	ldr	r1, [pc, #284]	; (8005734 <tcp_listen_with_backlog_and_err+0x13c>)
 8005618:	4847      	ldr	r0, [pc, #284]	; (8005738 <tcp_listen_with_backlog_and_err+0x140>)
 800561a:	f008 fe35 	bl	800e288 <iprintf>
 800561e:	23f0      	movs	r3, #240	; 0xf0
 8005620:	76fb      	strb	r3, [r7, #27]
 8005622:	e079      	b.n	8005718 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	7d1b      	ldrb	r3, [r3, #20]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d009      	beq.n	8005640 <tcp_listen_with_backlog_and_err+0x48>
 800562c:	4b40      	ldr	r3, [pc, #256]	; (8005730 <tcp_listen_with_backlog_and_err+0x138>)
 800562e:	f240 325a 	movw	r2, #858	; 0x35a
 8005632:	4942      	ldr	r1, [pc, #264]	; (800573c <tcp_listen_with_backlog_and_err+0x144>)
 8005634:	4840      	ldr	r0, [pc, #256]	; (8005738 <tcp_listen_with_backlog_and_err+0x140>)
 8005636:	f008 fe27 	bl	800e288 <iprintf>
 800563a:	23f1      	movs	r3, #241	; 0xf1
 800563c:	76fb      	strb	r3, [r7, #27]
 800563e:	e06b      	b.n	8005718 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	7d1b      	ldrb	r3, [r3, #20]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d104      	bne.n	8005652 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800564c:	23f7      	movs	r3, #247	; 0xf7
 800564e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8005650:	e062      	b.n	8005718 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8005652:	2002      	movs	r0, #2
 8005654:	f7fe fb24 	bl	8003ca0 <memp_malloc>
 8005658:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d102      	bne.n	8005666 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8005660:	23ff      	movs	r3, #255	; 0xff
 8005662:	76fb      	strb	r3, [r7, #27]
    goto done;
 8005664:	e058      	b.n	8005718 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	691a      	ldr	r2, [r3, #16]
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	8ada      	ldrh	r2, [r3, #22]
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	2201      	movs	r2, #1
 800567a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	7d5a      	ldrb	r2, [r3, #21]
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	7a5a      	ldrb	r2, [r3, #9]
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	2200      	movs	r2, #0
 8005690:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	7ada      	ldrb	r2, [r3, #11]
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	7a9a      	ldrb	r2, [r3, #10]
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	8adb      	ldrh	r3, [r3, #22]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d021      	beq.n	80056f6 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80056b2:	4b23      	ldr	r3, [pc, #140]	; (8005740 <tcp_listen_with_backlog_and_err+0x148>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d105      	bne.n	80056c8 <tcp_listen_with_backlog_and_err+0xd0>
 80056bc:	4b20      	ldr	r3, [pc, #128]	; (8005740 <tcp_listen_with_backlog_and_err+0x148>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	4a1f      	ldr	r2, [pc, #124]	; (8005740 <tcp_listen_with_backlog_and_err+0x148>)
 80056c4:	6013      	str	r3, [r2, #0]
 80056c6:	e013      	b.n	80056f0 <tcp_listen_with_backlog_and_err+0xf8>
 80056c8:	4b1d      	ldr	r3, [pc, #116]	; (8005740 <tcp_listen_with_backlog_and_err+0x148>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	617b      	str	r3, [r7, #20]
 80056ce:	e00c      	b.n	80056ea <tcp_listen_with_backlog_and_err+0xf2>
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d104      	bne.n	80056e4 <tcp_listen_with_backlog_and_err+0xec>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	68da      	ldr	r2, [r3, #12]
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	60da      	str	r2, [r3, #12]
 80056e2:	e005      	b.n	80056f0 <tcp_listen_with_backlog_and_err+0xf8>
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	617b      	str	r3, [r7, #20]
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1ef      	bne.n	80056d0 <tcp_listen_with_backlog_and_err+0xd8>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f7ff fbc8 	bl	8004e8c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	4a11      	ldr	r2, [pc, #68]	; (8005744 <tcp_listen_with_backlog_and_err+0x14c>)
 8005700:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8005702:	4b11      	ldr	r3, [pc, #68]	; (8005748 <tcp_listen_with_backlog_and_err+0x150>)
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	60da      	str	r2, [r3, #12]
 800570a:	4a0f      	ldr	r2, [pc, #60]	; (8005748 <tcp_listen_with_backlog_and_err+0x150>)
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	6013      	str	r3, [r2, #0]
 8005710:	f005 fbfe 	bl	800af10 <tcp_timer_needed>
  res = ERR_OK;
 8005714:	2300      	movs	r3, #0
 8005716:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d002      	beq.n	8005724 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	7efa      	ldrb	r2, [r7, #27]
 8005722:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8005724:	69fb      	ldr	r3, [r7, #28]
}
 8005726:	4618      	mov	r0, r3
 8005728:	3720      	adds	r7, #32
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	0800fc0c 	.word	0x0800fc0c
 8005734:	0800fe00 	.word	0x0800fe00
 8005738:	0800fc50 	.word	0x0800fc50
 800573c:	0800fe30 	.word	0x0800fe30
 8005740:	20006898 	.word	0x20006898
 8005744:	08005595 	.word	0x08005595
 8005748:	20006894 	.word	0x20006894

0800574c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d106      	bne.n	8005768 <tcp_update_rcv_ann_wnd+0x1c>
 800575a:	4b25      	ldr	r3, [pc, #148]	; (80057f0 <tcp_update_rcv_ann_wnd+0xa4>)
 800575c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8005760:	4924      	ldr	r1, [pc, #144]	; (80057f4 <tcp_update_rcv_ann_wnd+0xa8>)
 8005762:	4825      	ldr	r0, [pc, #148]	; (80057f8 <tcp_update_rcv_ann_wnd+0xac>)
 8005764:	f008 fd90 	bl	800e288 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8005770:	4413      	add	r3, r2
 8005772:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800577c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8005780:	bf28      	it	cs
 8005782:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8005786:	b292      	uxth	r2, r2
 8005788:	4413      	add	r3, r2
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	db08      	blt.n	80057a4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	e020      	b.n	80057e6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	dd03      	ble.n	80057ba <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80057b8:	e014      	b.n	80057e4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057cc:	d306      	bcc.n	80057dc <tcp_update_rcv_ann_wnd+0x90>
 80057ce:	4b08      	ldr	r3, [pc, #32]	; (80057f0 <tcp_update_rcv_ann_wnd+0xa4>)
 80057d0:	f240 32b6 	movw	r2, #950	; 0x3b6
 80057d4:	4909      	ldr	r1, [pc, #36]	; (80057fc <tcp_update_rcv_ann_wnd+0xb0>)
 80057d6:	4808      	ldr	r0, [pc, #32]	; (80057f8 <tcp_update_rcv_ann_wnd+0xac>)
 80057d8:	f008 fd56 	bl	800e288 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	b29a      	uxth	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80057e4:	2300      	movs	r3, #0
  }
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	0800fc0c 	.word	0x0800fc0c
 80057f4:	0800fe68 	.word	0x0800fe68
 80057f8:	0800fc50 	.word	0x0800fc50
 80057fc:	0800fe8c 	.word	0x0800fe8c

08005800 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	460b      	mov	r3, r1
 800580a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d107      	bne.n	8005822 <tcp_recved+0x22>
 8005812:	4b1f      	ldr	r3, [pc, #124]	; (8005890 <tcp_recved+0x90>)
 8005814:	f240 32cf 	movw	r2, #975	; 0x3cf
 8005818:	491e      	ldr	r1, [pc, #120]	; (8005894 <tcp_recved+0x94>)
 800581a:	481f      	ldr	r0, [pc, #124]	; (8005898 <tcp_recved+0x98>)
 800581c:	f008 fd34 	bl	800e288 <iprintf>
 8005820:	e032      	b.n	8005888 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	7d1b      	ldrb	r3, [r3, #20]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d106      	bne.n	8005838 <tcp_recved+0x38>
 800582a:	4b19      	ldr	r3, [pc, #100]	; (8005890 <tcp_recved+0x90>)
 800582c:	f240 32d3 	movw	r2, #979	; 0x3d3
 8005830:	491a      	ldr	r1, [pc, #104]	; (800589c <tcp_recved+0x9c>)
 8005832:	4819      	ldr	r0, [pc, #100]	; (8005898 <tcp_recved+0x98>)
 8005834:	f008 fd28 	bl	800e288 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800583c:	887b      	ldrh	r3, [r7, #2]
 800583e:	4413      	add	r3, r2
 8005840:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8005842:	89fb      	ldrh	r3, [r7, #14]
 8005844:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005848:	d804      	bhi.n	8005854 <tcp_recved+0x54>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800584e:	89fa      	ldrh	r2, [r7, #14]
 8005850:	429a      	cmp	r2, r3
 8005852:	d204      	bcs.n	800585e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800585a:	851a      	strh	r2, [r3, #40]	; 0x28
 800585c:	e002      	b.n	8005864 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	89fa      	ldrh	r2, [r7, #14]
 8005862:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f7ff ff71 	bl	800574c <tcp_update_rcv_ann_wnd>
 800586a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8005872:	d309      	bcc.n	8005888 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	8b5b      	ldrh	r3, [r3, #26]
 8005878:	f043 0302 	orr.w	r3, r3, #2
 800587c:	b29a      	uxth	r2, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f004 fbbe 	bl	800a004 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8005888:	3710      	adds	r7, #16
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	0800fc0c 	.word	0x0800fc0c
 8005894:	0800fea8 	.word	0x0800fea8
 8005898:	0800fc50 	.word	0x0800fc50
 800589c:	0800fec0 	.word	0x0800fec0

080058a0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80058a6:	2300      	movs	r3, #0
 80058a8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80058aa:	4b1e      	ldr	r3, [pc, #120]	; (8005924 <tcp_new_port+0x84>)
 80058ac:	881b      	ldrh	r3, [r3, #0]
 80058ae:	3301      	adds	r3, #1
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	4b1c      	ldr	r3, [pc, #112]	; (8005924 <tcp_new_port+0x84>)
 80058b4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80058b6:	4b1b      	ldr	r3, [pc, #108]	; (8005924 <tcp_new_port+0x84>)
 80058b8:	881b      	ldrh	r3, [r3, #0]
 80058ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058be:	4293      	cmp	r3, r2
 80058c0:	d103      	bne.n	80058ca <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80058c2:	4b18      	ldr	r3, [pc, #96]	; (8005924 <tcp_new_port+0x84>)
 80058c4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80058c8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80058ca:	2300      	movs	r3, #0
 80058cc:	71fb      	strb	r3, [r7, #7]
 80058ce:	e01e      	b.n	800590e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80058d0:	79fb      	ldrb	r3, [r7, #7]
 80058d2:	4a15      	ldr	r2, [pc, #84]	; (8005928 <tcp_new_port+0x88>)
 80058d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	603b      	str	r3, [r7, #0]
 80058dc:	e011      	b.n	8005902 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	8ada      	ldrh	r2, [r3, #22]
 80058e2:	4b10      	ldr	r3, [pc, #64]	; (8005924 <tcp_new_port+0x84>)
 80058e4:	881b      	ldrh	r3, [r3, #0]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d108      	bne.n	80058fc <tcp_new_port+0x5c>
        n++;
 80058ea:	88bb      	ldrh	r3, [r7, #4]
 80058ec:	3301      	adds	r3, #1
 80058ee:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80058f0:	88bb      	ldrh	r3, [r7, #4]
 80058f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058f6:	d3d8      	bcc.n	80058aa <tcp_new_port+0xa>
          return 0;
 80058f8:	2300      	movs	r3, #0
 80058fa:	e00d      	b.n	8005918 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	603b      	str	r3, [r7, #0]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1ea      	bne.n	80058de <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8005908:	79fb      	ldrb	r3, [r7, #7]
 800590a:	3301      	adds	r3, #1
 800590c:	71fb      	strb	r3, [r7, #7]
 800590e:	79fb      	ldrb	r3, [r7, #7]
 8005910:	2b03      	cmp	r3, #3
 8005912:	d9dd      	bls.n	80058d0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8005914:	4b03      	ldr	r3, [pc, #12]	; (8005924 <tcp_new_port+0x84>)
 8005916:	881b      	ldrh	r3, [r3, #0]
}
 8005918:	4618      	mov	r0, r3
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr
 8005924:	2000000a 	.word	0x2000000a
 8005928:	08011bd8 	.word	0x08011bd8

0800592c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800592c:	b5b0      	push	{r4, r5, r7, lr}
 800592e:	b090      	sub	sp, #64	; 0x40
 8005930:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8005932:	2300      	movs	r3, #0
 8005934:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8005938:	4b94      	ldr	r3, [pc, #592]	; (8005b8c <tcp_slowtmr+0x260>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	3301      	adds	r3, #1
 800593e:	4a93      	ldr	r2, [pc, #588]	; (8005b8c <tcp_slowtmr+0x260>)
 8005940:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8005942:	4b93      	ldr	r3, [pc, #588]	; (8005b90 <tcp_slowtmr+0x264>)
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	3301      	adds	r3, #1
 8005948:	b2da      	uxtb	r2, r3
 800594a:	4b91      	ldr	r3, [pc, #580]	; (8005b90 <tcp_slowtmr+0x264>)
 800594c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800594e:	2300      	movs	r3, #0
 8005950:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8005952:	4b90      	ldr	r3, [pc, #576]	; (8005b94 <tcp_slowtmr+0x268>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8005958:	e29f      	b.n	8005e9a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800595a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800595c:	7d1b      	ldrb	r3, [r3, #20]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d106      	bne.n	8005970 <tcp_slowtmr+0x44>
 8005962:	4b8d      	ldr	r3, [pc, #564]	; (8005b98 <tcp_slowtmr+0x26c>)
 8005964:	f240 42be 	movw	r2, #1214	; 0x4be
 8005968:	498c      	ldr	r1, [pc, #560]	; (8005b9c <tcp_slowtmr+0x270>)
 800596a:	488d      	ldr	r0, [pc, #564]	; (8005ba0 <tcp_slowtmr+0x274>)
 800596c:	f008 fc8c 	bl	800e288 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8005970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005972:	7d1b      	ldrb	r3, [r3, #20]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d106      	bne.n	8005986 <tcp_slowtmr+0x5a>
 8005978:	4b87      	ldr	r3, [pc, #540]	; (8005b98 <tcp_slowtmr+0x26c>)
 800597a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800597e:	4989      	ldr	r1, [pc, #548]	; (8005ba4 <tcp_slowtmr+0x278>)
 8005980:	4887      	ldr	r0, [pc, #540]	; (8005ba0 <tcp_slowtmr+0x274>)
 8005982:	f008 fc81 	bl	800e288 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8005986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005988:	7d1b      	ldrb	r3, [r3, #20]
 800598a:	2b0a      	cmp	r3, #10
 800598c:	d106      	bne.n	800599c <tcp_slowtmr+0x70>
 800598e:	4b82      	ldr	r3, [pc, #520]	; (8005b98 <tcp_slowtmr+0x26c>)
 8005990:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8005994:	4984      	ldr	r1, [pc, #528]	; (8005ba8 <tcp_slowtmr+0x27c>)
 8005996:	4882      	ldr	r0, [pc, #520]	; (8005ba0 <tcp_slowtmr+0x274>)
 8005998:	f008 fc76 	bl	800e288 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800599c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800599e:	7f9a      	ldrb	r2, [r3, #30]
 80059a0:	4b7b      	ldr	r3, [pc, #492]	; (8005b90 <tcp_slowtmr+0x264>)
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d105      	bne.n	80059b4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80059a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059aa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80059ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80059b2:	e272      	b.n	8005e9a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 80059b4:	4b76      	ldr	r3, [pc, #472]	; (8005b90 <tcp_slowtmr+0x264>)
 80059b6:	781a      	ldrb	r2, [r3, #0]
 80059b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ba:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80059bc:	2300      	movs	r3, #0
 80059be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80059c2:	2300      	movs	r3, #0
 80059c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80059c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ca:	7d1b      	ldrb	r3, [r3, #20]
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d10a      	bne.n	80059e6 <tcp_slowtmr+0xba>
 80059d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80059d6:	2b05      	cmp	r3, #5
 80059d8:	d905      	bls.n	80059e6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 80059da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059de:	3301      	adds	r3, #1
 80059e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80059e4:	e11e      	b.n	8005c24 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80059e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80059ec:	2b0b      	cmp	r3, #11
 80059ee:	d905      	bls.n	80059fc <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80059f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059f4:	3301      	adds	r3, #1
 80059f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80059fa:	e113      	b.n	8005c24 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80059fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059fe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d075      	beq.n	8005af2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8005a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d006      	beq.n	8005a1c <tcp_slowtmr+0xf0>
 8005a0e:	4b62      	ldr	r3, [pc, #392]	; (8005b98 <tcp_slowtmr+0x26c>)
 8005a10:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8005a14:	4965      	ldr	r1, [pc, #404]	; (8005bac <tcp_slowtmr+0x280>)
 8005a16:	4862      	ldr	r0, [pc, #392]	; (8005ba0 <tcp_slowtmr+0x274>)
 8005a18:	f008 fc36 	bl	800e288 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8005a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d106      	bne.n	8005a32 <tcp_slowtmr+0x106>
 8005a24:	4b5c      	ldr	r3, [pc, #368]	; (8005b98 <tcp_slowtmr+0x26c>)
 8005a26:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8005a2a:	4961      	ldr	r1, [pc, #388]	; (8005bb0 <tcp_slowtmr+0x284>)
 8005a2c:	485c      	ldr	r0, [pc, #368]	; (8005ba0 <tcp_slowtmr+0x274>)
 8005a2e:	f008 fc2b 	bl	800e288 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8005a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a34:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8005a38:	2b0b      	cmp	r3, #11
 8005a3a:	d905      	bls.n	8005a48 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8005a3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a40:	3301      	adds	r3, #1
 8005a42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005a46:	e0ed      	b.n	8005c24 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8005a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	4a58      	ldr	r2, [pc, #352]	; (8005bb4 <tcp_slowtmr+0x288>)
 8005a52:	5cd3      	ldrb	r3, [r2, r3]
 8005a54:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8005a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a58:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005a5c:	7c7a      	ldrb	r2, [r7, #17]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d907      	bls.n	8005a72 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8005a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a64:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005a68:	3301      	adds	r3, #1
 8005a6a:	b2da      	uxtb	r2, r3
 8005a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a6e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8005a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a74:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005a78:	7c7a      	ldrb	r2, [r7, #17]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	f200 80d2 	bhi.w	8005c24 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8005a80:	2301      	movs	r3, #1
 8005a82:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8005a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d108      	bne.n	8005aa0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8005a8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a90:	f005 f970 	bl	800ad74 <tcp_zero_window_probe>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d014      	beq.n	8005ac4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	623b      	str	r3, [r7, #32]
 8005a9e:	e011      	b.n	8005ac4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8005aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005aaa:	f004 f825 	bl	8009af8 <tcp_split_unsent_seg>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d107      	bne.n	8005ac4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8005ab4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ab6:	f004 faa5 	bl	800a004 <tcp_output>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d101      	bne.n	8005ac4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8005ac4:	6a3b      	ldr	r3, [r7, #32]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f000 80ac 	beq.w	8005c24 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8005acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8005ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005ada:	2b06      	cmp	r3, #6
 8005adc:	f200 80a2 	bhi.w	8005c24 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8005ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	b2da      	uxtb	r2, r3
 8005aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aec:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8005af0:	e098      	b.n	8005c24 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8005af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	db0f      	blt.n	8005b1c <tcp_slowtmr+0x1f0>
 8005afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afe:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005b02:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d008      	beq.n	8005b1c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8005b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b0c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	3301      	adds	r3, #1
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	b21a      	sxth	r2, r3
 8005b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b1a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8005b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b1e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8005b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b24:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	db7b      	blt.n	8005c24 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8005b2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b2e:	f004 fd61 	bl	800a5f4 <tcp_rexmit_rto_prepare>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d007      	beq.n	8005b48 <tcp_slowtmr+0x21c>
 8005b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d171      	bne.n	8005c24 <tcp_slowtmr+0x2f8>
 8005b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d06d      	beq.n	8005c24 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8005b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b4a:	7d1b      	ldrb	r3, [r3, #20]
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d03a      	beq.n	8005bc6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8005b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b56:	2b0c      	cmp	r3, #12
 8005b58:	bf28      	it	cs
 8005b5a:	230c      	movcs	r3, #12
 8005b5c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8005b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b60:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8005b64:	10db      	asrs	r3, r3, #3
 8005b66:	b21b      	sxth	r3, r3
 8005b68:	461a      	mov	r2, r3
 8005b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8005b70:	4413      	add	r3, r2
 8005b72:	7efa      	ldrb	r2, [r7, #27]
 8005b74:	4910      	ldr	r1, [pc, #64]	; (8005bb8 <tcp_slowtmr+0x28c>)
 8005b76:	5c8a      	ldrb	r2, [r1, r2]
 8005b78:	4093      	lsls	r3, r2
 8005b7a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8005b82:	4293      	cmp	r3, r2
 8005b84:	dc1a      	bgt.n	8005bbc <tcp_slowtmr+0x290>
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	b21a      	sxth	r2, r3
 8005b8a:	e019      	b.n	8005bc0 <tcp_slowtmr+0x294>
 8005b8c:	20006890 	.word	0x20006890
 8005b90:	200000ce 	.word	0x200000ce
 8005b94:	2000688c 	.word	0x2000688c
 8005b98:	0800fc0c 	.word	0x0800fc0c
 8005b9c:	0800ff50 	.word	0x0800ff50
 8005ba0:	0800fc50 	.word	0x0800fc50
 8005ba4:	0800ff7c 	.word	0x0800ff7c
 8005ba8:	0800ffa8 	.word	0x0800ffa8
 8005bac:	0800ffd8 	.word	0x0800ffd8
 8005bb0:	0801000c 	.word	0x0801000c
 8005bb4:	08011bd0 	.word	0x08011bd0
 8005bb8:	08011bc0 	.word	0x08011bc0
 8005bbc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8005bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc8:	2200      	movs	r2, #0
 8005bca:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8005bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8005bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	bf28      	it	cs
 8005bdc:	4613      	movcs	r3, r2
 8005bde:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8005be0:	8a7b      	ldrh	r3, [r7, #18]
 8005be2:	085b      	lsrs	r3, r3, #1
 8005be4:	b29a      	uxth	r2, r3
 8005be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8005bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bee:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8005bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005bf6:	005b      	lsls	r3, r3, #1
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d206      	bcs.n	8005c0c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8005bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005c02:	005b      	lsls	r3, r3, #1
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c08:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8005c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8005c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c12:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8005c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8005c1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c20:	f004 fd58 	bl	800a6d4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8005c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c26:	7d1b      	ldrb	r3, [r3, #20]
 8005c28:	2b06      	cmp	r3, #6
 8005c2a:	d111      	bne.n	8005c50 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8005c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2e:	8b5b      	ldrh	r3, [r3, #26]
 8005c30:	f003 0310 	and.w	r3, r3, #16
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00b      	beq.n	8005c50 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005c38:	4b9d      	ldr	r3, [pc, #628]	; (8005eb0 <tcp_slowtmr+0x584>)
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3e:	6a1b      	ldr	r3, [r3, #32]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	2b28      	cmp	r3, #40	; 0x28
 8005c44:	d904      	bls.n	8005c50 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8005c46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c52:	7a5b      	ldrb	r3, [r3, #9]
 8005c54:	f003 0308 	and.w	r3, r3, #8
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d04c      	beq.n	8005cf6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8005c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c5e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005c60:	2b04      	cmp	r3, #4
 8005c62:	d003      	beq.n	8005c6c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8005c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c66:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8005c68:	2b07      	cmp	r3, #7
 8005c6a:	d144      	bne.n	8005cf6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005c6c:	4b90      	ldr	r3, [pc, #576]	; (8005eb0 <tcp_slowtmr+0x584>)
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c72:	6a1b      	ldr	r3, [r3, #32]
 8005c74:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8005c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c7c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8005c80:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8005c84:	498b      	ldr	r1, [pc, #556]	; (8005eb4 <tcp_slowtmr+0x588>)
 8005c86:	fba1 1303 	umull	r1, r3, r1, r3
 8005c8a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d90a      	bls.n	8005ca6 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8005c90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c94:	3301      	adds	r3, #1
 8005c96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8005c9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005ca4:	e027      	b.n	8005cf6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005ca6:	4b82      	ldr	r3, [pc, #520]	; (8005eb0 <tcp_slowtmr+0x584>)
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8005cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8005cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	4b7e      	ldr	r3, [pc, #504]	; (8005eb8 <tcp_slowtmr+0x58c>)
 8005cc0:	fb03 f300 	mul.w	r3, r3, r0
 8005cc4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8005cc6:	497b      	ldr	r1, [pc, #492]	; (8005eb4 <tcp_slowtmr+0x588>)
 8005cc8:	fba1 1303 	umull	r1, r3, r1, r3
 8005ccc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d911      	bls.n	8005cf6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8005cd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005cd4:	f005 f80e 	bl	800acf4 <tcp_keepalive>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8005cde:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d107      	bne.n	8005cf6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8005ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8005cec:	3301      	adds	r3, #1
 8005cee:	b2da      	uxtb	r2, r3
 8005cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8005cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d011      	beq.n	8005d22 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8005cfe:	4b6c      	ldr	r3, [pc, #432]	; (8005eb0 <tcp_slowtmr+0x584>)
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	1ad2      	subs	r2, r2, r3
 8005d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005d0e:	4619      	mov	r1, r3
 8005d10:	460b      	mov	r3, r1
 8005d12:	005b      	lsls	r3, r3, #1
 8005d14:	440b      	add	r3, r1
 8005d16:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d302      	bcc.n	8005d22 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8005d1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d1e:	f000 febd 	bl	8006a9c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8005d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d24:	7d1b      	ldrb	r3, [r3, #20]
 8005d26:	2b03      	cmp	r3, #3
 8005d28:	d10b      	bne.n	8005d42 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005d2a:	4b61      	ldr	r3, [pc, #388]	; (8005eb0 <tcp_slowtmr+0x584>)
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	2b28      	cmp	r3, #40	; 0x28
 8005d36:	d904      	bls.n	8005d42 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8005d38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8005d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d44:	7d1b      	ldrb	r3, [r3, #20]
 8005d46:	2b09      	cmp	r3, #9
 8005d48:	d10b      	bne.n	8005d62 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005d4a:	4b59      	ldr	r3, [pc, #356]	; (8005eb0 <tcp_slowtmr+0x584>)
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	2bf0      	cmp	r3, #240	; 0xf0
 8005d56:	d904      	bls.n	8005d62 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8005d58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8005d62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d060      	beq.n	8005e2c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8005d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d70:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8005d72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d74:	f000 fcde 	bl	8006734 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8005d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d010      	beq.n	8005da0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8005d7e:	4b4f      	ldr	r3, [pc, #316]	; (8005ebc <tcp_slowtmr+0x590>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d106      	bne.n	8005d96 <tcp_slowtmr+0x46a>
 8005d88:	4b4d      	ldr	r3, [pc, #308]	; (8005ec0 <tcp_slowtmr+0x594>)
 8005d8a:	f240 526d 	movw	r2, #1389	; 0x56d
 8005d8e:	494d      	ldr	r1, [pc, #308]	; (8005ec4 <tcp_slowtmr+0x598>)
 8005d90:	484d      	ldr	r0, [pc, #308]	; (8005ec8 <tcp_slowtmr+0x59c>)
 8005d92:	f008 fa79 	bl	800e288 <iprintf>
        prev->next = pcb->next;
 8005d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d98:	68da      	ldr	r2, [r3, #12]
 8005d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9c:	60da      	str	r2, [r3, #12]
 8005d9e:	e00f      	b.n	8005dc0 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8005da0:	4b46      	ldr	r3, [pc, #280]	; (8005ebc <tcp_slowtmr+0x590>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d006      	beq.n	8005db8 <tcp_slowtmr+0x48c>
 8005daa:	4b45      	ldr	r3, [pc, #276]	; (8005ec0 <tcp_slowtmr+0x594>)
 8005dac:	f240 5271 	movw	r2, #1393	; 0x571
 8005db0:	4946      	ldr	r1, [pc, #280]	; (8005ecc <tcp_slowtmr+0x5a0>)
 8005db2:	4845      	ldr	r0, [pc, #276]	; (8005ec8 <tcp_slowtmr+0x59c>)
 8005db4:	f008 fa68 	bl	800e288 <iprintf>
        tcp_active_pcbs = pcb->next;
 8005db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	4a3f      	ldr	r2, [pc, #252]	; (8005ebc <tcp_slowtmr+0x590>)
 8005dbe:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8005dc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d013      	beq.n	8005df0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dca:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dce:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005dd0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8005dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd4:	3304      	adds	r3, #4
 8005dd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dd8:	8ad2      	ldrh	r2, [r2, #22]
 8005dda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ddc:	8b09      	ldrh	r1, [r1, #24]
 8005dde:	9102      	str	r1, [sp, #8]
 8005de0:	9201      	str	r2, [sp, #4]
 8005de2:	9300      	str	r3, [sp, #0]
 8005de4:	462b      	mov	r3, r5
 8005de6:	4622      	mov	r2, r4
 8005de8:	4601      	mov	r1, r0
 8005dea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005dec:	f004 fece 	bl	800ab8c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8005df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8005df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df8:	7d1b      	ldrb	r3, [r3, #20]
 8005dfa:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8005dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dfe:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8005e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8005e06:	6838      	ldr	r0, [r7, #0]
 8005e08:	f7ff f840 	bl	8004e8c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8005e0c:	4b30      	ldr	r3, [pc, #192]	; (8005ed0 <tcp_slowtmr+0x5a4>)
 8005e0e:	2200      	movs	r2, #0
 8005e10:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d004      	beq.n	8005e22 <tcp_slowtmr+0x4f6>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f06f 010c 	mvn.w	r1, #12
 8005e1e:	68b8      	ldr	r0, [r7, #8]
 8005e20:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8005e22:	4b2b      	ldr	r3, [pc, #172]	; (8005ed0 <tcp_slowtmr+0x5a4>)
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d037      	beq.n	8005e9a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8005e2a:	e590      	b.n	800594e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8005e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e2e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8005e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8005e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e38:	7f1b      	ldrb	r3, [r3, #28]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	b2da      	uxtb	r2, r3
 8005e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e40:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8005e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e44:	7f1a      	ldrb	r2, [r3, #28]
 8005e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e48:	7f5b      	ldrb	r3, [r3, #29]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d325      	bcc.n	8005e9a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8005e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e50:	2200      	movs	r2, #0
 8005e52:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8005e54:	4b1e      	ldr	r3, [pc, #120]	; (8005ed0 <tcp_slowtmr+0x5a4>)
 8005e56:	2200      	movs	r2, #0
 8005e58:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8005e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00b      	beq.n	8005e7c <tcp_slowtmr+0x550>
 8005e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e6c:	6912      	ldr	r2, [r2, #16]
 8005e6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e70:	4610      	mov	r0, r2
 8005e72:	4798      	blx	r3
 8005e74:	4603      	mov	r3, r0
 8005e76:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8005e7a:	e002      	b.n	8005e82 <tcp_slowtmr+0x556>
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8005e82:	4b13      	ldr	r3, [pc, #76]	; (8005ed0 <tcp_slowtmr+0x5a4>)
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d000      	beq.n	8005e8c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8005e8a:	e560      	b.n	800594e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8005e8c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d102      	bne.n	8005e9a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8005e94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e96:	f004 f8b5 	bl	800a004 <tcp_output>
  while (pcb != NULL) {
 8005e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f47f ad5c 	bne.w	800595a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8005ea6:	4b0b      	ldr	r3, [pc, #44]	; (8005ed4 <tcp_slowtmr+0x5a8>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8005eac:	e067      	b.n	8005f7e <tcp_slowtmr+0x652>
 8005eae:	bf00      	nop
 8005eb0:	20006890 	.word	0x20006890
 8005eb4:	10624dd3 	.word	0x10624dd3
 8005eb8:	000124f8 	.word	0x000124f8
 8005ebc:	2000688c 	.word	0x2000688c
 8005ec0:	0800fc0c 	.word	0x0800fc0c
 8005ec4:	08010044 	.word	0x08010044
 8005ec8:	0800fc50 	.word	0x0800fc50
 8005ecc:	08010070 	.word	0x08010070
 8005ed0:	20006888 	.word	0x20006888
 8005ed4:	2000689c 	.word	0x2000689c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8005ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eda:	7d1b      	ldrb	r3, [r3, #20]
 8005edc:	2b0a      	cmp	r3, #10
 8005ede:	d006      	beq.n	8005eee <tcp_slowtmr+0x5c2>
 8005ee0:	4b2a      	ldr	r3, [pc, #168]	; (8005f8c <tcp_slowtmr+0x660>)
 8005ee2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8005ee6:	492a      	ldr	r1, [pc, #168]	; (8005f90 <tcp_slowtmr+0x664>)
 8005ee8:	482a      	ldr	r0, [pc, #168]	; (8005f94 <tcp_slowtmr+0x668>)
 8005eea:	f008 f9cd 	bl	800e288 <iprintf>
    pcb_remove = 0;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005ef4:	4b28      	ldr	r3, [pc, #160]	; (8005f98 <tcp_slowtmr+0x66c>)
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efa:	6a1b      	ldr	r3, [r3, #32]
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	2bf0      	cmp	r3, #240	; 0xf0
 8005f00:	d904      	bls.n	8005f0c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8005f02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f06:	3301      	adds	r3, #1
 8005f08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8005f0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d02f      	beq.n	8005f74 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8005f14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f16:	f000 fc0d 	bl	8006734 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8005f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d010      	beq.n	8005f42 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8005f20:	4b1e      	ldr	r3, [pc, #120]	; (8005f9c <tcp_slowtmr+0x670>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d106      	bne.n	8005f38 <tcp_slowtmr+0x60c>
 8005f2a:	4b18      	ldr	r3, [pc, #96]	; (8005f8c <tcp_slowtmr+0x660>)
 8005f2c:	f240 52af 	movw	r2, #1455	; 0x5af
 8005f30:	491b      	ldr	r1, [pc, #108]	; (8005fa0 <tcp_slowtmr+0x674>)
 8005f32:	4818      	ldr	r0, [pc, #96]	; (8005f94 <tcp_slowtmr+0x668>)
 8005f34:	f008 f9a8 	bl	800e288 <iprintf>
        prev->next = pcb->next;
 8005f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f3a:	68da      	ldr	r2, [r3, #12]
 8005f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f3e:	60da      	str	r2, [r3, #12]
 8005f40:	e00f      	b.n	8005f62 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8005f42:	4b16      	ldr	r3, [pc, #88]	; (8005f9c <tcp_slowtmr+0x670>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d006      	beq.n	8005f5a <tcp_slowtmr+0x62e>
 8005f4c:	4b0f      	ldr	r3, [pc, #60]	; (8005f8c <tcp_slowtmr+0x660>)
 8005f4e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8005f52:	4914      	ldr	r1, [pc, #80]	; (8005fa4 <tcp_slowtmr+0x678>)
 8005f54:	480f      	ldr	r0, [pc, #60]	; (8005f94 <tcp_slowtmr+0x668>)
 8005f56:	f008 f997 	bl	800e288 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8005f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	4a0f      	ldr	r2, [pc, #60]	; (8005f9c <tcp_slowtmr+0x670>)
 8005f60:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8005f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f64:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8005f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8005f6c:	69f8      	ldr	r0, [r7, #28]
 8005f6e:	f7fe ff8d 	bl	8004e8c <tcp_free>
 8005f72:	e004      	b.n	8005f7e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8005f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f76:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8005f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8005f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1a9      	bne.n	8005ed8 <tcp_slowtmr+0x5ac>
    }
  }
}
 8005f84:	bf00      	nop
 8005f86:	3730      	adds	r7, #48	; 0x30
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bdb0      	pop	{r4, r5, r7, pc}
 8005f8c:	0800fc0c 	.word	0x0800fc0c
 8005f90:	0801009c 	.word	0x0801009c
 8005f94:	0800fc50 	.word	0x0800fc50
 8005f98:	20006890 	.word	0x20006890
 8005f9c:	2000689c 	.word	0x2000689c
 8005fa0:	080100cc 	.word	0x080100cc
 8005fa4:	080100f4 	.word	0x080100f4

08005fa8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8005fae:	4b2d      	ldr	r3, [pc, #180]	; (8006064 <tcp_fasttmr+0xbc>)
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	b2da      	uxtb	r2, r3
 8005fb6:	4b2b      	ldr	r3, [pc, #172]	; (8006064 <tcp_fasttmr+0xbc>)
 8005fb8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8005fba:	4b2b      	ldr	r3, [pc, #172]	; (8006068 <tcp_fasttmr+0xc0>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8005fc0:	e048      	b.n	8006054 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	7f9a      	ldrb	r2, [r3, #30]
 8005fc6:	4b27      	ldr	r3, [pc, #156]	; (8006064 <tcp_fasttmr+0xbc>)
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d03f      	beq.n	800604e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8005fce:	4b25      	ldr	r3, [pc, #148]	; (8006064 <tcp_fasttmr+0xbc>)
 8005fd0:	781a      	ldrb	r2, [r3, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	8b5b      	ldrh	r3, [r3, #26]
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d010      	beq.n	8006004 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	8b5b      	ldrh	r3, [r3, #26]
 8005fe6:	f043 0302 	orr.w	r3, r3, #2
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f004 f807 	bl	800a004 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	8b5b      	ldrh	r3, [r3, #26]
 8005ffa:	f023 0303 	bic.w	r3, r3, #3
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	8b5b      	ldrh	r3, [r3, #26]
 8006008:	f003 0308 	and.w	r3, r3, #8
 800600c:	2b00      	cmp	r3, #0
 800600e:	d009      	beq.n	8006024 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	8b5b      	ldrh	r3, [r3, #26]
 8006014:	f023 0308 	bic.w	r3, r3, #8
 8006018:	b29a      	uxth	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f7ff f8c4 	bl	80051ac <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00a      	beq.n	8006048 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8006032:	4b0e      	ldr	r3, [pc, #56]	; (800606c <tcp_fasttmr+0xc4>)
 8006034:	2200      	movs	r2, #0
 8006036:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 f819 	bl	8006070 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800603e:	4b0b      	ldr	r3, [pc, #44]	; (800606c <tcp_fasttmr+0xc4>)
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d000      	beq.n	8006048 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8006046:	e7b8      	b.n	8005fba <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	607b      	str	r3, [r7, #4]
 800604c:	e002      	b.n	8006054 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d1b3      	bne.n	8005fc2 <tcp_fasttmr+0x1a>
    }
  }
}
 800605a:	bf00      	nop
 800605c:	3708      	adds	r7, #8
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	200000ce 	.word	0x200000ce
 8006068:	2000688c 	.word	0x2000688c
 800606c:	20006888 	.word	0x20006888

08006070 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006070:	b590      	push	{r4, r7, lr}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d109      	bne.n	8006092 <tcp_process_refused_data+0x22>
 800607e:	4b37      	ldr	r3, [pc, #220]	; (800615c <tcp_process_refused_data+0xec>)
 8006080:	f240 6209 	movw	r2, #1545	; 0x609
 8006084:	4936      	ldr	r1, [pc, #216]	; (8006160 <tcp_process_refused_data+0xf0>)
 8006086:	4837      	ldr	r0, [pc, #220]	; (8006164 <tcp_process_refused_data+0xf4>)
 8006088:	f008 f8fe 	bl	800e288 <iprintf>
 800608c:	f06f 030f 	mvn.w	r3, #15
 8006090:	e060      	b.n	8006154 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006096:	7b5b      	ldrb	r3, [r3, #13]
 8006098:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800609e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00b      	beq.n	80060c8 <tcp_process_refused_data+0x58>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6918      	ldr	r0, [r3, #16]
 80060ba:	2300      	movs	r3, #0
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	6879      	ldr	r1, [r7, #4]
 80060c0:	47a0      	blx	r4
 80060c2:	4603      	mov	r3, r0
 80060c4:	73fb      	strb	r3, [r7, #15]
 80060c6:	e007      	b.n	80060d8 <tcp_process_refused_data+0x68>
 80060c8:	2300      	movs	r3, #0
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	6879      	ldr	r1, [r7, #4]
 80060ce:	2000      	movs	r0, #0
 80060d0:	f000 f8c0 	bl	8006254 <tcp_recv_null>
 80060d4:	4603      	mov	r3, r0
 80060d6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80060d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d12a      	bne.n	8006136 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80060e0:	7bbb      	ldrb	r3, [r7, #14]
 80060e2:	f003 0320 	and.w	r3, r3, #32
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d033      	beq.n	8006152 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ee:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80060f2:	d005      	beq.n	8006100 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060f8:	3301      	adds	r3, #1
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00b      	beq.n	8006122 <tcp_process_refused_data+0xb2>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6918      	ldr	r0, [r3, #16]
 8006114:	2300      	movs	r3, #0
 8006116:	2200      	movs	r2, #0
 8006118:	6879      	ldr	r1, [r7, #4]
 800611a:	47a0      	blx	r4
 800611c:	4603      	mov	r3, r0
 800611e:	73fb      	strb	r3, [r7, #15]
 8006120:	e001      	b.n	8006126 <tcp_process_refused_data+0xb6>
 8006122:	2300      	movs	r3, #0
 8006124:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8006126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800612a:	f113 0f0d 	cmn.w	r3, #13
 800612e:	d110      	bne.n	8006152 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8006130:	f06f 030c 	mvn.w	r3, #12
 8006134:	e00e      	b.n	8006154 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8006136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800613a:	f113 0f0d 	cmn.w	r3, #13
 800613e:	d102      	bne.n	8006146 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8006140:	f06f 030c 	mvn.w	r3, #12
 8006144:	e006      	b.n	8006154 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	68ba      	ldr	r2, [r7, #8]
 800614a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800614c:	f06f 0304 	mvn.w	r3, #4
 8006150:	e000      	b.n	8006154 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	bd90      	pop	{r4, r7, pc}
 800615c:	0800fc0c 	.word	0x0800fc0c
 8006160:	0801011c 	.word	0x0801011c
 8006164:	0800fc50 	.word	0x0800fc50

08006168 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8006170:	e007      	b.n	8006182 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 f809 	bl	8006190 <tcp_seg_free>
    seg = next;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d1f4      	bne.n	8006172 <tcp_segs_free+0xa>
  }
}
 8006188:	bf00      	nop
 800618a:	3710      	adds	r7, #16
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00c      	beq.n	80061b8 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d004      	beq.n	80061b0 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7fe fbbe 	bl	800492c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80061b0:	6879      	ldr	r1, [r7, #4]
 80061b2:	2003      	movs	r0, #3
 80061b4:	f7fd fdc0 	bl	8003d38 <memp_free>
  }
}
 80061b8:	bf00      	nop
 80061ba:	3708      	adds	r7, #8
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	460b      	mov	r3, r1
 80061ca:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d107      	bne.n	80061e2 <tcp_setprio+0x22>
 80061d2:	4b07      	ldr	r3, [pc, #28]	; (80061f0 <tcp_setprio+0x30>)
 80061d4:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 80061d8:	4906      	ldr	r1, [pc, #24]	; (80061f4 <tcp_setprio+0x34>)
 80061da:	4807      	ldr	r0, [pc, #28]	; (80061f8 <tcp_setprio+0x38>)
 80061dc:	f008 f854 	bl	800e288 <iprintf>
 80061e0:	e002      	b.n	80061e8 <tcp_setprio+0x28>

  pcb->prio = prio;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	78fa      	ldrb	r2, [r7, #3]
 80061e6:	755a      	strb	r2, [r3, #21]
}
 80061e8:	3708      	adds	r7, #8
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	0800fc0c 	.word	0x0800fc0c
 80061f4:	08010144 	.word	0x08010144
 80061f8:	0800fc50 	.word	0x0800fc50

080061fc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d106      	bne.n	8006218 <tcp_seg_copy+0x1c>
 800620a:	4b0f      	ldr	r3, [pc, #60]	; (8006248 <tcp_seg_copy+0x4c>)
 800620c:	f240 6282 	movw	r2, #1666	; 0x682
 8006210:	490e      	ldr	r1, [pc, #56]	; (800624c <tcp_seg_copy+0x50>)
 8006212:	480f      	ldr	r0, [pc, #60]	; (8006250 <tcp_seg_copy+0x54>)
 8006214:	f008 f838 	bl	800e288 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8006218:	2003      	movs	r0, #3
 800621a:	f7fd fd41 	bl	8003ca0 <memp_malloc>
 800621e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d101      	bne.n	800622a <tcp_seg_copy+0x2e>
    return NULL;
 8006226:	2300      	movs	r3, #0
 8006228:	e00a      	b.n	8006240 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800622a:	2210      	movs	r2, #16
 800622c:	6879      	ldr	r1, [r7, #4]
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f008 f817 	bl	800e262 <memcpy>
  pbuf_ref(cseg->p);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	4618      	mov	r0, r3
 800623a:	f7fe fc17 	bl	8004a6c <pbuf_ref>
  return cseg;
 800623e:	68fb      	ldr	r3, [r7, #12]
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	0800fc0c 	.word	0x0800fc0c
 800624c:	08010160 	.word	0x08010160
 8006250:	0800fc50 	.word	0x0800fc50

08006254 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
 8006260:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d109      	bne.n	800627c <tcp_recv_null+0x28>
 8006268:	4b12      	ldr	r3, [pc, #72]	; (80062b4 <tcp_recv_null+0x60>)
 800626a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800626e:	4912      	ldr	r1, [pc, #72]	; (80062b8 <tcp_recv_null+0x64>)
 8006270:	4812      	ldr	r0, [pc, #72]	; (80062bc <tcp_recv_null+0x68>)
 8006272:	f008 f809 	bl	800e288 <iprintf>
 8006276:	f06f 030f 	mvn.w	r3, #15
 800627a:	e016      	b.n	80062aa <tcp_recv_null+0x56>

  if (p != NULL) {
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d009      	beq.n	8006296 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	891b      	ldrh	r3, [r3, #8]
 8006286:	4619      	mov	r1, r3
 8006288:	68b8      	ldr	r0, [r7, #8]
 800628a:	f7ff fab9 	bl	8005800 <tcp_recved>
    pbuf_free(p);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f7fe fb4c 	bl	800492c <pbuf_free>
 8006294:	e008      	b.n	80062a8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8006296:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d104      	bne.n	80062a8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800629e:	68b8      	ldr	r0, [r7, #8]
 80062a0:	f7fe ffea 	bl	8005278 <tcp_close>
 80062a4:	4603      	mov	r3, r0
 80062a6:	e000      	b.n	80062aa <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3710      	adds	r7, #16
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	0800fc0c 	.word	0x0800fc0c
 80062b8:	0801017c 	.word	0x0801017c
 80062bc:	0800fc50 	.word	0x0800fc50

080062c0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	4603      	mov	r3, r0
 80062c8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80062ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	db01      	blt.n	80062d6 <tcp_kill_prio+0x16>
 80062d2:	79fb      	ldrb	r3, [r7, #7]
 80062d4:	e000      	b.n	80062d8 <tcp_kill_prio+0x18>
 80062d6:	237f      	movs	r3, #127	; 0x7f
 80062d8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80062da:	7afb      	ldrb	r3, [r7, #11]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d034      	beq.n	800634a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80062e0:	7afb      	ldrb	r3, [r7, #11]
 80062e2:	3b01      	subs	r3, #1
 80062e4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80062e6:	2300      	movs	r3, #0
 80062e8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80062ea:	2300      	movs	r3, #0
 80062ec:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80062ee:	4b19      	ldr	r3, [pc, #100]	; (8006354 <tcp_kill_prio+0x94>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	617b      	str	r3, [r7, #20]
 80062f4:	e01f      	b.n	8006336 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	7d5b      	ldrb	r3, [r3, #21]
 80062fa:	7afa      	ldrb	r2, [r7, #11]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d80c      	bhi.n	800631a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8006304:	7afa      	ldrb	r2, [r7, #11]
 8006306:	429a      	cmp	r2, r3
 8006308:	d112      	bne.n	8006330 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800630a:	4b13      	ldr	r3, [pc, #76]	; (8006358 <tcp_kill_prio+0x98>)
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	429a      	cmp	r2, r3
 8006318:	d80a      	bhi.n	8006330 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800631a:	4b0f      	ldr	r3, [pc, #60]	; (8006358 <tcp_kill_prio+0x98>)
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	7d5b      	ldrb	r3, [r3, #21]
 800632e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	617b      	str	r3, [r7, #20]
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1dc      	bne.n	80062f6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d004      	beq.n	800634c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006342:	6938      	ldr	r0, [r7, #16]
 8006344:	f7ff f882 	bl	800544c <tcp_abort>
 8006348:	e000      	b.n	800634c <tcp_kill_prio+0x8c>
    return;
 800634a:	bf00      	nop
  }
}
 800634c:	3718      	adds	r7, #24
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	2000688c 	.word	0x2000688c
 8006358:	20006890 	.word	0x20006890

0800635c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b086      	sub	sp, #24
 8006360:	af00      	add	r7, sp, #0
 8006362:	4603      	mov	r3, r0
 8006364:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8006366:	79fb      	ldrb	r3, [r7, #7]
 8006368:	2b08      	cmp	r3, #8
 800636a:	d009      	beq.n	8006380 <tcp_kill_state+0x24>
 800636c:	79fb      	ldrb	r3, [r7, #7]
 800636e:	2b09      	cmp	r3, #9
 8006370:	d006      	beq.n	8006380 <tcp_kill_state+0x24>
 8006372:	4b1a      	ldr	r3, [pc, #104]	; (80063dc <tcp_kill_state+0x80>)
 8006374:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8006378:	4919      	ldr	r1, [pc, #100]	; (80063e0 <tcp_kill_state+0x84>)
 800637a:	481a      	ldr	r0, [pc, #104]	; (80063e4 <tcp_kill_state+0x88>)
 800637c:	f007 ff84 	bl	800e288 <iprintf>

  inactivity = 0;
 8006380:	2300      	movs	r3, #0
 8006382:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006384:	2300      	movs	r3, #0
 8006386:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006388:	4b17      	ldr	r3, [pc, #92]	; (80063e8 <tcp_kill_state+0x8c>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	617b      	str	r3, [r7, #20]
 800638e:	e017      	b.n	80063c0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	7d1b      	ldrb	r3, [r3, #20]
 8006394:	79fa      	ldrb	r2, [r7, #7]
 8006396:	429a      	cmp	r2, r3
 8006398:	d10f      	bne.n	80063ba <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800639a:	4b14      	ldr	r3, [pc, #80]	; (80063ec <tcp_kill_state+0x90>)
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	6a1b      	ldr	r3, [r3, #32]
 80063a2:	1ad3      	subs	r3, r2, r3
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d807      	bhi.n	80063ba <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80063aa:	4b10      	ldr	r3, [pc, #64]	; (80063ec <tcp_kill_state+0x90>)
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	6a1b      	ldr	r3, [r3, #32]
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	617b      	str	r3, [r7, #20]
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1e4      	bne.n	8006390 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d003      	beq.n	80063d4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80063cc:	2100      	movs	r1, #0
 80063ce:	6938      	ldr	r0, [r7, #16]
 80063d0:	f7fe ff7e 	bl	80052d0 <tcp_abandon>
  }
}
 80063d4:	bf00      	nop
 80063d6:	3718      	adds	r7, #24
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	0800fc0c 	.word	0x0800fc0c
 80063e0:	08010198 	.word	0x08010198
 80063e4:	0800fc50 	.word	0x0800fc50
 80063e8:	2000688c 	.word	0x2000688c
 80063ec:	20006890 	.word	0x20006890

080063f0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80063f6:	2300      	movs	r3, #0
 80063f8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80063fa:	2300      	movs	r3, #0
 80063fc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80063fe:	4b12      	ldr	r3, [pc, #72]	; (8006448 <tcp_kill_timewait+0x58>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	60fb      	str	r3, [r7, #12]
 8006404:	e012      	b.n	800642c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006406:	4b11      	ldr	r3, [pc, #68]	; (800644c <tcp_kill_timewait+0x5c>)
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	429a      	cmp	r2, r3
 8006414:	d807      	bhi.n	8006426 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8006416:	4b0d      	ldr	r3, [pc, #52]	; (800644c <tcp_kill_timewait+0x5c>)
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	60fb      	str	r3, [r7, #12]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1e9      	bne.n	8006406 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d002      	beq.n	800643e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006438:	68b8      	ldr	r0, [r7, #8]
 800643a:	f7ff f807 	bl	800544c <tcp_abort>
  }
}
 800643e:	bf00      	nop
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	2000689c 	.word	0x2000689c
 800644c:	20006890 	.word	0x20006890

08006450 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8006456:	4b10      	ldr	r3, [pc, #64]	; (8006498 <tcp_handle_closepend+0x48>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800645c:	e014      	b.n	8006488 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	8b5b      	ldrh	r3, [r3, #26]
 8006468:	f003 0308 	and.w	r3, r3, #8
 800646c:	2b00      	cmp	r3, #0
 800646e:	d009      	beq.n	8006484 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	8b5b      	ldrh	r3, [r3, #26]
 8006474:	f023 0308 	bic.w	r3, r3, #8
 8006478:	b29a      	uxth	r2, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f7fe fe94 	bl	80051ac <tcp_close_shutdown_fin>
    }
    pcb = next;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d1e7      	bne.n	800645e <tcp_handle_closepend+0xe>
  }
}
 800648e:	bf00      	nop
 8006490:	3708      	adds	r7, #8
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	2000688c 	.word	0x2000688c

0800649c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	4603      	mov	r3, r0
 80064a4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80064a6:	2001      	movs	r0, #1
 80064a8:	f7fd fbfa 	bl	8003ca0 <memp_malloc>
 80064ac:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d126      	bne.n	8006502 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80064b4:	f7ff ffcc 	bl	8006450 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80064b8:	f7ff ff9a 	bl	80063f0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80064bc:	2001      	movs	r0, #1
 80064be:	f7fd fbef 	bl	8003ca0 <memp_malloc>
 80064c2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d11b      	bne.n	8006502 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80064ca:	2009      	movs	r0, #9
 80064cc:	f7ff ff46 	bl	800635c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80064d0:	2001      	movs	r0, #1
 80064d2:	f7fd fbe5 	bl	8003ca0 <memp_malloc>
 80064d6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d111      	bne.n	8006502 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80064de:	2008      	movs	r0, #8
 80064e0:	f7ff ff3c 	bl	800635c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80064e4:	2001      	movs	r0, #1
 80064e6:	f7fd fbdb 	bl	8003ca0 <memp_malloc>
 80064ea:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d107      	bne.n	8006502 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80064f2:	79fb      	ldrb	r3, [r7, #7]
 80064f4:	4618      	mov	r0, r3
 80064f6:	f7ff fee3 	bl	80062c0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80064fa:	2001      	movs	r0, #1
 80064fc:	f7fd fbd0 	bl	8003ca0 <memp_malloc>
 8006500:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d03f      	beq.n	8006588 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8006508:	229c      	movs	r2, #156	; 0x9c
 800650a:	2100      	movs	r1, #0
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f007 feb3 	bl	800e278 <memset>
    pcb->prio = prio;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	79fa      	ldrb	r2, [r7, #7]
 8006516:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800651e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006528:	855a      	strh	r2, [r3, #42]	; 0x2a
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	22ff      	movs	r2, #255	; 0xff
 8006536:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800653e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2206      	movs	r2, #6
 8006544:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2206      	movs	r2, #6
 800654c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006554:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2201      	movs	r2, #1
 800655a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800655e:	4b0d      	ldr	r3, [pc, #52]	; (8006594 <tcp_alloc+0xf8>)
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8006566:	4b0c      	ldr	r3, [pc, #48]	; (8006598 <tcp_alloc+0xfc>)
 8006568:	781a      	ldrb	r2, [r3, #0]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8006574:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	4a08      	ldr	r2, [pc, #32]	; (800659c <tcp_alloc+0x100>)
 800657c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	4a07      	ldr	r2, [pc, #28]	; (80065a0 <tcp_alloc+0x104>)
 8006584:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8006588:	68fb      	ldr	r3, [r7, #12]
}
 800658a:	4618      	mov	r0, r3
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	20006890 	.word	0x20006890
 8006598:	200000ce 	.word	0x200000ce
 800659c:	08006255 	.word	0x08006255
 80065a0:	006ddd00 	.word	0x006ddd00

080065a4 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 80065a8:	2040      	movs	r0, #64	; 0x40
 80065aa:	f7ff ff77 	bl	800649c <tcp_alloc>
 80065ae:	4603      	mov	r3, r0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d002      	beq.n	80065ca <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	683a      	ldr	r2, [r7, #0]
 80065c8:	611a      	str	r2, [r3, #16]
  }
}
 80065ca:	bf00      	nop
 80065cc:	370c      	adds	r7, #12
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
	...

080065d8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d00e      	beq.n	8006606 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	7d1b      	ldrb	r3, [r3, #20]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d106      	bne.n	80065fe <tcp_recv+0x26>
 80065f0:	4b07      	ldr	r3, [pc, #28]	; (8006610 <tcp_recv+0x38>)
 80065f2:	f240 72df 	movw	r2, #2015	; 0x7df
 80065f6:	4907      	ldr	r1, [pc, #28]	; (8006614 <tcp_recv+0x3c>)
 80065f8:	4807      	ldr	r0, [pc, #28]	; (8006618 <tcp_recv+0x40>)
 80065fa:	f007 fe45 	bl	800e288 <iprintf>
    pcb->recv = recv;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	683a      	ldr	r2, [r7, #0]
 8006602:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8006606:	bf00      	nop
 8006608:	3708      	adds	r7, #8
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	0800fc0c 	.word	0x0800fc0c
 8006614:	080101a8 	.word	0x080101a8
 8006618:	0800fc50 	.word	0x0800fc50

0800661c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00e      	beq.n	800664a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	7d1b      	ldrb	r3, [r3, #20]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d106      	bne.n	8006642 <tcp_sent+0x26>
 8006634:	4b07      	ldr	r3, [pc, #28]	; (8006654 <tcp_sent+0x38>)
 8006636:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800663a:	4907      	ldr	r1, [pc, #28]	; (8006658 <tcp_sent+0x3c>)
 800663c:	4807      	ldr	r0, [pc, #28]	; (800665c <tcp_sent+0x40>)
 800663e:	f007 fe23 	bl	800e288 <iprintf>
    pcb->sent = sent;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	683a      	ldr	r2, [r7, #0]
 8006646:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800664a:	bf00      	nop
 800664c:	3708      	adds	r7, #8
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	0800fc0c 	.word	0x0800fc0c
 8006658:	080101d0 	.word	0x080101d0
 800665c:	0800fc50 	.word	0x0800fc50

08006660 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00e      	beq.n	800668e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	7d1b      	ldrb	r3, [r3, #20]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d106      	bne.n	8006686 <tcp_err+0x26>
 8006678:	4b07      	ldr	r3, [pc, #28]	; (8006698 <tcp_err+0x38>)
 800667a:	f640 020d 	movw	r2, #2061	; 0x80d
 800667e:	4907      	ldr	r1, [pc, #28]	; (800669c <tcp_err+0x3c>)
 8006680:	4807      	ldr	r0, [pc, #28]	; (80066a0 <tcp_err+0x40>)
 8006682:	f007 fe01 	bl	800e288 <iprintf>
    pcb->errf = err;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	683a      	ldr	r2, [r7, #0]
 800668a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800668e:	bf00      	nop
 8006690:	3708      	adds	r7, #8
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	0800fc0c 	.word	0x0800fc0c
 800669c:	080101f8 	.word	0x080101f8
 80066a0:	0800fc50 	.word	0x0800fc50

080066a4 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d008      	beq.n	80066c6 <tcp_accept+0x22>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	7d1b      	ldrb	r3, [r3, #20]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d104      	bne.n	80066c6 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	619a      	str	r2, [r3, #24]
  }
}
 80066c6:	bf00      	nop
 80066c8:	3714      	adds	r7, #20
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
	...

080066d4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	4613      	mov	r3, r2
 80066e0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d107      	bne.n	80066f8 <tcp_poll+0x24>
 80066e8:	4b0e      	ldr	r3, [pc, #56]	; (8006724 <tcp_poll+0x50>)
 80066ea:	f640 023d 	movw	r2, #2109	; 0x83d
 80066ee:	490e      	ldr	r1, [pc, #56]	; (8006728 <tcp_poll+0x54>)
 80066f0:	480e      	ldr	r0, [pc, #56]	; (800672c <tcp_poll+0x58>)
 80066f2:	f007 fdc9 	bl	800e288 <iprintf>
 80066f6:	e011      	b.n	800671c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	7d1b      	ldrb	r3, [r3, #20]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d106      	bne.n	800670e <tcp_poll+0x3a>
 8006700:	4b08      	ldr	r3, [pc, #32]	; (8006724 <tcp_poll+0x50>)
 8006702:	f640 023e 	movw	r2, #2110	; 0x83e
 8006706:	490a      	ldr	r1, [pc, #40]	; (8006730 <tcp_poll+0x5c>)
 8006708:	4808      	ldr	r0, [pc, #32]	; (800672c <tcp_poll+0x58>)
 800670a:	f007 fdbd 	bl	800e288 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	68ba      	ldr	r2, [r7, #8]
 8006712:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	79fa      	ldrb	r2, [r7, #7]
 800671a:	775a      	strb	r2, [r3, #29]
}
 800671c:	3710      	adds	r7, #16
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	0800fc0c 	.word	0x0800fc0c
 8006728:	08010220 	.word	0x08010220
 800672c:	0800fc50 	.word	0x0800fc50
 8006730:	08010238 	.word	0x08010238

08006734 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d107      	bne.n	8006752 <tcp_pcb_purge+0x1e>
 8006742:	4b21      	ldr	r3, [pc, #132]	; (80067c8 <tcp_pcb_purge+0x94>)
 8006744:	f640 0251 	movw	r2, #2129	; 0x851
 8006748:	4920      	ldr	r1, [pc, #128]	; (80067cc <tcp_pcb_purge+0x98>)
 800674a:	4821      	ldr	r0, [pc, #132]	; (80067d0 <tcp_pcb_purge+0x9c>)
 800674c:	f007 fd9c 	bl	800e288 <iprintf>
 8006750:	e037      	b.n	80067c2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	7d1b      	ldrb	r3, [r3, #20]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d033      	beq.n	80067c2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800675e:	2b0a      	cmp	r3, #10
 8006760:	d02f      	beq.n	80067c2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8006766:	2b01      	cmp	r3, #1
 8006768:	d02b      	beq.n	80067c2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800676e:	2b00      	cmp	r3, #0
 8006770:	d007      	beq.n	8006782 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006776:	4618      	mov	r0, r3
 8006778:	f7fe f8d8 	bl	800492c <pbuf_free>
      pcb->refused_data = NULL;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006786:	2b00      	cmp	r3, #0
 8006788:	d002      	beq.n	8006790 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 f986 	bl	8006a9c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006796:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800679c:	4618      	mov	r0, r3
 800679e:	f7ff fce3 	bl	8006168 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7ff fcde 	bl	8006168 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	66da      	str	r2, [r3, #108]	; 0x6c
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80067c2:	3708      	adds	r7, #8
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	0800fc0c 	.word	0x0800fc0c
 80067cc:	08010258 	.word	0x08010258
 80067d0:	0800fc50 	.word	0x0800fc50

080067d4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d106      	bne.n	80067f2 <tcp_pcb_remove+0x1e>
 80067e4:	4b3e      	ldr	r3, [pc, #248]	; (80068e0 <tcp_pcb_remove+0x10c>)
 80067e6:	f640 0283 	movw	r2, #2179	; 0x883
 80067ea:	493e      	ldr	r1, [pc, #248]	; (80068e4 <tcp_pcb_remove+0x110>)
 80067ec:	483e      	ldr	r0, [pc, #248]	; (80068e8 <tcp_pcb_remove+0x114>)
 80067ee:	f007 fd4b 	bl	800e288 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d106      	bne.n	8006806 <tcp_pcb_remove+0x32>
 80067f8:	4b39      	ldr	r3, [pc, #228]	; (80068e0 <tcp_pcb_remove+0x10c>)
 80067fa:	f640 0284 	movw	r2, #2180	; 0x884
 80067fe:	493b      	ldr	r1, [pc, #236]	; (80068ec <tcp_pcb_remove+0x118>)
 8006800:	4839      	ldr	r0, [pc, #228]	; (80068e8 <tcp_pcb_remove+0x114>)
 8006802:	f007 fd41 	bl	800e288 <iprintf>

  TCP_RMV(pcblist, pcb);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	683a      	ldr	r2, [r7, #0]
 800680c:	429a      	cmp	r2, r3
 800680e:	d105      	bne.n	800681c <tcp_pcb_remove+0x48>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68da      	ldr	r2, [r3, #12]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	601a      	str	r2, [r3, #0]
 800681a:	e013      	b.n	8006844 <tcp_pcb_remove+0x70>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	60fb      	str	r3, [r7, #12]
 8006822:	e00c      	b.n	800683e <tcp_pcb_remove+0x6a>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	683a      	ldr	r2, [r7, #0]
 800682a:	429a      	cmp	r2, r3
 800682c:	d104      	bne.n	8006838 <tcp_pcb_remove+0x64>
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	68da      	ldr	r2, [r3, #12]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	60da      	str	r2, [r3, #12]
 8006836:	e005      	b.n	8006844 <tcp_pcb_remove+0x70>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	60fb      	str	r3, [r7, #12]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d1ef      	bne.n	8006824 <tcp_pcb_remove+0x50>
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	2200      	movs	r2, #0
 8006848:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800684a:	6838      	ldr	r0, [r7, #0]
 800684c:	f7ff ff72 	bl	8006734 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	7d1b      	ldrb	r3, [r3, #20]
 8006854:	2b0a      	cmp	r3, #10
 8006856:	d013      	beq.n	8006880 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800685c:	2b01      	cmp	r3, #1
 800685e:	d00f      	beq.n	8006880 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	8b5b      	ldrh	r3, [r3, #26]
 8006864:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8006868:	2b00      	cmp	r3, #0
 800686a:	d009      	beq.n	8006880 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	8b5b      	ldrh	r3, [r3, #26]
 8006870:	f043 0302 	orr.w	r3, r3, #2
 8006874:	b29a      	uxth	r2, r3
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800687a:	6838      	ldr	r0, [r7, #0]
 800687c:	f003 fbc2 	bl	800a004 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	7d1b      	ldrb	r3, [r3, #20]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d020      	beq.n	80068ca <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800688c:	2b00      	cmp	r3, #0
 800688e:	d006      	beq.n	800689e <tcp_pcb_remove+0xca>
 8006890:	4b13      	ldr	r3, [pc, #76]	; (80068e0 <tcp_pcb_remove+0x10c>)
 8006892:	f640 0293 	movw	r2, #2195	; 0x893
 8006896:	4916      	ldr	r1, [pc, #88]	; (80068f0 <tcp_pcb_remove+0x11c>)
 8006898:	4813      	ldr	r0, [pc, #76]	; (80068e8 <tcp_pcb_remove+0x114>)
 800689a:	f007 fcf5 	bl	800e288 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d006      	beq.n	80068b4 <tcp_pcb_remove+0xe0>
 80068a6:	4b0e      	ldr	r3, [pc, #56]	; (80068e0 <tcp_pcb_remove+0x10c>)
 80068a8:	f640 0294 	movw	r2, #2196	; 0x894
 80068ac:	4911      	ldr	r1, [pc, #68]	; (80068f4 <tcp_pcb_remove+0x120>)
 80068ae:	480e      	ldr	r0, [pc, #56]	; (80068e8 <tcp_pcb_remove+0x114>)
 80068b0:	f007 fcea 	bl	800e288 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d006      	beq.n	80068ca <tcp_pcb_remove+0xf6>
 80068bc:	4b08      	ldr	r3, [pc, #32]	; (80068e0 <tcp_pcb_remove+0x10c>)
 80068be:	f640 0296 	movw	r2, #2198	; 0x896
 80068c2:	490d      	ldr	r1, [pc, #52]	; (80068f8 <tcp_pcb_remove+0x124>)
 80068c4:	4808      	ldr	r0, [pc, #32]	; (80068e8 <tcp_pcb_remove+0x114>)
 80068c6:	f007 fcdf 	bl	800e288 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	2200      	movs	r2, #0
 80068ce:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	2200      	movs	r2, #0
 80068d4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80068d6:	bf00      	nop
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	0800fc0c 	.word	0x0800fc0c
 80068e4:	08010274 	.word	0x08010274
 80068e8:	0800fc50 	.word	0x0800fc50
 80068ec:	08010290 	.word	0x08010290
 80068f0:	080102b0 	.word	0x080102b0
 80068f4:	080102c8 	.word	0x080102c8
 80068f8:	080102e4 	.word	0x080102e4

080068fc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d106      	bne.n	8006918 <tcp_next_iss+0x1c>
 800690a:	4b0a      	ldr	r3, [pc, #40]	; (8006934 <tcp_next_iss+0x38>)
 800690c:	f640 02af 	movw	r2, #2223	; 0x8af
 8006910:	4909      	ldr	r1, [pc, #36]	; (8006938 <tcp_next_iss+0x3c>)
 8006912:	480a      	ldr	r0, [pc, #40]	; (800693c <tcp_next_iss+0x40>)
 8006914:	f007 fcb8 	bl	800e288 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8006918:	4b09      	ldr	r3, [pc, #36]	; (8006940 <tcp_next_iss+0x44>)
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	4b09      	ldr	r3, [pc, #36]	; (8006944 <tcp_next_iss+0x48>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4413      	add	r3, r2
 8006922:	4a07      	ldr	r2, [pc, #28]	; (8006940 <tcp_next_iss+0x44>)
 8006924:	6013      	str	r3, [r2, #0]
  return iss;
 8006926:	4b06      	ldr	r3, [pc, #24]	; (8006940 <tcp_next_iss+0x44>)
 8006928:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800692a:	4618      	mov	r0, r3
 800692c:	3708      	adds	r7, #8
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	0800fc0c 	.word	0x0800fc0c
 8006938:	080102fc 	.word	0x080102fc
 800693c:	0800fc50 	.word	0x0800fc50
 8006940:	2000000c 	.word	0x2000000c
 8006944:	20006890 	.word	0x20006890

08006948 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af00      	add	r7, sp, #0
 800694e:	4603      	mov	r3, r0
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
 8006954:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d106      	bne.n	800696a <tcp_eff_send_mss_netif+0x22>
 800695c:	4b14      	ldr	r3, [pc, #80]	; (80069b0 <tcp_eff_send_mss_netif+0x68>)
 800695e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8006962:	4914      	ldr	r1, [pc, #80]	; (80069b4 <tcp_eff_send_mss_netif+0x6c>)
 8006964:	4814      	ldr	r0, [pc, #80]	; (80069b8 <tcp_eff_send_mss_netif+0x70>)
 8006966:	f007 fc8f 	bl	800e288 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d101      	bne.n	8006974 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8006970:	89fb      	ldrh	r3, [r7, #14]
 8006972:	e019      	b.n	80069a8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	8c1b      	ldrh	r3, [r3, #32]
 8006978:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800697a:	8afb      	ldrh	r3, [r7, #22]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d012      	beq.n	80069a6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8006980:	2328      	movs	r3, #40	; 0x28
 8006982:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8006984:	8afa      	ldrh	r2, [r7, #22]
 8006986:	8abb      	ldrh	r3, [r7, #20]
 8006988:	429a      	cmp	r2, r3
 800698a:	d904      	bls.n	8006996 <tcp_eff_send_mss_netif+0x4e>
 800698c:	8afa      	ldrh	r2, [r7, #22]
 800698e:	8abb      	ldrh	r3, [r7, #20]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	b29b      	uxth	r3, r3
 8006994:	e000      	b.n	8006998 <tcp_eff_send_mss_netif+0x50>
 8006996:	2300      	movs	r3, #0
 8006998:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800699a:	8a7a      	ldrh	r2, [r7, #18]
 800699c:	89fb      	ldrh	r3, [r7, #14]
 800699e:	4293      	cmp	r3, r2
 80069a0:	bf28      	it	cs
 80069a2:	4613      	movcs	r3, r2
 80069a4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80069a6:	89fb      	ldrh	r3, [r7, #14]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3718      	adds	r7, #24
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	0800fc0c 	.word	0x0800fc0c
 80069b4:	08010318 	.word	0x08010318
 80069b8:	0800fc50 	.word	0x0800fc50

080069bc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d119      	bne.n	8006a04 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80069d0:	4b10      	ldr	r3, [pc, #64]	; (8006a14 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80069d2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80069d6:	4910      	ldr	r1, [pc, #64]	; (8006a18 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80069d8:	4810      	ldr	r0, [pc, #64]	; (8006a1c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80069da:	f007 fc55 	bl	800e288 <iprintf>

  while (pcb != NULL) {
 80069de:	e011      	b.n	8006a04 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d108      	bne.n	80069fe <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80069f2:	68f8      	ldr	r0, [r7, #12]
 80069f4:	f7fe fd2a 	bl	800544c <tcp_abort>
      pcb = next;
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	60fb      	str	r3, [r7, #12]
 80069fc:	e002      	b.n	8006a04 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1ea      	bne.n	80069e0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8006a0a:	bf00      	nop
 8006a0c:	3710      	adds	r7, #16
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	0800fc0c 	.word	0x0800fc0c
 8006a18:	08010340 	.word	0x08010340
 8006a1c:	0800fc50 	.word	0x0800fc50

08006a20 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d02a      	beq.n	8006a86 <tcp_netif_ip_addr_changed+0x66>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d026      	beq.n	8006a86 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8006a38:	4b15      	ldr	r3, [pc, #84]	; (8006a90 <tcp_netif_ip_addr_changed+0x70>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7ff ffbc 	bl	80069bc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8006a44:	4b13      	ldr	r3, [pc, #76]	; (8006a94 <tcp_netif_ip_addr_changed+0x74>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4619      	mov	r1, r3
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f7ff ffb6 	bl	80069bc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d017      	beq.n	8006a86 <tcp_netif_ip_addr_changed+0x66>
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d013      	beq.n	8006a86 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006a5e:	4b0e      	ldr	r3, [pc, #56]	; (8006a98 <tcp_netif_ip_addr_changed+0x78>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	60fb      	str	r3, [r7, #12]
 8006a64:	e00c      	b.n	8006a80 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d103      	bne.n	8006a7a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	60fb      	str	r3, [r7, #12]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1ef      	bne.n	8006a66 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8006a86:	bf00      	nop
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	2000688c 	.word	0x2000688c
 8006a94:	20006898 	.word	0x20006898
 8006a98:	20006894 	.word	0x20006894

08006a9c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d007      	beq.n	8006abc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f7ff fb59 	bl	8006168 <tcp_segs_free>
    pcb->ooseq = NULL;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8006abc:	bf00      	nop
 8006abe:	3708      	adds	r7, #8
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8006ac4:	b590      	push	{r4, r7, lr}
 8006ac6:	b08d      	sub	sp, #52	; 0x34
 8006ac8:	af04      	add	r7, sp, #16
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d105      	bne.n	8006ae0 <tcp_input+0x1c>
 8006ad4:	4b9b      	ldr	r3, [pc, #620]	; (8006d44 <tcp_input+0x280>)
 8006ad6:	2283      	movs	r2, #131	; 0x83
 8006ad8:	499b      	ldr	r1, [pc, #620]	; (8006d48 <tcp_input+0x284>)
 8006ada:	489c      	ldr	r0, [pc, #624]	; (8006d4c <tcp_input+0x288>)
 8006adc:	f007 fbd4 	bl	800e288 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	4a9a      	ldr	r2, [pc, #616]	; (8006d50 <tcp_input+0x28c>)
 8006ae6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	895b      	ldrh	r3, [r3, #10]
 8006aec:	2b13      	cmp	r3, #19
 8006aee:	f240 83c4 	bls.w	800727a <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006af2:	4b98      	ldr	r3, [pc, #608]	; (8006d54 <tcp_input+0x290>)
 8006af4:	695a      	ldr	r2, [r3, #20]
 8006af6:	4b97      	ldr	r3, [pc, #604]	; (8006d54 <tcp_input+0x290>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4619      	mov	r1, r3
 8006afc:	4610      	mov	r0, r2
 8006afe:	f006 fc31 	bl	800d364 <ip4_addr_isbroadcast_u32>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f040 83ba 	bne.w	800727e <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8006b0a:	4b92      	ldr	r3, [pc, #584]	; (8006d54 <tcp_input+0x290>)
 8006b0c:	695b      	ldr	r3, [r3, #20]
 8006b0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006b12:	2be0      	cmp	r3, #224	; 0xe0
 8006b14:	f000 83b3 	beq.w	800727e <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8006b18:	4b8d      	ldr	r3, [pc, #564]	; (8006d50 <tcp_input+0x28c>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	899b      	ldrh	r3, [r3, #12]
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	4618      	mov	r0, r3
 8006b22:	f7fc fc68 	bl	80033f6 <lwip_htons>
 8006b26:	4603      	mov	r3, r0
 8006b28:	0b1b      	lsrs	r3, r3, #12
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8006b32:	7cbb      	ldrb	r3, [r7, #18]
 8006b34:	2b13      	cmp	r3, #19
 8006b36:	f240 83a2 	bls.w	800727e <tcp_input+0x7ba>
 8006b3a:	7cbb      	ldrb	r3, [r7, #18]
 8006b3c:	b29a      	uxth	r2, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	891b      	ldrh	r3, [r3, #8]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	f200 839b 	bhi.w	800727e <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8006b48:	7cbb      	ldrb	r3, [r7, #18]
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	3b14      	subs	r3, #20
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	4b81      	ldr	r3, [pc, #516]	; (8006d58 <tcp_input+0x294>)
 8006b52:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8006b54:	4b81      	ldr	r3, [pc, #516]	; (8006d5c <tcp_input+0x298>)
 8006b56:	2200      	movs	r2, #0
 8006b58:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	895a      	ldrh	r2, [r3, #10]
 8006b5e:	7cbb      	ldrb	r3, [r7, #18]
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d309      	bcc.n	8006b7a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8006b66:	4b7c      	ldr	r3, [pc, #496]	; (8006d58 <tcp_input+0x294>)
 8006b68:	881a      	ldrh	r2, [r3, #0]
 8006b6a:	4b7d      	ldr	r3, [pc, #500]	; (8006d60 <tcp_input+0x29c>)
 8006b6c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8006b6e:	7cbb      	ldrb	r3, [r7, #18]
 8006b70:	4619      	mov	r1, r3
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f7fd fe54 	bl	8004820 <pbuf_remove_header>
 8006b78:	e04e      	b.n	8006c18 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d105      	bne.n	8006b8e <tcp_input+0xca>
 8006b82:	4b70      	ldr	r3, [pc, #448]	; (8006d44 <tcp_input+0x280>)
 8006b84:	22c2      	movs	r2, #194	; 0xc2
 8006b86:	4977      	ldr	r1, [pc, #476]	; (8006d64 <tcp_input+0x2a0>)
 8006b88:	4870      	ldr	r0, [pc, #448]	; (8006d4c <tcp_input+0x288>)
 8006b8a:	f007 fb7d 	bl	800e288 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8006b8e:	2114      	movs	r1, #20
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f7fd fe45 	bl	8004820 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	895a      	ldrh	r2, [r3, #10]
 8006b9a:	4b71      	ldr	r3, [pc, #452]	; (8006d60 <tcp_input+0x29c>)
 8006b9c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8006b9e:	4b6e      	ldr	r3, [pc, #440]	; (8006d58 <tcp_input+0x294>)
 8006ba0:	881a      	ldrh	r2, [r3, #0]
 8006ba2:	4b6f      	ldr	r3, [pc, #444]	; (8006d60 <tcp_input+0x29c>)
 8006ba4:	881b      	ldrh	r3, [r3, #0]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8006baa:	4b6d      	ldr	r3, [pc, #436]	; (8006d60 <tcp_input+0x29c>)
 8006bac:	881b      	ldrh	r3, [r3, #0]
 8006bae:	4619      	mov	r1, r3
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f7fd fe35 	bl	8004820 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	895b      	ldrh	r3, [r3, #10]
 8006bbc:	8a3a      	ldrh	r2, [r7, #16]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	f200 835f 	bhi.w	8007282 <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	4a64      	ldr	r2, [pc, #400]	; (8006d5c <tcp_input+0x298>)
 8006bcc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	8a3a      	ldrh	r2, [r7, #16]
 8006bd4:	4611      	mov	r1, r2
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f7fd fe22 	bl	8004820 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	891a      	ldrh	r2, [r3, #8]
 8006be0:	8a3b      	ldrh	r3, [r7, #16]
 8006be2:	1ad3      	subs	r3, r2, r3
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	895b      	ldrh	r3, [r3, #10]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d005      	beq.n	8006bfe <tcp_input+0x13a>
 8006bf2:	4b54      	ldr	r3, [pc, #336]	; (8006d44 <tcp_input+0x280>)
 8006bf4:	22df      	movs	r2, #223	; 0xdf
 8006bf6:	495c      	ldr	r1, [pc, #368]	; (8006d68 <tcp_input+0x2a4>)
 8006bf8:	4854      	ldr	r0, [pc, #336]	; (8006d4c <tcp_input+0x288>)
 8006bfa:	f007 fb45 	bl	800e288 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	891a      	ldrh	r2, [r3, #8]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	891b      	ldrh	r3, [r3, #8]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d005      	beq.n	8006c18 <tcp_input+0x154>
 8006c0c:	4b4d      	ldr	r3, [pc, #308]	; (8006d44 <tcp_input+0x280>)
 8006c0e:	22e0      	movs	r2, #224	; 0xe0
 8006c10:	4956      	ldr	r1, [pc, #344]	; (8006d6c <tcp_input+0x2a8>)
 8006c12:	484e      	ldr	r0, [pc, #312]	; (8006d4c <tcp_input+0x288>)
 8006c14:	f007 fb38 	bl	800e288 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8006c18:	4b4d      	ldr	r3, [pc, #308]	; (8006d50 <tcp_input+0x28c>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	881b      	ldrh	r3, [r3, #0]
 8006c1e:	b29a      	uxth	r2, r3
 8006c20:	4b4b      	ldr	r3, [pc, #300]	; (8006d50 <tcp_input+0x28c>)
 8006c22:	681c      	ldr	r4, [r3, #0]
 8006c24:	4610      	mov	r0, r2
 8006c26:	f7fc fbe6 	bl	80033f6 <lwip_htons>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8006c2e:	4b48      	ldr	r3, [pc, #288]	; (8006d50 <tcp_input+0x28c>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	885b      	ldrh	r3, [r3, #2]
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	4b46      	ldr	r3, [pc, #280]	; (8006d50 <tcp_input+0x28c>)
 8006c38:	681c      	ldr	r4, [r3, #0]
 8006c3a:	4610      	mov	r0, r2
 8006c3c:	f7fc fbdb 	bl	80033f6 <lwip_htons>
 8006c40:	4603      	mov	r3, r0
 8006c42:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8006c44:	4b42      	ldr	r3, [pc, #264]	; (8006d50 <tcp_input+0x28c>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	685a      	ldr	r2, [r3, #4]
 8006c4a:	4b41      	ldr	r3, [pc, #260]	; (8006d50 <tcp_input+0x28c>)
 8006c4c:	681c      	ldr	r4, [r3, #0]
 8006c4e:	4610      	mov	r0, r2
 8006c50:	f7fc fbe6 	bl	8003420 <lwip_htonl>
 8006c54:	4603      	mov	r3, r0
 8006c56:	6063      	str	r3, [r4, #4]
 8006c58:	6863      	ldr	r3, [r4, #4]
 8006c5a:	4a45      	ldr	r2, [pc, #276]	; (8006d70 <tcp_input+0x2ac>)
 8006c5c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8006c5e:	4b3c      	ldr	r3, [pc, #240]	; (8006d50 <tcp_input+0x28c>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	689a      	ldr	r2, [r3, #8]
 8006c64:	4b3a      	ldr	r3, [pc, #232]	; (8006d50 <tcp_input+0x28c>)
 8006c66:	681c      	ldr	r4, [r3, #0]
 8006c68:	4610      	mov	r0, r2
 8006c6a:	f7fc fbd9 	bl	8003420 <lwip_htonl>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	60a3      	str	r3, [r4, #8]
 8006c72:	68a3      	ldr	r3, [r4, #8]
 8006c74:	4a3f      	ldr	r2, [pc, #252]	; (8006d74 <tcp_input+0x2b0>)
 8006c76:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8006c78:	4b35      	ldr	r3, [pc, #212]	; (8006d50 <tcp_input+0x28c>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	89db      	ldrh	r3, [r3, #14]
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	4b33      	ldr	r3, [pc, #204]	; (8006d50 <tcp_input+0x28c>)
 8006c82:	681c      	ldr	r4, [r3, #0]
 8006c84:	4610      	mov	r0, r2
 8006c86:	f7fc fbb6 	bl	80033f6 <lwip_htons>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8006c8e:	4b30      	ldr	r3, [pc, #192]	; (8006d50 <tcp_input+0x28c>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	899b      	ldrh	r3, [r3, #12]
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7fc fbad 	bl	80033f6 <lwip_htons>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ca4:	b2da      	uxtb	r2, r3
 8006ca6:	4b34      	ldr	r3, [pc, #208]	; (8006d78 <tcp_input+0x2b4>)
 8006ca8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	891a      	ldrh	r2, [r3, #8]
 8006cae:	4b33      	ldr	r3, [pc, #204]	; (8006d7c <tcp_input+0x2b8>)
 8006cb0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8006cb2:	4b31      	ldr	r3, [pc, #196]	; (8006d78 <tcp_input+0x2b4>)
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	f003 0303 	and.w	r3, r3, #3
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00c      	beq.n	8006cd8 <tcp_input+0x214>
    tcplen++;
 8006cbe:	4b2f      	ldr	r3, [pc, #188]	; (8006d7c <tcp_input+0x2b8>)
 8006cc0:	881b      	ldrh	r3, [r3, #0]
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	b29a      	uxth	r2, r3
 8006cc6:	4b2d      	ldr	r3, [pc, #180]	; (8006d7c <tcp_input+0x2b8>)
 8006cc8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	891a      	ldrh	r2, [r3, #8]
 8006cce:	4b2b      	ldr	r3, [pc, #172]	; (8006d7c <tcp_input+0x2b8>)
 8006cd0:	881b      	ldrh	r3, [r3, #0]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	f200 82d7 	bhi.w	8007286 <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006cdc:	4b28      	ldr	r3, [pc, #160]	; (8006d80 <tcp_input+0x2bc>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	61fb      	str	r3, [r7, #28]
 8006ce2:	e09d      	b.n	8006e20 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	7d1b      	ldrb	r3, [r3, #20]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d105      	bne.n	8006cf8 <tcp_input+0x234>
 8006cec:	4b15      	ldr	r3, [pc, #84]	; (8006d44 <tcp_input+0x280>)
 8006cee:	22fb      	movs	r2, #251	; 0xfb
 8006cf0:	4924      	ldr	r1, [pc, #144]	; (8006d84 <tcp_input+0x2c0>)
 8006cf2:	4816      	ldr	r0, [pc, #88]	; (8006d4c <tcp_input+0x288>)
 8006cf4:	f007 fac8 	bl	800e288 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	7d1b      	ldrb	r3, [r3, #20]
 8006cfc:	2b0a      	cmp	r3, #10
 8006cfe:	d105      	bne.n	8006d0c <tcp_input+0x248>
 8006d00:	4b10      	ldr	r3, [pc, #64]	; (8006d44 <tcp_input+0x280>)
 8006d02:	22fc      	movs	r2, #252	; 0xfc
 8006d04:	4920      	ldr	r1, [pc, #128]	; (8006d88 <tcp_input+0x2c4>)
 8006d06:	4811      	ldr	r0, [pc, #68]	; (8006d4c <tcp_input+0x288>)
 8006d08:	f007 fabe 	bl	800e288 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	7d1b      	ldrb	r3, [r3, #20]
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d105      	bne.n	8006d20 <tcp_input+0x25c>
 8006d14:	4b0b      	ldr	r3, [pc, #44]	; (8006d44 <tcp_input+0x280>)
 8006d16:	22fd      	movs	r2, #253	; 0xfd
 8006d18:	491c      	ldr	r1, [pc, #112]	; (8006d8c <tcp_input+0x2c8>)
 8006d1a:	480c      	ldr	r0, [pc, #48]	; (8006d4c <tcp_input+0x288>)
 8006d1c:	f007 fab4 	bl	800e288 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	7a1b      	ldrb	r3, [r3, #8]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d033      	beq.n	8006d90 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	7a1a      	ldrb	r2, [r3, #8]
 8006d2c:	4b09      	ldr	r3, [pc, #36]	; (8006d54 <tcp_input+0x290>)
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006d34:	3301      	adds	r3, #1
 8006d36:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d029      	beq.n	8006d90 <tcp_input+0x2cc>
      prev = pcb;
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	61bb      	str	r3, [r7, #24]
      continue;
 8006d40:	e06b      	b.n	8006e1a <tcp_input+0x356>
 8006d42:	bf00      	nop
 8006d44:	08010374 	.word	0x08010374
 8006d48:	080103a8 	.word	0x080103a8
 8006d4c:	080103c0 	.word	0x080103c0
 8006d50:	200000e0 	.word	0x200000e0
 8006d54:	20003348 	.word	0x20003348
 8006d58:	200000e4 	.word	0x200000e4
 8006d5c:	200000e8 	.word	0x200000e8
 8006d60:	200000e6 	.word	0x200000e6
 8006d64:	080103e8 	.word	0x080103e8
 8006d68:	080103f8 	.word	0x080103f8
 8006d6c:	08010404 	.word	0x08010404
 8006d70:	200000f0 	.word	0x200000f0
 8006d74:	200000f4 	.word	0x200000f4
 8006d78:	200000fc 	.word	0x200000fc
 8006d7c:	200000fa 	.word	0x200000fa
 8006d80:	2000688c 	.word	0x2000688c
 8006d84:	08010424 	.word	0x08010424
 8006d88:	0801044c 	.word	0x0801044c
 8006d8c:	08010478 	.word	0x08010478
    }

    if (pcb->remote_port == tcphdr->src &&
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	8b1a      	ldrh	r2, [r3, #24]
 8006d94:	4b94      	ldr	r3, [pc, #592]	; (8006fe8 <tcp_input+0x524>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	881b      	ldrh	r3, [r3, #0]
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d13a      	bne.n	8006e16 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	8ada      	ldrh	r2, [r3, #22]
 8006da4:	4b90      	ldr	r3, [pc, #576]	; (8006fe8 <tcp_input+0x524>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	885b      	ldrh	r3, [r3, #2]
 8006daa:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d132      	bne.n	8006e16 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	685a      	ldr	r2, [r3, #4]
 8006db4:	4b8d      	ldr	r3, [pc, #564]	; (8006fec <tcp_input+0x528>)
 8006db6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d12c      	bne.n	8006e16 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	4b8a      	ldr	r3, [pc, #552]	; (8006fec <tcp_input+0x528>)
 8006dc2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d126      	bne.n	8006e16 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	69fa      	ldr	r2, [r7, #28]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d106      	bne.n	8006de0 <tcp_input+0x31c>
 8006dd2:	4b87      	ldr	r3, [pc, #540]	; (8006ff0 <tcp_input+0x52c>)
 8006dd4:	f240 120d 	movw	r2, #269	; 0x10d
 8006dd8:	4986      	ldr	r1, [pc, #536]	; (8006ff4 <tcp_input+0x530>)
 8006dda:	4887      	ldr	r0, [pc, #540]	; (8006ff8 <tcp_input+0x534>)
 8006ddc:	f007 fa54 	bl	800e288 <iprintf>
      if (prev != NULL) {
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d00a      	beq.n	8006dfc <tcp_input+0x338>
        prev->next = pcb->next;
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	68da      	ldr	r2, [r3, #12]
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8006dee:	4b83      	ldr	r3, [pc, #524]	; (8006ffc <tcp_input+0x538>)
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8006df6:	4a81      	ldr	r2, [pc, #516]	; (8006ffc <tcp_input+0x538>)
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	69fa      	ldr	r2, [r7, #28]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d111      	bne.n	8006e2a <tcp_input+0x366>
 8006e06:	4b7a      	ldr	r3, [pc, #488]	; (8006ff0 <tcp_input+0x52c>)
 8006e08:	f240 1215 	movw	r2, #277	; 0x115
 8006e0c:	497c      	ldr	r1, [pc, #496]	; (8007000 <tcp_input+0x53c>)
 8006e0e:	487a      	ldr	r0, [pc, #488]	; (8006ff8 <tcp_input+0x534>)
 8006e10:	f007 fa3a 	bl	800e288 <iprintf>
      break;
 8006e14:	e009      	b.n	8006e2a <tcp_input+0x366>
    }
    prev = pcb;
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	61fb      	str	r3, [r7, #28]
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	f47f af5e 	bne.w	8006ce4 <tcp_input+0x220>
 8006e28:	e000      	b.n	8006e2c <tcp_input+0x368>
      break;
 8006e2a:	bf00      	nop
  }

  if (pcb == NULL) {
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f040 8095 	bne.w	8006f5e <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006e34:	4b73      	ldr	r3, [pc, #460]	; (8007004 <tcp_input+0x540>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	61fb      	str	r3, [r7, #28]
 8006e3a:	e03f      	b.n	8006ebc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	7d1b      	ldrb	r3, [r3, #20]
 8006e40:	2b0a      	cmp	r3, #10
 8006e42:	d006      	beq.n	8006e52 <tcp_input+0x38e>
 8006e44:	4b6a      	ldr	r3, [pc, #424]	; (8006ff0 <tcp_input+0x52c>)
 8006e46:	f240 121f 	movw	r2, #287	; 0x11f
 8006e4a:	496f      	ldr	r1, [pc, #444]	; (8007008 <tcp_input+0x544>)
 8006e4c:	486a      	ldr	r0, [pc, #424]	; (8006ff8 <tcp_input+0x534>)
 8006e4e:	f007 fa1b 	bl	800e288 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	7a1b      	ldrb	r3, [r3, #8]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d009      	beq.n	8006e6e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	7a1a      	ldrb	r2, [r3, #8]
 8006e5e:	4b63      	ldr	r3, [pc, #396]	; (8006fec <tcp_input+0x528>)
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006e66:	3301      	adds	r3, #1
 8006e68:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d122      	bne.n	8006eb4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	8b1a      	ldrh	r2, [r3, #24]
 8006e72:	4b5d      	ldr	r3, [pc, #372]	; (8006fe8 <tcp_input+0x524>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	881b      	ldrh	r3, [r3, #0]
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d11b      	bne.n	8006eb6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	8ada      	ldrh	r2, [r3, #22]
 8006e82:	4b59      	ldr	r3, [pc, #356]	; (8006fe8 <tcp_input+0x524>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	885b      	ldrh	r3, [r3, #2]
 8006e88:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d113      	bne.n	8006eb6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	685a      	ldr	r2, [r3, #4]
 8006e92:	4b56      	ldr	r3, [pc, #344]	; (8006fec <tcp_input+0x528>)
 8006e94:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d10d      	bne.n	8006eb6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	4b53      	ldr	r3, [pc, #332]	; (8006fec <tcp_input+0x528>)
 8006ea0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d107      	bne.n	8006eb6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8006ea6:	69f8      	ldr	r0, [r7, #28]
 8006ea8:	f000 fb52 	bl	8007550 <tcp_timewait_input>
        }
        pbuf_free(p);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f7fd fd3d 	bl	800492c <pbuf_free>
        return;
 8006eb2:	e1ee      	b.n	8007292 <tcp_input+0x7ce>
        continue;
 8006eb4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	61fb      	str	r3, [r7, #28]
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d1bc      	bne.n	8006e3c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006ec6:	4b51      	ldr	r3, [pc, #324]	; (800700c <tcp_input+0x548>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	617b      	str	r3, [r7, #20]
 8006ecc:	e02a      	b.n	8006f24 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	7a1b      	ldrb	r3, [r3, #8]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00c      	beq.n	8006ef0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	7a1a      	ldrb	r2, [r3, #8]
 8006eda:	4b44      	ldr	r3, [pc, #272]	; (8006fec <tcp_input+0x528>)
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d002      	beq.n	8006ef0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	61bb      	str	r3, [r7, #24]
        continue;
 8006eee:	e016      	b.n	8006f1e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	8ada      	ldrh	r2, [r3, #22]
 8006ef4:	4b3c      	ldr	r3, [pc, #240]	; (8006fe8 <tcp_input+0x524>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	885b      	ldrh	r3, [r3, #2]
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d10c      	bne.n	8006f1a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	4b39      	ldr	r3, [pc, #228]	; (8006fec <tcp_input+0x528>)
 8006f06:	695b      	ldr	r3, [r3, #20]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d00f      	beq.n	8006f2c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d00d      	beq.n	8006f2e <tcp_input+0x46a>
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d009      	beq.n	8006f2e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	617b      	str	r3, [r7, #20]
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d1d1      	bne.n	8006ece <tcp_input+0x40a>
 8006f2a:	e000      	b.n	8006f2e <tcp_input+0x46a>
            break;
 8006f2c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d014      	beq.n	8006f5e <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00a      	beq.n	8006f50 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	68da      	ldr	r2, [r3, #12]
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8006f42:	4b32      	ldr	r3, [pc, #200]	; (800700c <tcp_input+0x548>)
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8006f4a:	4a30      	ldr	r2, [pc, #192]	; (800700c <tcp_input+0x548>)
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8006f50:	6978      	ldr	r0, [r7, #20]
 8006f52:	f000 f9ff 	bl	8007354 <tcp_listen_input>
      }
      pbuf_free(p);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f7fd fce8 	bl	800492c <pbuf_free>
      return;
 8006f5c:	e199      	b.n	8007292 <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f000 8160 	beq.w	8007226 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8006f66:	4b2a      	ldr	r3, [pc, #168]	; (8007010 <tcp_input+0x54c>)
 8006f68:	2200      	movs	r2, #0
 8006f6a:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	891a      	ldrh	r2, [r3, #8]
 8006f70:	4b27      	ldr	r3, [pc, #156]	; (8007010 <tcp_input+0x54c>)
 8006f72:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8006f74:	4a26      	ldr	r2, [pc, #152]	; (8007010 <tcp_input+0x54c>)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8006f7a:	4b1b      	ldr	r3, [pc, #108]	; (8006fe8 <tcp_input+0x524>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a24      	ldr	r2, [pc, #144]	; (8007010 <tcp_input+0x54c>)
 8006f80:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8006f82:	4b24      	ldr	r3, [pc, #144]	; (8007014 <tcp_input+0x550>)
 8006f84:	2200      	movs	r2, #0
 8006f86:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8006f88:	4b23      	ldr	r3, [pc, #140]	; (8007018 <tcp_input+0x554>)
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8006f8e:	4b23      	ldr	r3, [pc, #140]	; (800701c <tcp_input+0x558>)
 8006f90:	2200      	movs	r2, #0
 8006f92:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8006f94:	4b22      	ldr	r3, [pc, #136]	; (8007020 <tcp_input+0x55c>)
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	f003 0308 	and.w	r3, r3, #8
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d006      	beq.n	8006fae <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	7b5b      	ldrb	r3, [r3, #13]
 8006fa4:	f043 0301 	orr.w	r3, r3, #1
 8006fa8:	b2da      	uxtb	r2, r3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d038      	beq.n	8007028 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8006fb6:	69f8      	ldr	r0, [r7, #28]
 8006fb8:	f7ff f85a 	bl	8006070 <tcp_process_refused_data>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	f113 0f0d 	cmn.w	r3, #13
 8006fc2:	d007      	beq.n	8006fd4 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d02d      	beq.n	8007028 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8006fcc:	4b15      	ldr	r3, [pc, #84]	; (8007024 <tcp_input+0x560>)
 8006fce:	881b      	ldrh	r3, [r3, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d029      	beq.n	8007028 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f040 8104 	bne.w	80071e6 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8006fde:	69f8      	ldr	r0, [r7, #28]
 8006fe0:	f003 fe26 	bl	800ac30 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8006fe4:	e0ff      	b.n	80071e6 <tcp_input+0x722>
 8006fe6:	bf00      	nop
 8006fe8:	200000e0 	.word	0x200000e0
 8006fec:	20003348 	.word	0x20003348
 8006ff0:	08010374 	.word	0x08010374
 8006ff4:	080104a0 	.word	0x080104a0
 8006ff8:	080103c0 	.word	0x080103c0
 8006ffc:	2000688c 	.word	0x2000688c
 8007000:	080104cc 	.word	0x080104cc
 8007004:	2000689c 	.word	0x2000689c
 8007008:	080104f8 	.word	0x080104f8
 800700c:	20006894 	.word	0x20006894
 8007010:	200000d0 	.word	0x200000d0
 8007014:	20000100 	.word	0x20000100
 8007018:	200000fd 	.word	0x200000fd
 800701c:	200000f8 	.word	0x200000f8
 8007020:	200000fc 	.word	0x200000fc
 8007024:	200000fa 	.word	0x200000fa
      }
    }
    tcp_input_pcb = pcb;
 8007028:	4a9b      	ldr	r2, [pc, #620]	; (8007298 <tcp_input+0x7d4>)
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800702e:	69f8      	ldr	r0, [r7, #28]
 8007030:	f000 fb0a 	bl	8007648 <tcp_process>
 8007034:	4603      	mov	r3, r0
 8007036:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007038:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800703c:	f113 0f0d 	cmn.w	r3, #13
 8007040:	f000 80d3 	beq.w	80071ea <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8007044:	4b95      	ldr	r3, [pc, #596]	; (800729c <tcp_input+0x7d8>)
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	f003 0308 	and.w	r3, r3, #8
 800704c:	2b00      	cmp	r3, #0
 800704e:	d015      	beq.n	800707c <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007056:	2b00      	cmp	r3, #0
 8007058:	d008      	beq.n	800706c <tcp_input+0x5a8>
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007060:	69fa      	ldr	r2, [r7, #28]
 8007062:	6912      	ldr	r2, [r2, #16]
 8007064:	f06f 010d 	mvn.w	r1, #13
 8007068:	4610      	mov	r0, r2
 800706a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800706c:	69f9      	ldr	r1, [r7, #28]
 800706e:	488c      	ldr	r0, [pc, #560]	; (80072a0 <tcp_input+0x7dc>)
 8007070:	f7ff fbb0 	bl	80067d4 <tcp_pcb_remove>
        tcp_free(pcb);
 8007074:	69f8      	ldr	r0, [r7, #28]
 8007076:	f7fd ff09 	bl	8004e8c <tcp_free>
 800707a:	e0c1      	b.n	8007200 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800707c:	2300      	movs	r3, #0
 800707e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8007080:	4b88      	ldr	r3, [pc, #544]	; (80072a4 <tcp_input+0x7e0>)
 8007082:	881b      	ldrh	r3, [r3, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d01d      	beq.n	80070c4 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8007088:	4b86      	ldr	r3, [pc, #536]	; (80072a4 <tcp_input+0x7e0>)
 800708a:	881b      	ldrh	r3, [r3, #0]
 800708c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800708e:	69fb      	ldr	r3, [r7, #28]
 8007090:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007094:	2b00      	cmp	r3, #0
 8007096:	d00a      	beq.n	80070ae <tcp_input+0x5ea>
 8007098:	69fb      	ldr	r3, [r7, #28]
 800709a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800709e:	69fa      	ldr	r2, [r7, #28]
 80070a0:	6910      	ldr	r0, [r2, #16]
 80070a2:	89fa      	ldrh	r2, [r7, #14]
 80070a4:	69f9      	ldr	r1, [r7, #28]
 80070a6:	4798      	blx	r3
 80070a8:	4603      	mov	r3, r0
 80070aa:	74fb      	strb	r3, [r7, #19]
 80070ac:	e001      	b.n	80070b2 <tcp_input+0x5ee>
 80070ae:	2300      	movs	r3, #0
 80070b0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80070b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80070b6:	f113 0f0d 	cmn.w	r3, #13
 80070ba:	f000 8098 	beq.w	80071ee <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 80070be:	4b79      	ldr	r3, [pc, #484]	; (80072a4 <tcp_input+0x7e0>)
 80070c0:	2200      	movs	r2, #0
 80070c2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80070c4:	69f8      	ldr	r0, [r7, #28]
 80070c6:	f000 f905 	bl	80072d4 <tcp_input_delayed_close>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f040 8090 	bne.w	80071f2 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80070d2:	4b75      	ldr	r3, [pc, #468]	; (80072a8 <tcp_input+0x7e4>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d041      	beq.n	800715e <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d006      	beq.n	80070f0 <tcp_input+0x62c>
 80070e2:	4b72      	ldr	r3, [pc, #456]	; (80072ac <tcp_input+0x7e8>)
 80070e4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80070e8:	4971      	ldr	r1, [pc, #452]	; (80072b0 <tcp_input+0x7ec>)
 80070ea:	4872      	ldr	r0, [pc, #456]	; (80072b4 <tcp_input+0x7f0>)
 80070ec:	f007 f8cc 	bl	800e288 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	8b5b      	ldrh	r3, [r3, #26]
 80070f4:	f003 0310 	and.w	r3, r3, #16
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d008      	beq.n	800710e <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80070fc:	4b6a      	ldr	r3, [pc, #424]	; (80072a8 <tcp_input+0x7e4>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4618      	mov	r0, r3
 8007102:	f7fd fc13 	bl	800492c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8007106:	69f8      	ldr	r0, [r7, #28]
 8007108:	f7fe f9a0 	bl	800544c <tcp_abort>
            goto aborted;
 800710c:	e078      	b.n	8007200 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00c      	beq.n	8007132 <tcp_input+0x66e>
 8007118:	69fb      	ldr	r3, [r7, #28]
 800711a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800711e:	69fb      	ldr	r3, [r7, #28]
 8007120:	6918      	ldr	r0, [r3, #16]
 8007122:	4b61      	ldr	r3, [pc, #388]	; (80072a8 <tcp_input+0x7e4>)
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	2300      	movs	r3, #0
 8007128:	69f9      	ldr	r1, [r7, #28]
 800712a:	47a0      	blx	r4
 800712c:	4603      	mov	r3, r0
 800712e:	74fb      	strb	r3, [r7, #19]
 8007130:	e008      	b.n	8007144 <tcp_input+0x680>
 8007132:	4b5d      	ldr	r3, [pc, #372]	; (80072a8 <tcp_input+0x7e4>)
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	2300      	movs	r3, #0
 8007138:	69f9      	ldr	r1, [r7, #28]
 800713a:	2000      	movs	r0, #0
 800713c:	f7ff f88a 	bl	8006254 <tcp_recv_null>
 8007140:	4603      	mov	r3, r0
 8007142:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8007144:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007148:	f113 0f0d 	cmn.w	r3, #13
 800714c:	d053      	beq.n	80071f6 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800714e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d003      	beq.n	800715e <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8007156:	4b54      	ldr	r3, [pc, #336]	; (80072a8 <tcp_input+0x7e4>)
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800715e:	4b4f      	ldr	r3, [pc, #316]	; (800729c <tcp_input+0x7d8>)
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	f003 0320 	and.w	r3, r3, #32
 8007166:	2b00      	cmp	r3, #0
 8007168:	d030      	beq.n	80071cc <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800716e:	2b00      	cmp	r3, #0
 8007170:	d009      	beq.n	8007186 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007176:	7b5a      	ldrb	r2, [r3, #13]
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800717c:	f042 0220 	orr.w	r2, r2, #32
 8007180:	b2d2      	uxtb	r2, r2
 8007182:	735a      	strb	r2, [r3, #13]
 8007184:	e022      	b.n	80071cc <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800718a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800718e:	d005      	beq.n	800719c <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007194:	3301      	adds	r3, #1
 8007196:	b29a      	uxth	r2, r3
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00b      	beq.n	80071be <tcp_input+0x6fa>
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	6918      	ldr	r0, [r3, #16]
 80071b0:	2300      	movs	r3, #0
 80071b2:	2200      	movs	r2, #0
 80071b4:	69f9      	ldr	r1, [r7, #28]
 80071b6:	47a0      	blx	r4
 80071b8:	4603      	mov	r3, r0
 80071ba:	74fb      	strb	r3, [r7, #19]
 80071bc:	e001      	b.n	80071c2 <tcp_input+0x6fe>
 80071be:	2300      	movs	r3, #0
 80071c0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80071c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80071c6:	f113 0f0d 	cmn.w	r3, #13
 80071ca:	d016      	beq.n	80071fa <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80071cc:	4b32      	ldr	r3, [pc, #200]	; (8007298 <tcp_input+0x7d4>)
 80071ce:	2200      	movs	r2, #0
 80071d0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80071d2:	69f8      	ldr	r0, [r7, #28]
 80071d4:	f000 f87e 	bl	80072d4 <tcp_input_delayed_close>
 80071d8:	4603      	mov	r3, r0
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d10f      	bne.n	80071fe <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80071de:	69f8      	ldr	r0, [r7, #28]
 80071e0:	f002 ff10 	bl	800a004 <tcp_output>
 80071e4:	e00c      	b.n	8007200 <tcp_input+0x73c>
        goto aborted;
 80071e6:	bf00      	nop
 80071e8:	e00a      	b.n	8007200 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80071ea:	bf00      	nop
 80071ec:	e008      	b.n	8007200 <tcp_input+0x73c>
              goto aborted;
 80071ee:	bf00      	nop
 80071f0:	e006      	b.n	8007200 <tcp_input+0x73c>
          goto aborted;
 80071f2:	bf00      	nop
 80071f4:	e004      	b.n	8007200 <tcp_input+0x73c>
            goto aborted;
 80071f6:	bf00      	nop
 80071f8:	e002      	b.n	8007200 <tcp_input+0x73c>
              goto aborted;
 80071fa:	bf00      	nop
 80071fc:	e000      	b.n	8007200 <tcp_input+0x73c>
          goto aborted;
 80071fe:	bf00      	nop
    tcp_input_pcb = NULL;
 8007200:	4b25      	ldr	r3, [pc, #148]	; (8007298 <tcp_input+0x7d4>)
 8007202:	2200      	movs	r2, #0
 8007204:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8007206:	4b28      	ldr	r3, [pc, #160]	; (80072a8 <tcp_input+0x7e4>)
 8007208:	2200      	movs	r2, #0
 800720a:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800720c:	4b2a      	ldr	r3, [pc, #168]	; (80072b8 <tcp_input+0x7f4>)
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d03d      	beq.n	8007290 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 8007214:	4b28      	ldr	r3, [pc, #160]	; (80072b8 <tcp_input+0x7f4>)
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	4618      	mov	r0, r3
 800721a:	f7fd fb87 	bl	800492c <pbuf_free>
      inseg.p = NULL;
 800721e:	4b26      	ldr	r3, [pc, #152]	; (80072b8 <tcp_input+0x7f4>)
 8007220:	2200      	movs	r2, #0
 8007222:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8007224:	e034      	b.n	8007290 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8007226:	4b25      	ldr	r3, [pc, #148]	; (80072bc <tcp_input+0x7f8>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	899b      	ldrh	r3, [r3, #12]
 800722c:	b29b      	uxth	r3, r3
 800722e:	4618      	mov	r0, r3
 8007230:	f7fc f8e1 	bl	80033f6 <lwip_htons>
 8007234:	4603      	mov	r3, r0
 8007236:	b2db      	uxtb	r3, r3
 8007238:	f003 0304 	and.w	r3, r3, #4
 800723c:	2b00      	cmp	r3, #0
 800723e:	d118      	bne.n	8007272 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007240:	4b1f      	ldr	r3, [pc, #124]	; (80072c0 <tcp_input+0x7fc>)
 8007242:	6819      	ldr	r1, [r3, #0]
 8007244:	4b1f      	ldr	r3, [pc, #124]	; (80072c4 <tcp_input+0x800>)
 8007246:	881b      	ldrh	r3, [r3, #0]
 8007248:	461a      	mov	r2, r3
 800724a:	4b1f      	ldr	r3, [pc, #124]	; (80072c8 <tcp_input+0x804>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007250:	4b1a      	ldr	r3, [pc, #104]	; (80072bc <tcp_input+0x7f8>)
 8007252:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007254:	885b      	ldrh	r3, [r3, #2]
 8007256:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007258:	4a18      	ldr	r2, [pc, #96]	; (80072bc <tcp_input+0x7f8>)
 800725a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800725c:	8812      	ldrh	r2, [r2, #0]
 800725e:	b292      	uxth	r2, r2
 8007260:	9202      	str	r2, [sp, #8]
 8007262:	9301      	str	r3, [sp, #4]
 8007264:	4b19      	ldr	r3, [pc, #100]	; (80072cc <tcp_input+0x808>)
 8007266:	9300      	str	r3, [sp, #0]
 8007268:	4b19      	ldr	r3, [pc, #100]	; (80072d0 <tcp_input+0x80c>)
 800726a:	4602      	mov	r2, r0
 800726c:	2000      	movs	r0, #0
 800726e:	f003 fc8d 	bl	800ab8c <tcp_rst>
    pbuf_free(p);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f7fd fb5a 	bl	800492c <pbuf_free>
  return;
 8007278:	e00a      	b.n	8007290 <tcp_input+0x7cc>
    goto dropped;
 800727a:	bf00      	nop
 800727c:	e004      	b.n	8007288 <tcp_input+0x7c4>
dropped:
 800727e:	bf00      	nop
 8007280:	e002      	b.n	8007288 <tcp_input+0x7c4>
      goto dropped;
 8007282:	bf00      	nop
 8007284:	e000      	b.n	8007288 <tcp_input+0x7c4>
      goto dropped;
 8007286:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f7fd fb4f 	bl	800492c <pbuf_free>
 800728e:	e000      	b.n	8007292 <tcp_input+0x7ce>
  return;
 8007290:	bf00      	nop
}
 8007292:	3724      	adds	r7, #36	; 0x24
 8007294:	46bd      	mov	sp, r7
 8007296:	bd90      	pop	{r4, r7, pc}
 8007298:	200068a0 	.word	0x200068a0
 800729c:	200000fd 	.word	0x200000fd
 80072a0:	2000688c 	.word	0x2000688c
 80072a4:	200000f8 	.word	0x200000f8
 80072a8:	20000100 	.word	0x20000100
 80072ac:	08010374 	.word	0x08010374
 80072b0:	08010528 	.word	0x08010528
 80072b4:	080103c0 	.word	0x080103c0
 80072b8:	200000d0 	.word	0x200000d0
 80072bc:	200000e0 	.word	0x200000e0
 80072c0:	200000f4 	.word	0x200000f4
 80072c4:	200000fa 	.word	0x200000fa
 80072c8:	200000f0 	.word	0x200000f0
 80072cc:	20003358 	.word	0x20003358
 80072d0:	2000335c 	.word	0x2000335c

080072d4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b082      	sub	sp, #8
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d106      	bne.n	80072f0 <tcp_input_delayed_close+0x1c>
 80072e2:	4b17      	ldr	r3, [pc, #92]	; (8007340 <tcp_input_delayed_close+0x6c>)
 80072e4:	f240 225a 	movw	r2, #602	; 0x25a
 80072e8:	4916      	ldr	r1, [pc, #88]	; (8007344 <tcp_input_delayed_close+0x70>)
 80072ea:	4817      	ldr	r0, [pc, #92]	; (8007348 <tcp_input_delayed_close+0x74>)
 80072ec:	f006 ffcc 	bl	800e288 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80072f0:	4b16      	ldr	r3, [pc, #88]	; (800734c <tcp_input_delayed_close+0x78>)
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	f003 0310 	and.w	r3, r3, #16
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d01c      	beq.n	8007336 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	8b5b      	ldrh	r3, [r3, #26]
 8007300:	f003 0310 	and.w	r3, r3, #16
 8007304:	2b00      	cmp	r3, #0
 8007306:	d10d      	bne.n	8007324 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800730e:	2b00      	cmp	r3, #0
 8007310:	d008      	beq.n	8007324 <tcp_input_delayed_close+0x50>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	6912      	ldr	r2, [r2, #16]
 800731c:	f06f 010e 	mvn.w	r1, #14
 8007320:	4610      	mov	r0, r2
 8007322:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007324:	6879      	ldr	r1, [r7, #4]
 8007326:	480a      	ldr	r0, [pc, #40]	; (8007350 <tcp_input_delayed_close+0x7c>)
 8007328:	f7ff fa54 	bl	80067d4 <tcp_pcb_remove>
    tcp_free(pcb);
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f7fd fdad 	bl	8004e8c <tcp_free>
    return 1;
 8007332:	2301      	movs	r3, #1
 8007334:	e000      	b.n	8007338 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	3708      	adds	r7, #8
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}
 8007340:	08010374 	.word	0x08010374
 8007344:	08010544 	.word	0x08010544
 8007348:	080103c0 	.word	0x080103c0
 800734c:	200000fd 	.word	0x200000fd
 8007350:	2000688c 	.word	0x2000688c

08007354 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8007354:	b590      	push	{r4, r7, lr}
 8007356:	b08b      	sub	sp, #44	; 0x2c
 8007358:	af04      	add	r7, sp, #16
 800735a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800735c:	4b6f      	ldr	r3, [pc, #444]	; (800751c <tcp_listen_input+0x1c8>)
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	f003 0304 	and.w	r3, r3, #4
 8007364:	2b00      	cmp	r3, #0
 8007366:	f040 80d3 	bne.w	8007510 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d106      	bne.n	800737e <tcp_listen_input+0x2a>
 8007370:	4b6b      	ldr	r3, [pc, #428]	; (8007520 <tcp_listen_input+0x1cc>)
 8007372:	f240 2281 	movw	r2, #641	; 0x281
 8007376:	496b      	ldr	r1, [pc, #428]	; (8007524 <tcp_listen_input+0x1d0>)
 8007378:	486b      	ldr	r0, [pc, #428]	; (8007528 <tcp_listen_input+0x1d4>)
 800737a:	f006 ff85 	bl	800e288 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800737e:	4b67      	ldr	r3, [pc, #412]	; (800751c <tcp_listen_input+0x1c8>)
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	f003 0310 	and.w	r3, r3, #16
 8007386:	2b00      	cmp	r3, #0
 8007388:	d019      	beq.n	80073be <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800738a:	4b68      	ldr	r3, [pc, #416]	; (800752c <tcp_listen_input+0x1d8>)
 800738c:	6819      	ldr	r1, [r3, #0]
 800738e:	4b68      	ldr	r3, [pc, #416]	; (8007530 <tcp_listen_input+0x1dc>)
 8007390:	881b      	ldrh	r3, [r3, #0]
 8007392:	461a      	mov	r2, r3
 8007394:	4b67      	ldr	r3, [pc, #412]	; (8007534 <tcp_listen_input+0x1e0>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800739a:	4b67      	ldr	r3, [pc, #412]	; (8007538 <tcp_listen_input+0x1e4>)
 800739c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800739e:	885b      	ldrh	r3, [r3, #2]
 80073a0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80073a2:	4a65      	ldr	r2, [pc, #404]	; (8007538 <tcp_listen_input+0x1e4>)
 80073a4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80073a6:	8812      	ldrh	r2, [r2, #0]
 80073a8:	b292      	uxth	r2, r2
 80073aa:	9202      	str	r2, [sp, #8]
 80073ac:	9301      	str	r3, [sp, #4]
 80073ae:	4b63      	ldr	r3, [pc, #396]	; (800753c <tcp_listen_input+0x1e8>)
 80073b0:	9300      	str	r3, [sp, #0]
 80073b2:	4b63      	ldr	r3, [pc, #396]	; (8007540 <tcp_listen_input+0x1ec>)
 80073b4:	4602      	mov	r2, r0
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f003 fbe8 	bl	800ab8c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80073bc:	e0aa      	b.n	8007514 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 80073be:	4b57      	ldr	r3, [pc, #348]	; (800751c <tcp_listen_input+0x1c8>)
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	f003 0302 	and.w	r3, r3, #2
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	f000 80a4 	beq.w	8007514 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	7d5b      	ldrb	r3, [r3, #21]
 80073d0:	4618      	mov	r0, r3
 80073d2:	f7ff f863 	bl	800649c <tcp_alloc>
 80073d6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d111      	bne.n	8007402 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	699b      	ldr	r3, [r3, #24]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d00a      	beq.n	80073fc <tcp_listen_input+0xa8>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	699b      	ldr	r3, [r3, #24]
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	6910      	ldr	r0, [r2, #16]
 80073ee:	f04f 32ff 	mov.w	r2, #4294967295
 80073f2:	2100      	movs	r1, #0
 80073f4:	4798      	blx	r3
 80073f6:	4603      	mov	r3, r0
 80073f8:	73bb      	strb	r3, [r7, #14]
      return;
 80073fa:	e08c      	b.n	8007516 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80073fc:	23f0      	movs	r3, #240	; 0xf0
 80073fe:	73bb      	strb	r3, [r7, #14]
      return;
 8007400:	e089      	b.n	8007516 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8007402:	4b50      	ldr	r3, [pc, #320]	; (8007544 <tcp_listen_input+0x1f0>)
 8007404:	695a      	ldr	r2, [r3, #20]
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800740a:	4b4e      	ldr	r3, [pc, #312]	; (8007544 <tcp_listen_input+0x1f0>)
 800740c:	691a      	ldr	r2, [r3, #16]
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	8ada      	ldrh	r2, [r3, #22]
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800741a:	4b47      	ldr	r3, [pc, #284]	; (8007538 <tcp_listen_input+0x1e4>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	881b      	ldrh	r3, [r3, #0]
 8007420:	b29a      	uxth	r2, r3
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	2203      	movs	r2, #3
 800742a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800742c:	4b41      	ldr	r3, [pc, #260]	; (8007534 <tcp_listen_input+0x1e0>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	1c5a      	adds	r2, r3, #1
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800743e:	6978      	ldr	r0, [r7, #20]
 8007440:	f7ff fa5c 	bl	80068fc <tcp_next_iss>
 8007444:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	693a      	ldr	r2, [r7, #16]
 800744a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	693a      	ldr	r2, [r7, #16]
 8007450:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	693a      	ldr	r2, [r7, #16]
 8007456:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	693a      	ldr	r2, [r7, #16]
 800745c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800745e:	4b35      	ldr	r3, [pc, #212]	; (8007534 <tcp_listen_input+0x1e0>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	1e5a      	subs	r2, r3, #1
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	691a      	ldr	r2, [r3, #16]
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	7a5b      	ldrb	r3, [r3, #9]
 800747a:	f003 030c 	and.w	r3, r3, #12
 800747e:	b2da      	uxtb	r2, r3
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	7a1a      	ldrb	r2, [r3, #8]
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800748c:	4b2e      	ldr	r3, [pc, #184]	; (8007548 <tcp_listen_input+0x1f4>)
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	60da      	str	r2, [r3, #12]
 8007494:	4a2c      	ldr	r2, [pc, #176]	; (8007548 <tcp_listen_input+0x1f4>)
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	6013      	str	r3, [r2, #0]
 800749a:	f003 fd39 	bl	800af10 <tcp_timer_needed>
 800749e:	4b2b      	ldr	r3, [pc, #172]	; (800754c <tcp_listen_input+0x1f8>)
 80074a0:	2201      	movs	r2, #1
 80074a2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80074a4:	6978      	ldr	r0, [r7, #20]
 80074a6:	f001 fd8f 	bl	8008fc8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80074aa:	4b23      	ldr	r3, [pc, #140]	; (8007538 <tcp_listen_input+0x1e4>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	89db      	ldrh	r3, [r3, #14]
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	3304      	adds	r3, #4
 80074cc:	4618      	mov	r0, r3
 80074ce:	f005 fcb5 	bl	800ce3c <ip4_route>
 80074d2:	4601      	mov	r1, r0
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	3304      	adds	r3, #4
 80074d8:	461a      	mov	r2, r3
 80074da:	4620      	mov	r0, r4
 80074dc:	f7ff fa34 	bl	8006948 <tcp_eff_send_mss_netif>
 80074e0:	4603      	mov	r3, r0
 80074e2:	461a      	mov	r2, r3
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80074e8:	2112      	movs	r1, #18
 80074ea:	6978      	ldr	r0, [r7, #20]
 80074ec:	f002 fc9c 	bl	8009e28 <tcp_enqueue_flags>
 80074f0:	4603      	mov	r3, r0
 80074f2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80074f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d004      	beq.n	8007506 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80074fc:	2100      	movs	r1, #0
 80074fe:	6978      	ldr	r0, [r7, #20]
 8007500:	f7fd fee6 	bl	80052d0 <tcp_abandon>
      return;
 8007504:	e007      	b.n	8007516 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 8007506:	6978      	ldr	r0, [r7, #20]
 8007508:	f002 fd7c 	bl	800a004 <tcp_output>
  return;
 800750c:	bf00      	nop
 800750e:	e001      	b.n	8007514 <tcp_listen_input+0x1c0>
    return;
 8007510:	bf00      	nop
 8007512:	e000      	b.n	8007516 <tcp_listen_input+0x1c2>
  return;
 8007514:	bf00      	nop
}
 8007516:	371c      	adds	r7, #28
 8007518:	46bd      	mov	sp, r7
 800751a:	bd90      	pop	{r4, r7, pc}
 800751c:	200000fc 	.word	0x200000fc
 8007520:	08010374 	.word	0x08010374
 8007524:	0801056c 	.word	0x0801056c
 8007528:	080103c0 	.word	0x080103c0
 800752c:	200000f4 	.word	0x200000f4
 8007530:	200000fa 	.word	0x200000fa
 8007534:	200000f0 	.word	0x200000f0
 8007538:	200000e0 	.word	0x200000e0
 800753c:	20003358 	.word	0x20003358
 8007540:	2000335c 	.word	0x2000335c
 8007544:	20003348 	.word	0x20003348
 8007548:	2000688c 	.word	0x2000688c
 800754c:	20006888 	.word	0x20006888

08007550 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b086      	sub	sp, #24
 8007554:	af04      	add	r7, sp, #16
 8007556:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8007558:	4b30      	ldr	r3, [pc, #192]	; (800761c <tcp_timewait_input+0xcc>)
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	f003 0304 	and.w	r3, r3, #4
 8007560:	2b00      	cmp	r3, #0
 8007562:	d154      	bne.n	800760e <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d106      	bne.n	8007578 <tcp_timewait_input+0x28>
 800756a:	4b2d      	ldr	r3, [pc, #180]	; (8007620 <tcp_timewait_input+0xd0>)
 800756c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8007570:	492c      	ldr	r1, [pc, #176]	; (8007624 <tcp_timewait_input+0xd4>)
 8007572:	482d      	ldr	r0, [pc, #180]	; (8007628 <tcp_timewait_input+0xd8>)
 8007574:	f006 fe88 	bl	800e288 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8007578:	4b28      	ldr	r3, [pc, #160]	; (800761c <tcp_timewait_input+0xcc>)
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	f003 0302 	and.w	r3, r3, #2
 8007580:	2b00      	cmp	r3, #0
 8007582:	d02a      	beq.n	80075da <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8007584:	4b29      	ldr	r3, [pc, #164]	; (800762c <tcp_timewait_input+0xdc>)
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758c:	1ad3      	subs	r3, r2, r3
 800758e:	2b00      	cmp	r3, #0
 8007590:	db2d      	blt.n	80075ee <tcp_timewait_input+0x9e>
 8007592:	4b26      	ldr	r3, [pc, #152]	; (800762c <tcp_timewait_input+0xdc>)
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759a:	6879      	ldr	r1, [r7, #4]
 800759c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800759e:	440b      	add	r3, r1
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	dc23      	bgt.n	80075ee <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80075a6:	4b22      	ldr	r3, [pc, #136]	; (8007630 <tcp_timewait_input+0xe0>)
 80075a8:	6819      	ldr	r1, [r3, #0]
 80075aa:	4b22      	ldr	r3, [pc, #136]	; (8007634 <tcp_timewait_input+0xe4>)
 80075ac:	881b      	ldrh	r3, [r3, #0]
 80075ae:	461a      	mov	r2, r3
 80075b0:	4b1e      	ldr	r3, [pc, #120]	; (800762c <tcp_timewait_input+0xdc>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80075b6:	4b20      	ldr	r3, [pc, #128]	; (8007638 <tcp_timewait_input+0xe8>)
 80075b8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80075ba:	885b      	ldrh	r3, [r3, #2]
 80075bc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80075be:	4a1e      	ldr	r2, [pc, #120]	; (8007638 <tcp_timewait_input+0xe8>)
 80075c0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80075c2:	8812      	ldrh	r2, [r2, #0]
 80075c4:	b292      	uxth	r2, r2
 80075c6:	9202      	str	r2, [sp, #8]
 80075c8:	9301      	str	r3, [sp, #4]
 80075ca:	4b1c      	ldr	r3, [pc, #112]	; (800763c <tcp_timewait_input+0xec>)
 80075cc:	9300      	str	r3, [sp, #0]
 80075ce:	4b1c      	ldr	r3, [pc, #112]	; (8007640 <tcp_timewait_input+0xf0>)
 80075d0:	4602      	mov	r2, r0
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f003 fada 	bl	800ab8c <tcp_rst>
      return;
 80075d8:	e01c      	b.n	8007614 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 80075da:	4b10      	ldr	r3, [pc, #64]	; (800761c <tcp_timewait_input+0xcc>)
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	f003 0301 	and.w	r3, r3, #1
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d003      	beq.n	80075ee <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80075e6:	4b17      	ldr	r3, [pc, #92]	; (8007644 <tcp_timewait_input+0xf4>)
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80075ee:	4b11      	ldr	r3, [pc, #68]	; (8007634 <tcp_timewait_input+0xe4>)
 80075f0:	881b      	ldrh	r3, [r3, #0]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00d      	beq.n	8007612 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	8b5b      	ldrh	r3, [r3, #26]
 80075fa:	f043 0302 	orr.w	r3, r3, #2
 80075fe:	b29a      	uxth	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f002 fcfd 	bl	800a004 <tcp_output>
  }
  return;
 800760a:	bf00      	nop
 800760c:	e001      	b.n	8007612 <tcp_timewait_input+0xc2>
    return;
 800760e:	bf00      	nop
 8007610:	e000      	b.n	8007614 <tcp_timewait_input+0xc4>
  return;
 8007612:	bf00      	nop
}
 8007614:	3708      	adds	r7, #8
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop
 800761c:	200000fc 	.word	0x200000fc
 8007620:	08010374 	.word	0x08010374
 8007624:	0801058c 	.word	0x0801058c
 8007628:	080103c0 	.word	0x080103c0
 800762c:	200000f0 	.word	0x200000f0
 8007630:	200000f4 	.word	0x200000f4
 8007634:	200000fa 	.word	0x200000fa
 8007638:	200000e0 	.word	0x200000e0
 800763c:	20003358 	.word	0x20003358
 8007640:	2000335c 	.word	0x2000335c
 8007644:	20006890 	.word	0x20006890

08007648 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8007648:	b590      	push	{r4, r7, lr}
 800764a:	b08d      	sub	sp, #52	; 0x34
 800764c:	af04      	add	r7, sp, #16
 800764e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8007650:	2300      	movs	r3, #0
 8007652:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8007654:	2300      	movs	r3, #0
 8007656:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d106      	bne.n	800766c <tcp_process+0x24>
 800765e:	4ba5      	ldr	r3, [pc, #660]	; (80078f4 <tcp_process+0x2ac>)
 8007660:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8007664:	49a4      	ldr	r1, [pc, #656]	; (80078f8 <tcp_process+0x2b0>)
 8007666:	48a5      	ldr	r0, [pc, #660]	; (80078fc <tcp_process+0x2b4>)
 8007668:	f006 fe0e 	bl	800e288 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800766c:	4ba4      	ldr	r3, [pc, #656]	; (8007900 <tcp_process+0x2b8>)
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	f003 0304 	and.w	r3, r3, #4
 8007674:	2b00      	cmp	r3, #0
 8007676:	d04e      	beq.n	8007716 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	7d1b      	ldrb	r3, [r3, #20]
 800767c:	2b02      	cmp	r3, #2
 800767e:	d108      	bne.n	8007692 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007684:	4b9f      	ldr	r3, [pc, #636]	; (8007904 <tcp_process+0x2bc>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	429a      	cmp	r2, r3
 800768a:	d123      	bne.n	80076d4 <tcp_process+0x8c>
        acceptable = 1;
 800768c:	2301      	movs	r3, #1
 800768e:	76fb      	strb	r3, [r7, #27]
 8007690:	e020      	b.n	80076d4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007696:	4b9c      	ldr	r3, [pc, #624]	; (8007908 <tcp_process+0x2c0>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	429a      	cmp	r2, r3
 800769c:	d102      	bne.n	80076a4 <tcp_process+0x5c>
        acceptable = 1;
 800769e:	2301      	movs	r3, #1
 80076a0:	76fb      	strb	r3, [r7, #27]
 80076a2:	e017      	b.n	80076d4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80076a4:	4b98      	ldr	r3, [pc, #608]	; (8007908 <tcp_process+0x2c0>)
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	db10      	blt.n	80076d4 <tcp_process+0x8c>
 80076b2:	4b95      	ldr	r3, [pc, #596]	; (8007908 <tcp_process+0x2c0>)
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ba:	6879      	ldr	r1, [r7, #4]
 80076bc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80076be:	440b      	add	r3, r1
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	dc06      	bgt.n	80076d4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	8b5b      	ldrh	r3, [r3, #26]
 80076ca:	f043 0302 	orr.w	r3, r3, #2
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80076d4:	7efb      	ldrb	r3, [r7, #27]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d01b      	beq.n	8007712 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	7d1b      	ldrb	r3, [r3, #20]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d106      	bne.n	80076f0 <tcp_process+0xa8>
 80076e2:	4b84      	ldr	r3, [pc, #528]	; (80078f4 <tcp_process+0x2ac>)
 80076e4:	f44f 724e 	mov.w	r2, #824	; 0x338
 80076e8:	4988      	ldr	r1, [pc, #544]	; (800790c <tcp_process+0x2c4>)
 80076ea:	4884      	ldr	r0, [pc, #528]	; (80078fc <tcp_process+0x2b4>)
 80076ec:	f006 fdcc 	bl	800e288 <iprintf>
      recv_flags |= TF_RESET;
 80076f0:	4b87      	ldr	r3, [pc, #540]	; (8007910 <tcp_process+0x2c8>)
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	f043 0308 	orr.w	r3, r3, #8
 80076f8:	b2da      	uxtb	r2, r3
 80076fa:	4b85      	ldr	r3, [pc, #532]	; (8007910 <tcp_process+0x2c8>)
 80076fc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	8b5b      	ldrh	r3, [r3, #26]
 8007702:	f023 0301 	bic.w	r3, r3, #1
 8007706:	b29a      	uxth	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800770c:	f06f 030d 	mvn.w	r3, #13
 8007710:	e37a      	b.n	8007e08 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8007712:	2300      	movs	r3, #0
 8007714:	e378      	b.n	8007e08 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8007716:	4b7a      	ldr	r3, [pc, #488]	; (8007900 <tcp_process+0x2b8>)
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	f003 0302 	and.w	r3, r3, #2
 800771e:	2b00      	cmp	r3, #0
 8007720:	d010      	beq.n	8007744 <tcp_process+0xfc>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	7d1b      	ldrb	r3, [r3, #20]
 8007726:	2b02      	cmp	r3, #2
 8007728:	d00c      	beq.n	8007744 <tcp_process+0xfc>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	7d1b      	ldrb	r3, [r3, #20]
 800772e:	2b03      	cmp	r3, #3
 8007730:	d008      	beq.n	8007744 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	8b5b      	ldrh	r3, [r3, #26]
 8007736:	f043 0302 	orr.w	r3, r3, #2
 800773a:	b29a      	uxth	r2, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8007740:	2300      	movs	r3, #0
 8007742:	e361      	b.n	8007e08 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	8b5b      	ldrh	r3, [r3, #26]
 8007748:	f003 0310 	and.w	r3, r3, #16
 800774c:	2b00      	cmp	r3, #0
 800774e:	d103      	bne.n	8007758 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8007750:	4b70      	ldr	r3, [pc, #448]	; (8007914 <tcp_process+0x2cc>)
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f001 fc2d 	bl	8008fc8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	7d1b      	ldrb	r3, [r3, #20]
 8007772:	3b02      	subs	r3, #2
 8007774:	2b07      	cmp	r3, #7
 8007776:	f200 8337 	bhi.w	8007de8 <tcp_process+0x7a0>
 800777a:	a201      	add	r2, pc, #4	; (adr r2, 8007780 <tcp_process+0x138>)
 800777c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007780:	080077a1 	.word	0x080077a1
 8007784:	080079d1 	.word	0x080079d1
 8007788:	08007b49 	.word	0x08007b49
 800778c:	08007b73 	.word	0x08007b73
 8007790:	08007c97 	.word	0x08007c97
 8007794:	08007b49 	.word	0x08007b49
 8007798:	08007d23 	.word	0x08007d23
 800779c:	08007db3 	.word	0x08007db3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80077a0:	4b57      	ldr	r3, [pc, #348]	; (8007900 <tcp_process+0x2b8>)
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	f003 0310 	and.w	r3, r3, #16
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	f000 80e4 	beq.w	8007976 <tcp_process+0x32e>
 80077ae:	4b54      	ldr	r3, [pc, #336]	; (8007900 <tcp_process+0x2b8>)
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	f003 0302 	and.w	r3, r3, #2
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	f000 80dd 	beq.w	8007976 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077c0:	1c5a      	adds	r2, r3, #1
 80077c2:	4b50      	ldr	r3, [pc, #320]	; (8007904 <tcp_process+0x2bc>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	f040 80d5 	bne.w	8007976 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80077cc:	4b4e      	ldr	r3, [pc, #312]	; (8007908 <tcp_process+0x2c0>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	1c5a      	adds	r2, r3, #1
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80077de:	4b49      	ldr	r3, [pc, #292]	; (8007904 <tcp_process+0x2bc>)
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80077e6:	4b4c      	ldr	r3, [pc, #304]	; (8007918 <tcp_process+0x2d0>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	89db      	ldrh	r3, [r3, #14]
 80077ec:	b29a      	uxth	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8007800:	4b41      	ldr	r3, [pc, #260]	; (8007908 <tcp_process+0x2c0>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	1e5a      	subs	r2, r3, #1
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2204      	movs	r2, #4
 800780e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	3304      	adds	r3, #4
 8007818:	4618      	mov	r0, r3
 800781a:	f005 fb0f 	bl	800ce3c <ip4_route>
 800781e:	4601      	mov	r1, r0
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	3304      	adds	r3, #4
 8007824:	461a      	mov	r2, r3
 8007826:	4620      	mov	r0, r4
 8007828:	f7ff f88e 	bl	8006948 <tcp_eff_send_mss_netif>
 800782c:	4603      	mov	r3, r0
 800782e:	461a      	mov	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007838:	009a      	lsls	r2, r3, #2
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800783e:	005b      	lsls	r3, r3, #1
 8007840:	f241 111c 	movw	r1, #4380	; 0x111c
 8007844:	428b      	cmp	r3, r1
 8007846:	bf38      	it	cc
 8007848:	460b      	movcc	r3, r1
 800784a:	429a      	cmp	r2, r3
 800784c:	d204      	bcs.n	8007858 <tcp_process+0x210>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	b29b      	uxth	r3, r3
 8007856:	e00d      	b.n	8007874 <tcp_process+0x22c>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800785c:	005b      	lsls	r3, r3, #1
 800785e:	f241 121c 	movw	r2, #4380	; 0x111c
 8007862:	4293      	cmp	r3, r2
 8007864:	d904      	bls.n	8007870 <tcp_process+0x228>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800786a:	005b      	lsls	r3, r3, #1
 800786c:	b29b      	uxth	r3, r3
 800786e:	e001      	b.n	8007874 <tcp_process+0x22c>
 8007870:	f241 131c 	movw	r3, #4380	; 0x111c
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007880:	2b00      	cmp	r3, #0
 8007882:	d106      	bne.n	8007892 <tcp_process+0x24a>
 8007884:	4b1b      	ldr	r3, [pc, #108]	; (80078f4 <tcp_process+0x2ac>)
 8007886:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800788a:	4924      	ldr	r1, [pc, #144]	; (800791c <tcp_process+0x2d4>)
 800788c:	481b      	ldr	r0, [pc, #108]	; (80078fc <tcp_process+0x2b4>)
 800788e:	f006 fcfb 	bl	800e288 <iprintf>
        --pcb->snd_queuelen;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007898:	3b01      	subs	r3, #1
 800789a:	b29a      	uxth	r2, r3
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078a6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d111      	bne.n	80078d2 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078b2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d106      	bne.n	80078c8 <tcp_process+0x280>
 80078ba:	4b0e      	ldr	r3, [pc, #56]	; (80078f4 <tcp_process+0x2ac>)
 80078bc:	f44f 725d 	mov.w	r2, #884	; 0x374
 80078c0:	4917      	ldr	r1, [pc, #92]	; (8007920 <tcp_process+0x2d8>)
 80078c2:	480e      	ldr	r0, [pc, #56]	; (80078fc <tcp_process+0x2b4>)
 80078c4:	f006 fce0 	bl	800e288 <iprintf>
          pcb->unsent = rseg->next;
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	66da      	str	r2, [r3, #108]	; 0x6c
 80078d0:	e003      	b.n	80078da <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80078da:	69f8      	ldr	r0, [r7, #28]
 80078dc:	f7fe fc58 	bl	8006190 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d11d      	bne.n	8007924 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80078ee:	861a      	strh	r2, [r3, #48]	; 0x30
 80078f0:	e01f      	b.n	8007932 <tcp_process+0x2ea>
 80078f2:	bf00      	nop
 80078f4:	08010374 	.word	0x08010374
 80078f8:	080105ac 	.word	0x080105ac
 80078fc:	080103c0 	.word	0x080103c0
 8007900:	200000fc 	.word	0x200000fc
 8007904:	200000f4 	.word	0x200000f4
 8007908:	200000f0 	.word	0x200000f0
 800790c:	080105c8 	.word	0x080105c8
 8007910:	200000fd 	.word	0x200000fd
 8007914:	20006890 	.word	0x20006890
 8007918:	200000e0 	.word	0x200000e0
 800791c:	080105e8 	.word	0x080105e8
 8007920:	08010600 	.word	0x08010600
        } else {
          pcb->rtime = 0;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007938:	2b00      	cmp	r3, #0
 800793a:	d00a      	beq.n	8007952 <tcp_process+0x30a>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	6910      	ldr	r0, [r2, #16]
 8007946:	2200      	movs	r2, #0
 8007948:	6879      	ldr	r1, [r7, #4]
 800794a:	4798      	blx	r3
 800794c:	4603      	mov	r3, r0
 800794e:	76bb      	strb	r3, [r7, #26]
 8007950:	e001      	b.n	8007956 <tcp_process+0x30e>
 8007952:	2300      	movs	r3, #0
 8007954:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8007956:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800795a:	f113 0f0d 	cmn.w	r3, #13
 800795e:	d102      	bne.n	8007966 <tcp_process+0x31e>
          return ERR_ABRT;
 8007960:	f06f 030c 	mvn.w	r3, #12
 8007964:	e250      	b.n	8007e08 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	8b5b      	ldrh	r3, [r3, #26]
 800796a:	f043 0302 	orr.w	r3, r3, #2
 800796e:	b29a      	uxth	r2, r3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8007974:	e23a      	b.n	8007dec <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8007976:	4b9d      	ldr	r3, [pc, #628]	; (8007bec <tcp_process+0x5a4>)
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	f003 0310 	and.w	r3, r3, #16
 800797e:	2b00      	cmp	r3, #0
 8007980:	f000 8234 	beq.w	8007dec <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007984:	4b9a      	ldr	r3, [pc, #616]	; (8007bf0 <tcp_process+0x5a8>)
 8007986:	6819      	ldr	r1, [r3, #0]
 8007988:	4b9a      	ldr	r3, [pc, #616]	; (8007bf4 <tcp_process+0x5ac>)
 800798a:	881b      	ldrh	r3, [r3, #0]
 800798c:	461a      	mov	r2, r3
 800798e:	4b9a      	ldr	r3, [pc, #616]	; (8007bf8 <tcp_process+0x5b0>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007994:	4b99      	ldr	r3, [pc, #612]	; (8007bfc <tcp_process+0x5b4>)
 8007996:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007998:	885b      	ldrh	r3, [r3, #2]
 800799a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800799c:	4a97      	ldr	r2, [pc, #604]	; (8007bfc <tcp_process+0x5b4>)
 800799e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80079a0:	8812      	ldrh	r2, [r2, #0]
 80079a2:	b292      	uxth	r2, r2
 80079a4:	9202      	str	r2, [sp, #8]
 80079a6:	9301      	str	r3, [sp, #4]
 80079a8:	4b95      	ldr	r3, [pc, #596]	; (8007c00 <tcp_process+0x5b8>)
 80079aa:	9300      	str	r3, [sp, #0]
 80079ac:	4b95      	ldr	r3, [pc, #596]	; (8007c04 <tcp_process+0x5bc>)
 80079ae:	4602      	mov	r2, r0
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f003 f8eb 	bl	800ab8c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80079bc:	2b05      	cmp	r3, #5
 80079be:	f200 8215 	bhi.w	8007dec <tcp_process+0x7a4>
          pcb->rtime = 0;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f002 feab 	bl	800a724 <tcp_rexmit_rto>
      break;
 80079ce:	e20d      	b.n	8007dec <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80079d0:	4b86      	ldr	r3, [pc, #536]	; (8007bec <tcp_process+0x5a4>)
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	f003 0310 	and.w	r3, r3, #16
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f000 80a1 	beq.w	8007b20 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80079de:	4b84      	ldr	r3, [pc, #528]	; (8007bf0 <tcp_process+0x5a8>)
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079e6:	1ad3      	subs	r3, r2, r3
 80079e8:	3b01      	subs	r3, #1
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	db7e      	blt.n	8007aec <tcp_process+0x4a4>
 80079ee:	4b80      	ldr	r3, [pc, #512]	; (8007bf0 <tcp_process+0x5a8>)
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079f6:	1ad3      	subs	r3, r2, r3
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	dc77      	bgt.n	8007aec <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2204      	movs	r2, #4
 8007a00:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d102      	bne.n	8007a10 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8007a0a:	23fa      	movs	r3, #250	; 0xfa
 8007a0c:	76bb      	strb	r3, [r7, #26]
 8007a0e:	e01d      	b.n	8007a4c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a14:	699b      	ldr	r3, [r3, #24]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d106      	bne.n	8007a28 <tcp_process+0x3e0>
 8007a1a:	4b7b      	ldr	r3, [pc, #492]	; (8007c08 <tcp_process+0x5c0>)
 8007a1c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8007a20:	497a      	ldr	r1, [pc, #488]	; (8007c0c <tcp_process+0x5c4>)
 8007a22:	487b      	ldr	r0, [pc, #492]	; (8007c10 <tcp_process+0x5c8>)
 8007a24:	f006 fc30 	bl	800e288 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a2c:	699b      	ldr	r3, [r3, #24]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00a      	beq.n	8007a48 <tcp_process+0x400>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a36:	699b      	ldr	r3, [r3, #24]
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	6910      	ldr	r0, [r2, #16]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	6879      	ldr	r1, [r7, #4]
 8007a40:	4798      	blx	r3
 8007a42:	4603      	mov	r3, r0
 8007a44:	76bb      	strb	r3, [r7, #26]
 8007a46:	e001      	b.n	8007a4c <tcp_process+0x404>
 8007a48:	23f0      	movs	r3, #240	; 0xf0
 8007a4a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8007a4c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00a      	beq.n	8007a6a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8007a54:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007a58:	f113 0f0d 	cmn.w	r3, #13
 8007a5c:	d002      	beq.n	8007a64 <tcp_process+0x41c>
              tcp_abort(pcb);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f7fd fcf4 	bl	800544c <tcp_abort>
            }
            return ERR_ABRT;
 8007a64:	f06f 030c 	mvn.w	r3, #12
 8007a68:	e1ce      	b.n	8007e08 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 fae0 	bl	8008030 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8007a70:	4b68      	ldr	r3, [pc, #416]	; (8007c14 <tcp_process+0x5cc>)
 8007a72:	881b      	ldrh	r3, [r3, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d005      	beq.n	8007a84 <tcp_process+0x43c>
            recv_acked--;
 8007a78:	4b66      	ldr	r3, [pc, #408]	; (8007c14 <tcp_process+0x5cc>)
 8007a7a:	881b      	ldrh	r3, [r3, #0]
 8007a7c:	3b01      	subs	r3, #1
 8007a7e:	b29a      	uxth	r2, r3
 8007a80:	4b64      	ldr	r3, [pc, #400]	; (8007c14 <tcp_process+0x5cc>)
 8007a82:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007a88:	009a      	lsls	r2, r3, #2
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007a8e:	005b      	lsls	r3, r3, #1
 8007a90:	f241 111c 	movw	r1, #4380	; 0x111c
 8007a94:	428b      	cmp	r3, r1
 8007a96:	bf38      	it	cc
 8007a98:	460b      	movcc	r3, r1
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d204      	bcs.n	8007aa8 <tcp_process+0x460>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	e00d      	b.n	8007ac4 <tcp_process+0x47c>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007aac:	005b      	lsls	r3, r3, #1
 8007aae:	f241 121c 	movw	r2, #4380	; 0x111c
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d904      	bls.n	8007ac0 <tcp_process+0x478>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007aba:	005b      	lsls	r3, r3, #1
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	e001      	b.n	8007ac4 <tcp_process+0x47c>
 8007ac0:	f241 131c 	movw	r3, #4380	; 0x111c
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8007aca:	4b53      	ldr	r3, [pc, #332]	; (8007c18 <tcp_process+0x5d0>)
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	f003 0320 	and.w	r3, r3, #32
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d037      	beq.n	8007b46 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	8b5b      	ldrh	r3, [r3, #26]
 8007ada:	f043 0302 	orr.w	r3, r3, #2
 8007ade:	b29a      	uxth	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2207      	movs	r2, #7
 8007ae8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8007aea:	e02c      	b.n	8007b46 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007aec:	4b40      	ldr	r3, [pc, #256]	; (8007bf0 <tcp_process+0x5a8>)
 8007aee:	6819      	ldr	r1, [r3, #0]
 8007af0:	4b40      	ldr	r3, [pc, #256]	; (8007bf4 <tcp_process+0x5ac>)
 8007af2:	881b      	ldrh	r3, [r3, #0]
 8007af4:	461a      	mov	r2, r3
 8007af6:	4b40      	ldr	r3, [pc, #256]	; (8007bf8 <tcp_process+0x5b0>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007afc:	4b3f      	ldr	r3, [pc, #252]	; (8007bfc <tcp_process+0x5b4>)
 8007afe:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007b00:	885b      	ldrh	r3, [r3, #2]
 8007b02:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007b04:	4a3d      	ldr	r2, [pc, #244]	; (8007bfc <tcp_process+0x5b4>)
 8007b06:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007b08:	8812      	ldrh	r2, [r2, #0]
 8007b0a:	b292      	uxth	r2, r2
 8007b0c:	9202      	str	r2, [sp, #8]
 8007b0e:	9301      	str	r3, [sp, #4]
 8007b10:	4b3b      	ldr	r3, [pc, #236]	; (8007c00 <tcp_process+0x5b8>)
 8007b12:	9300      	str	r3, [sp, #0]
 8007b14:	4b3b      	ldr	r3, [pc, #236]	; (8007c04 <tcp_process+0x5bc>)
 8007b16:	4602      	mov	r2, r0
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f003 f837 	bl	800ab8c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8007b1e:	e167      	b.n	8007df0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8007b20:	4b32      	ldr	r3, [pc, #200]	; (8007bec <tcp_process+0x5a4>)
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	f003 0302 	and.w	r3, r3, #2
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	f000 8161 	beq.w	8007df0 <tcp_process+0x7a8>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b32:	1e5a      	subs	r2, r3, #1
 8007b34:	4b30      	ldr	r3, [pc, #192]	; (8007bf8 <tcp_process+0x5b0>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	f040 8159 	bne.w	8007df0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f002 fe12 	bl	800a768 <tcp_rexmit>
      break;
 8007b44:	e154      	b.n	8007df0 <tcp_process+0x7a8>
 8007b46:	e153      	b.n	8007df0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 fa71 	bl	8008030 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8007b4e:	4b32      	ldr	r3, [pc, #200]	; (8007c18 <tcp_process+0x5d0>)
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	f003 0320 	and.w	r3, r3, #32
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	f000 814c 	beq.w	8007df4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	8b5b      	ldrh	r3, [r3, #26]
 8007b60:	f043 0302 	orr.w	r3, r3, #2
 8007b64:	b29a      	uxth	r2, r3
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2207      	movs	r2, #7
 8007b6e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007b70:	e140      	b.n	8007df4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fa5c 	bl	8008030 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8007b78:	4b27      	ldr	r3, [pc, #156]	; (8007c18 <tcp_process+0x5d0>)
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	f003 0320 	and.w	r3, r3, #32
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d071      	beq.n	8007c68 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007b84:	4b19      	ldr	r3, [pc, #100]	; (8007bec <tcp_process+0x5a4>)
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	f003 0310 	and.w	r3, r3, #16
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d060      	beq.n	8007c52 <tcp_process+0x60a>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b94:	4b16      	ldr	r3, [pc, #88]	; (8007bf0 <tcp_process+0x5a8>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d15a      	bne.n	8007c52 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d156      	bne.n	8007c52 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	8b5b      	ldrh	r3, [r3, #26]
 8007ba8:	f043 0302 	orr.w	r3, r3, #2
 8007bac:	b29a      	uxth	r2, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f7fe fdbe 	bl	8006734 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8007bb8:	4b18      	ldr	r3, [pc, #96]	; (8007c1c <tcp_process+0x5d4>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d105      	bne.n	8007bce <tcp_process+0x586>
 8007bc2:	4b16      	ldr	r3, [pc, #88]	; (8007c1c <tcp_process+0x5d4>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	4a14      	ldr	r2, [pc, #80]	; (8007c1c <tcp_process+0x5d4>)
 8007bca:	6013      	str	r3, [r2, #0]
 8007bcc:	e02e      	b.n	8007c2c <tcp_process+0x5e4>
 8007bce:	4b13      	ldr	r3, [pc, #76]	; (8007c1c <tcp_process+0x5d4>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	617b      	str	r3, [r7, #20]
 8007bd4:	e027      	b.n	8007c26 <tcp_process+0x5de>
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d11f      	bne.n	8007c20 <tcp_process+0x5d8>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	68da      	ldr	r2, [r3, #12]
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	60da      	str	r2, [r3, #12]
 8007be8:	e020      	b.n	8007c2c <tcp_process+0x5e4>
 8007bea:	bf00      	nop
 8007bec:	200000fc 	.word	0x200000fc
 8007bf0:	200000f4 	.word	0x200000f4
 8007bf4:	200000fa 	.word	0x200000fa
 8007bf8:	200000f0 	.word	0x200000f0
 8007bfc:	200000e0 	.word	0x200000e0
 8007c00:	20003358 	.word	0x20003358
 8007c04:	2000335c 	.word	0x2000335c
 8007c08:	08010374 	.word	0x08010374
 8007c0c:	08010614 	.word	0x08010614
 8007c10:	080103c0 	.word	0x080103c0
 8007c14:	200000f8 	.word	0x200000f8
 8007c18:	200000fd 	.word	0x200000fd
 8007c1c:	2000688c 	.word	0x2000688c
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	617b      	str	r3, [r7, #20]
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d1d4      	bne.n	8007bd6 <tcp_process+0x58e>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	60da      	str	r2, [r3, #12]
 8007c32:	4b77      	ldr	r3, [pc, #476]	; (8007e10 <tcp_process+0x7c8>)
 8007c34:	2201      	movs	r2, #1
 8007c36:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	220a      	movs	r2, #10
 8007c3c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8007c3e:	4b75      	ldr	r3, [pc, #468]	; (8007e14 <tcp_process+0x7cc>)
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	60da      	str	r2, [r3, #12]
 8007c46:	4a73      	ldr	r2, [pc, #460]	; (8007e14 <tcp_process+0x7cc>)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6013      	str	r3, [r2, #0]
 8007c4c:	f003 f960 	bl	800af10 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8007c50:	e0d2      	b.n	8007df8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	8b5b      	ldrh	r3, [r3, #26]
 8007c56:	f043 0302 	orr.w	r3, r3, #2
 8007c5a:	b29a      	uxth	r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2208      	movs	r2, #8
 8007c64:	751a      	strb	r2, [r3, #20]
      break;
 8007c66:	e0c7      	b.n	8007df8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007c68:	4b6b      	ldr	r3, [pc, #428]	; (8007e18 <tcp_process+0x7d0>)
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	f003 0310 	and.w	r3, r3, #16
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	f000 80c1 	beq.w	8007df8 <tcp_process+0x7b0>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007c7a:	4b68      	ldr	r3, [pc, #416]	; (8007e1c <tcp_process+0x7d4>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	f040 80ba 	bne.w	8007df8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f040 80b5 	bne.w	8007df8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2206      	movs	r2, #6
 8007c92:	751a      	strb	r2, [r3, #20]
      break;
 8007c94:	e0b0      	b.n	8007df8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 f9ca 	bl	8008030 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8007c9c:	4b60      	ldr	r3, [pc, #384]	; (8007e20 <tcp_process+0x7d8>)
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	f003 0320 	and.w	r3, r3, #32
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	f000 80a9 	beq.w	8007dfc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	8b5b      	ldrh	r3, [r3, #26]
 8007cae:	f043 0302 	orr.w	r3, r3, #2
 8007cb2:	b29a      	uxth	r2, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f7fe fd3b 	bl	8006734 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8007cbe:	4b59      	ldr	r3, [pc, #356]	; (8007e24 <tcp_process+0x7dc>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d105      	bne.n	8007cd4 <tcp_process+0x68c>
 8007cc8:	4b56      	ldr	r3, [pc, #344]	; (8007e24 <tcp_process+0x7dc>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	4a55      	ldr	r2, [pc, #340]	; (8007e24 <tcp_process+0x7dc>)
 8007cd0:	6013      	str	r3, [r2, #0]
 8007cd2:	e013      	b.n	8007cfc <tcp_process+0x6b4>
 8007cd4:	4b53      	ldr	r3, [pc, #332]	; (8007e24 <tcp_process+0x7dc>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	613b      	str	r3, [r7, #16]
 8007cda:	e00c      	b.n	8007cf6 <tcp_process+0x6ae>
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d104      	bne.n	8007cf0 <tcp_process+0x6a8>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	68da      	ldr	r2, [r3, #12]
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	60da      	str	r2, [r3, #12]
 8007cee:	e005      	b.n	8007cfc <tcp_process+0x6b4>
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	613b      	str	r3, [r7, #16]
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d1ef      	bne.n	8007cdc <tcp_process+0x694>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	60da      	str	r2, [r3, #12]
 8007d02:	4b43      	ldr	r3, [pc, #268]	; (8007e10 <tcp_process+0x7c8>)
 8007d04:	2201      	movs	r2, #1
 8007d06:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	220a      	movs	r2, #10
 8007d0c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8007d0e:	4b41      	ldr	r3, [pc, #260]	; (8007e14 <tcp_process+0x7cc>)
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	60da      	str	r2, [r3, #12]
 8007d16:	4a3f      	ldr	r2, [pc, #252]	; (8007e14 <tcp_process+0x7cc>)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6013      	str	r3, [r2, #0]
 8007d1c:	f003 f8f8 	bl	800af10 <tcp_timer_needed>
      }
      break;
 8007d20:	e06c      	b.n	8007dfc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f984 	bl	8008030 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007d28:	4b3b      	ldr	r3, [pc, #236]	; (8007e18 <tcp_process+0x7d0>)
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	f003 0310 	and.w	r3, r3, #16
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d065      	beq.n	8007e00 <tcp_process+0x7b8>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007d38:	4b38      	ldr	r3, [pc, #224]	; (8007e1c <tcp_process+0x7d4>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d15f      	bne.n	8007e00 <tcp_process+0x7b8>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d15b      	bne.n	8007e00 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f7fe fcf3 	bl	8006734 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8007d4e:	4b35      	ldr	r3, [pc, #212]	; (8007e24 <tcp_process+0x7dc>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d105      	bne.n	8007d64 <tcp_process+0x71c>
 8007d58:	4b32      	ldr	r3, [pc, #200]	; (8007e24 <tcp_process+0x7dc>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	4a31      	ldr	r2, [pc, #196]	; (8007e24 <tcp_process+0x7dc>)
 8007d60:	6013      	str	r3, [r2, #0]
 8007d62:	e013      	b.n	8007d8c <tcp_process+0x744>
 8007d64:	4b2f      	ldr	r3, [pc, #188]	; (8007e24 <tcp_process+0x7dc>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	60fb      	str	r3, [r7, #12]
 8007d6a:	e00c      	b.n	8007d86 <tcp_process+0x73e>
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d104      	bne.n	8007d80 <tcp_process+0x738>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	68da      	ldr	r2, [r3, #12]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	60da      	str	r2, [r3, #12]
 8007d7e:	e005      	b.n	8007d8c <tcp_process+0x744>
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	60fb      	str	r3, [r7, #12]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d1ef      	bne.n	8007d6c <tcp_process+0x724>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	60da      	str	r2, [r3, #12]
 8007d92:	4b1f      	ldr	r3, [pc, #124]	; (8007e10 <tcp_process+0x7c8>)
 8007d94:	2201      	movs	r2, #1
 8007d96:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	220a      	movs	r2, #10
 8007d9c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8007d9e:	4b1d      	ldr	r3, [pc, #116]	; (8007e14 <tcp_process+0x7cc>)
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	60da      	str	r2, [r3, #12]
 8007da6:	4a1b      	ldr	r2, [pc, #108]	; (8007e14 <tcp_process+0x7cc>)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6013      	str	r3, [r2, #0]
 8007dac:	f003 f8b0 	bl	800af10 <tcp_timer_needed>
      }
      break;
 8007db0:	e026      	b.n	8007e00 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 f93c 	bl	8008030 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007db8:	4b17      	ldr	r3, [pc, #92]	; (8007e18 <tcp_process+0x7d0>)
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	f003 0310 	and.w	r3, r3, #16
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d01f      	beq.n	8007e04 <tcp_process+0x7bc>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007dc8:	4b14      	ldr	r3, [pc, #80]	; (8007e1c <tcp_process+0x7d4>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d119      	bne.n	8007e04 <tcp_process+0x7bc>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d115      	bne.n	8007e04 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8007dd8:	4b11      	ldr	r3, [pc, #68]	; (8007e20 <tcp_process+0x7d8>)
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	f043 0310 	orr.w	r3, r3, #16
 8007de0:	b2da      	uxtb	r2, r3
 8007de2:	4b0f      	ldr	r3, [pc, #60]	; (8007e20 <tcp_process+0x7d8>)
 8007de4:	701a      	strb	r2, [r3, #0]
      }
      break;
 8007de6:	e00d      	b.n	8007e04 <tcp_process+0x7bc>
    default:
      break;
 8007de8:	bf00      	nop
 8007dea:	e00c      	b.n	8007e06 <tcp_process+0x7be>
      break;
 8007dec:	bf00      	nop
 8007dee:	e00a      	b.n	8007e06 <tcp_process+0x7be>
      break;
 8007df0:	bf00      	nop
 8007df2:	e008      	b.n	8007e06 <tcp_process+0x7be>
      break;
 8007df4:	bf00      	nop
 8007df6:	e006      	b.n	8007e06 <tcp_process+0x7be>
      break;
 8007df8:	bf00      	nop
 8007dfa:	e004      	b.n	8007e06 <tcp_process+0x7be>
      break;
 8007dfc:	bf00      	nop
 8007dfe:	e002      	b.n	8007e06 <tcp_process+0x7be>
      break;
 8007e00:	bf00      	nop
 8007e02:	e000      	b.n	8007e06 <tcp_process+0x7be>
      break;
 8007e04:	bf00      	nop
  }
  return ERR_OK;
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3724      	adds	r7, #36	; 0x24
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd90      	pop	{r4, r7, pc}
 8007e10:	20006888 	.word	0x20006888
 8007e14:	2000689c 	.word	0x2000689c
 8007e18:	200000fc 	.word	0x200000fc
 8007e1c:	200000f4 	.word	0x200000f4
 8007e20:	200000fd 	.word	0x200000fd
 8007e24:	2000688c 	.word	0x2000688c

08007e28 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8007e28:	b590      	push	{r4, r7, lr}
 8007e2a:	b085      	sub	sp, #20
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d106      	bne.n	8007e46 <tcp_oos_insert_segment+0x1e>
 8007e38:	4b3b      	ldr	r3, [pc, #236]	; (8007f28 <tcp_oos_insert_segment+0x100>)
 8007e3a:	f240 421f 	movw	r2, #1055	; 0x41f
 8007e3e:	493b      	ldr	r1, [pc, #236]	; (8007f2c <tcp_oos_insert_segment+0x104>)
 8007e40:	483b      	ldr	r0, [pc, #236]	; (8007f30 <tcp_oos_insert_segment+0x108>)
 8007e42:	f006 fa21 	bl	800e288 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	899b      	ldrh	r3, [r3, #12]
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f7fb fad1 	bl	80033f6 <lwip_htons>
 8007e54:	4603      	mov	r3, r0
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	f003 0301 	and.w	r3, r3, #1
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d028      	beq.n	8007eb2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8007e60:	6838      	ldr	r0, [r7, #0]
 8007e62:	f7fe f981 	bl	8006168 <tcp_segs_free>
    next = NULL;
 8007e66:	2300      	movs	r3, #0
 8007e68:	603b      	str	r3, [r7, #0]
 8007e6a:	e056      	b.n	8007f1a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	899b      	ldrh	r3, [r3, #12]
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	4618      	mov	r0, r3
 8007e76:	f7fb fabe 	bl	80033f6 <lwip_htons>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	f003 0301 	and.w	r3, r3, #1
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d00d      	beq.n	8007ea2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	68db      	ldr	r3, [r3, #12]
 8007e8a:	899b      	ldrh	r3, [r3, #12]
 8007e8c:	b29c      	uxth	r4, r3
 8007e8e:	2001      	movs	r0, #1
 8007e90:	f7fb fab1 	bl	80033f6 <lwip_htons>
 8007e94:	4603      	mov	r3, r0
 8007e96:	461a      	mov	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	4322      	orrs	r2, r4
 8007e9e:	b292      	uxth	r2, r2
 8007ea0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8007eac:	68f8      	ldr	r0, [r7, #12]
 8007eae:	f7fe f96f 	bl	8006190 <tcp_seg_free>
    while (next &&
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d00e      	beq.n	8007ed6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	891b      	ldrh	r3, [r3, #8]
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	4b1d      	ldr	r3, [pc, #116]	; (8007f34 <tcp_oos_insert_segment+0x10c>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	441a      	add	r2, r3
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	6839      	ldr	r1, [r7, #0]
 8007ecc:	8909      	ldrh	r1, [r1, #8]
 8007ece:	440b      	add	r3, r1
 8007ed0:	1ad3      	subs	r3, r2, r3
    while (next &&
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	daca      	bge.n	8007e6c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d01e      	beq.n	8007f1a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	891b      	ldrh	r3, [r3, #8]
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	4b14      	ldr	r3, [pc, #80]	; (8007f34 <tcp_oos_insert_segment+0x10c>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	441a      	add	r2, r3
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	68db      	ldr	r3, [r3, #12]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	1ad3      	subs	r3, r2, r3
    if (next &&
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	dd12      	ble.n	8007f1a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	b29a      	uxth	r2, r3
 8007efc:	4b0d      	ldr	r3, [pc, #52]	; (8007f34 <tcp_oos_insert_segment+0x10c>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	1ad3      	subs	r3, r2, r3
 8007f04:	b29a      	uxth	r2, r3
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	685a      	ldr	r2, [r3, #4]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	891b      	ldrh	r3, [r3, #8]
 8007f12:	4619      	mov	r1, r3
 8007f14:	4610      	mov	r0, r2
 8007f16:	f7fc fb83 	bl	8004620 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	683a      	ldr	r2, [r7, #0]
 8007f1e:	601a      	str	r2, [r3, #0]
}
 8007f20:	bf00      	nop
 8007f22:	3714      	adds	r7, #20
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd90      	pop	{r4, r7, pc}
 8007f28:	08010374 	.word	0x08010374
 8007f2c:	08010634 	.word	0x08010634
 8007f30:	080103c0 	.word	0x080103c0
 8007f34:	200000f0 	.word	0x200000f0

08007f38 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8007f38:	b5b0      	push	{r4, r5, r7, lr}
 8007f3a:	b086      	sub	sp, #24
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	607a      	str	r2, [r7, #4]
 8007f44:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8007f46:	e03e      	b.n	8007fc6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	4618      	mov	r0, r3
 8007f58:	f7fc fd70 	bl	8004a3c <pbuf_clen>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007f66:	8a7a      	ldrh	r2, [r7, #18]
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d906      	bls.n	8007f7a <tcp_free_acked_segments+0x42>
 8007f6c:	4b2a      	ldr	r3, [pc, #168]	; (8008018 <tcp_free_acked_segments+0xe0>)
 8007f6e:	f240 4257 	movw	r2, #1111	; 0x457
 8007f72:	492a      	ldr	r1, [pc, #168]	; (800801c <tcp_free_acked_segments+0xe4>)
 8007f74:	482a      	ldr	r0, [pc, #168]	; (8008020 <tcp_free_acked_segments+0xe8>)
 8007f76:	f006 f987 	bl	800e288 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8007f80:	8a7b      	ldrh	r3, [r7, #18]
 8007f82:	1ad3      	subs	r3, r2, r3
 8007f84:	b29a      	uxth	r2, r3
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	891a      	ldrh	r2, [r3, #8]
 8007f90:	4b24      	ldr	r3, [pc, #144]	; (8008024 <tcp_free_acked_segments+0xec>)
 8007f92:	881b      	ldrh	r3, [r3, #0]
 8007f94:	4413      	add	r3, r2
 8007f96:	b29a      	uxth	r2, r3
 8007f98:	4b22      	ldr	r3, [pc, #136]	; (8008024 <tcp_free_acked_segments+0xec>)
 8007f9a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8007f9c:	6978      	ldr	r0, [r7, #20]
 8007f9e:	f7fe f8f7 	bl	8006190 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d00c      	beq.n	8007fc6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d109      	bne.n	8007fc6 <tcp_free_acked_segments+0x8e>
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d106      	bne.n	8007fc6 <tcp_free_acked_segments+0x8e>
 8007fb8:	4b17      	ldr	r3, [pc, #92]	; (8008018 <tcp_free_acked_segments+0xe0>)
 8007fba:	f240 4262 	movw	r2, #1122	; 0x462
 8007fbe:	491a      	ldr	r1, [pc, #104]	; (8008028 <tcp_free_acked_segments+0xf0>)
 8007fc0:	4817      	ldr	r0, [pc, #92]	; (8008020 <tcp_free_acked_segments+0xe8>)
 8007fc2:	f006 f961 	bl	800e288 <iprintf>
  while (seg_list != NULL &&
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d020      	beq.n	800800e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7fb fa24 	bl	8003420 <lwip_htonl>
 8007fd8:	4604      	mov	r4, r0
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	891b      	ldrh	r3, [r3, #8]
 8007fde:	461d      	mov	r5, r3
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	899b      	ldrh	r3, [r3, #12]
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f7fb fa04 	bl	80033f6 <lwip_htons>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	f003 0303 	and.w	r3, r3, #3
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d001      	beq.n	8007ffe <tcp_free_acked_segments+0xc6>
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e000      	b.n	8008000 <tcp_free_acked_segments+0xc8>
 8007ffe:	2300      	movs	r3, #0
 8008000:	442b      	add	r3, r5
 8008002:	18e2      	adds	r2, r4, r3
 8008004:	4b09      	ldr	r3, [pc, #36]	; (800802c <tcp_free_acked_segments+0xf4>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800800a:	2b00      	cmp	r3, #0
 800800c:	dd9c      	ble.n	8007f48 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800800e:	68bb      	ldr	r3, [r7, #8]
}
 8008010:	4618      	mov	r0, r3
 8008012:	3718      	adds	r7, #24
 8008014:	46bd      	mov	sp, r7
 8008016:	bdb0      	pop	{r4, r5, r7, pc}
 8008018:	08010374 	.word	0x08010374
 800801c:	0801065c 	.word	0x0801065c
 8008020:	080103c0 	.word	0x080103c0
 8008024:	200000f8 	.word	0x200000f8
 8008028:	08010684 	.word	0x08010684
 800802c:	200000f4 	.word	0x200000f4

08008030 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8008030:	b5b0      	push	{r4, r5, r7, lr}
 8008032:	b094      	sub	sp, #80	; 0x50
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8008038:	2300      	movs	r3, #0
 800803a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d106      	bne.n	8008050 <tcp_receive+0x20>
 8008042:	4ba6      	ldr	r3, [pc, #664]	; (80082dc <tcp_receive+0x2ac>)
 8008044:	f240 427b 	movw	r2, #1147	; 0x47b
 8008048:	49a5      	ldr	r1, [pc, #660]	; (80082e0 <tcp_receive+0x2b0>)
 800804a:	48a6      	ldr	r0, [pc, #664]	; (80082e4 <tcp_receive+0x2b4>)
 800804c:	f006 f91c 	bl	800e288 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	7d1b      	ldrb	r3, [r3, #20]
 8008054:	2b03      	cmp	r3, #3
 8008056:	d806      	bhi.n	8008066 <tcp_receive+0x36>
 8008058:	4ba0      	ldr	r3, [pc, #640]	; (80082dc <tcp_receive+0x2ac>)
 800805a:	f240 427c 	movw	r2, #1148	; 0x47c
 800805e:	49a2      	ldr	r1, [pc, #648]	; (80082e8 <tcp_receive+0x2b8>)
 8008060:	48a0      	ldr	r0, [pc, #640]	; (80082e4 <tcp_receive+0x2b4>)
 8008062:	f006 f911 	bl	800e288 <iprintf>

  if (flags & TCP_ACK) {
 8008066:	4ba1      	ldr	r3, [pc, #644]	; (80082ec <tcp_receive+0x2bc>)
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	f003 0310 	and.w	r3, r3, #16
 800806e:	2b00      	cmp	r3, #0
 8008070:	f000 8263 	beq.w	800853a <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800807a:	461a      	mov	r2, r3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008080:	4413      	add	r3, r2
 8008082:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008088:	4b99      	ldr	r3, [pc, #612]	; (80082f0 <tcp_receive+0x2c0>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	1ad3      	subs	r3, r2, r3
 800808e:	2b00      	cmp	r3, #0
 8008090:	db1b      	blt.n	80080ca <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008096:	4b96      	ldr	r3, [pc, #600]	; (80082f0 <tcp_receive+0x2c0>)
 8008098:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800809a:	429a      	cmp	r2, r3
 800809c:	d106      	bne.n	80080ac <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80080a2:	4b94      	ldr	r3, [pc, #592]	; (80082f4 <tcp_receive+0x2c4>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	1ad3      	subs	r3, r2, r3
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	db0e      	blt.n	80080ca <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80080b0:	4b90      	ldr	r3, [pc, #576]	; (80082f4 <tcp_receive+0x2c4>)
 80080b2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d125      	bne.n	8008104 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80080b8:	4b8f      	ldr	r3, [pc, #572]	; (80082f8 <tcp_receive+0x2c8>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	89db      	ldrh	r3, [r3, #14]
 80080be:	b29a      	uxth	r2, r3
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d91c      	bls.n	8008104 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80080ca:	4b8b      	ldr	r3, [pc, #556]	; (80082f8 <tcp_receive+0x2c8>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	89db      	ldrh	r3, [r3, #14]
 80080d0:	b29a      	uxth	r2, r3
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d205      	bcs.n	80080f4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80080f4:	4b7e      	ldr	r3, [pc, #504]	; (80082f0 <tcp_receive+0x2c0>)
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80080fc:	4b7d      	ldr	r3, [pc, #500]	; (80082f4 <tcp_receive+0x2c4>)
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008104:	4b7b      	ldr	r3, [pc, #492]	; (80082f4 <tcp_receive+0x2c4>)
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800810c:	1ad3      	subs	r3, r2, r3
 800810e:	2b00      	cmp	r3, #0
 8008110:	dc58      	bgt.n	80081c4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8008112:	4b7a      	ldr	r3, [pc, #488]	; (80082fc <tcp_receive+0x2cc>)
 8008114:	881b      	ldrh	r3, [r3, #0]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d14b      	bne.n	80081b2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8008124:	4413      	add	r3, r2
 8008126:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008128:	429a      	cmp	r2, r3
 800812a:	d142      	bne.n	80081b2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008132:	2b00      	cmp	r3, #0
 8008134:	db3d      	blt.n	80081b2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800813a:	4b6e      	ldr	r3, [pc, #440]	; (80082f4 <tcp_receive+0x2c4>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	429a      	cmp	r2, r3
 8008140:	d137      	bne.n	80081b2 <tcp_receive+0x182>
              found_dupack = 1;
 8008142:	2301      	movs	r3, #1
 8008144:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800814c:	2bff      	cmp	r3, #255	; 0xff
 800814e:	d007      	beq.n	8008160 <tcp_receive+0x130>
                ++pcb->dupacks;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008156:	3301      	adds	r3, #1
 8008158:	b2da      	uxtb	r2, r3
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008166:	2b03      	cmp	r3, #3
 8008168:	d91b      	bls.n	80081a2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008174:	4413      	add	r3, r2
 8008176:	b29a      	uxth	r2, r3
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800817e:	429a      	cmp	r2, r3
 8008180:	d30a      	bcc.n	8008198 <tcp_receive+0x168>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800818c:	4413      	add	r3, r2
 800818e:	b29a      	uxth	r2, r3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008196:	e004      	b.n	80081a2 <tcp_receive+0x172>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800819e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80081a8:	2b02      	cmp	r3, #2
 80081aa:	d902      	bls.n	80081b2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f002 fb47 	bl	800a840 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80081b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	f040 8160 	bne.w	800847a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80081c2:	e15a      	b.n	800847a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80081c4:	4b4b      	ldr	r3, [pc, #300]	; (80082f4 <tcp_receive+0x2c4>)
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081cc:	1ad3      	subs	r3, r2, r3
 80081ce:	3b01      	subs	r3, #1
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	f2c0 814d 	blt.w	8008470 <tcp_receive+0x440>
 80081d6:	4b47      	ldr	r3, [pc, #284]	; (80082f4 <tcp_receive+0x2c4>)
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081de:	1ad3      	subs	r3, r2, r3
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	f300 8145 	bgt.w	8008470 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	8b5b      	ldrh	r3, [r3, #26]
 80081ea:	f003 0304 	and.w	r3, r3, #4
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d010      	beq.n	8008214 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	8b5b      	ldrh	r3, [r3, #26]
 80081f6:	f023 0304 	bic.w	r3, r3, #4
 80081fa:	b29a      	uxth	r2, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008222:	10db      	asrs	r3, r3, #3
 8008224:	b21b      	sxth	r3, r3
 8008226:	b29a      	uxth	r2, r3
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800822e:	b29b      	uxth	r3, r3
 8008230:	4413      	add	r3, r2
 8008232:	b29b      	uxth	r3, r3
 8008234:	b21a      	sxth	r2, r3
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800823c:	4b2d      	ldr	r3, [pc, #180]	; (80082f4 <tcp_receive+0x2c4>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	b29a      	uxth	r2, r3
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008246:	b29b      	uxth	r3, r3
 8008248:	1ad3      	subs	r3, r2, r3
 800824a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8008254:	4b27      	ldr	r3, [pc, #156]	; (80082f4 <tcp_receive+0x2c4>)
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	7d1b      	ldrb	r3, [r3, #20]
 8008260:	2b03      	cmp	r3, #3
 8008262:	f240 8096 	bls.w	8008392 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8008272:	429a      	cmp	r2, r3
 8008274:	d244      	bcs.n	8008300 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	8b5b      	ldrh	r3, [r3, #26]
 800827a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800827e:	2b00      	cmp	r3, #0
 8008280:	d001      	beq.n	8008286 <tcp_receive+0x256>
 8008282:	2301      	movs	r3, #1
 8008284:	e000      	b.n	8008288 <tcp_receive+0x258>
 8008286:	2302      	movs	r3, #2
 8008288:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800828c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008290:	b29a      	uxth	r2, r3
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008296:	fb12 f303 	smulbb	r3, r2, r3
 800829a:	b29b      	uxth	r3, r3
 800829c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800829e:	4293      	cmp	r3, r2
 80082a0:	bf28      	it	cs
 80082a2:	4613      	movcs	r3, r2
 80082a4:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80082ac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80082ae:	4413      	add	r3, r2
 80082b0:	b29a      	uxth	r2, r3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d309      	bcc.n	80082d0 <tcp_receive+0x2a0>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80082c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80082c4:	4413      	add	r3, r2
 80082c6:	b29a      	uxth	r2, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80082ce:	e060      	b.n	8008392 <tcp_receive+0x362>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80082da:	e05a      	b.n	8008392 <tcp_receive+0x362>
 80082dc:	08010374 	.word	0x08010374
 80082e0:	080106a4 	.word	0x080106a4
 80082e4:	080103c0 	.word	0x080103c0
 80082e8:	080106c0 	.word	0x080106c0
 80082ec:	200000fc 	.word	0x200000fc
 80082f0:	200000f0 	.word	0x200000f0
 80082f4:	200000f4 	.word	0x200000f4
 80082f8:	200000e0 	.word	0x200000e0
 80082fc:	200000fa 	.word	0x200000fa
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008306:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008308:	4413      	add	r3, r2
 800830a:	b29a      	uxth	r2, r3
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008312:	429a      	cmp	r2, r3
 8008314:	d309      	bcc.n	800832a <tcp_receive+0x2fa>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800831c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800831e:	4413      	add	r3, r2
 8008320:	b29a      	uxth	r2, r3
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008328:	e004      	b.n	8008334 <tcp_receive+0x304>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008330:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008340:	429a      	cmp	r2, r3
 8008342:	d326      	bcc.n	8008392 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008350:	1ad3      	subs	r3, r2, r3
 8008352:	b29a      	uxth	r2, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008364:	4413      	add	r3, r2
 8008366:	b29a      	uxth	r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800836e:	429a      	cmp	r2, r3
 8008370:	d30a      	bcc.n	8008388 <tcp_receive+0x358>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800837c:	4413      	add	r3, r2
 800837e:	b29a      	uxth	r2, r3
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008386:	e004      	b.n	8008392 <tcp_receive+0x362>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800838e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800839a:	4a98      	ldr	r2, [pc, #608]	; (80085fc <tcp_receive+0x5cc>)
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f7ff fdcb 	bl	8007f38 <tcp_free_acked_segments>
 80083a2:	4602      	mov	r2, r0
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083b0:	4a93      	ldr	r2, [pc, #588]	; (8008600 <tcp_receive+0x5d0>)
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f7ff fdc0 	bl	8007f38 <tcp_free_acked_segments>
 80083b8:	4602      	mov	r2, r0
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d104      	bne.n	80083d0 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083cc:	861a      	strh	r2, [r3, #48]	; 0x30
 80083ce:	e002      	b.n	80083d6 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d103      	bne.n	80083ec <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80083f2:	4b84      	ldr	r3, [pc, #528]	; (8008604 <tcp_receive+0x5d4>)
 80083f4:	881b      	ldrh	r3, [r3, #0]
 80083f6:	4413      	add	r3, r2
 80083f8:	b29a      	uxth	r2, r3
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	8b5b      	ldrh	r3, [r3, #26]
 8008404:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008408:	2b00      	cmp	r3, #0
 800840a:	d035      	beq.n	8008478 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008410:	2b00      	cmp	r3, #0
 8008412:	d118      	bne.n	8008446 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008418:	2b00      	cmp	r3, #0
 800841a:	d00c      	beq.n	8008436 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	4618      	mov	r0, r3
 800842a:	f7fa fff9 	bl	8003420 <lwip_htonl>
 800842e:	4603      	mov	r3, r0
 8008430:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8008432:	2b00      	cmp	r3, #0
 8008434:	dc20      	bgt.n	8008478 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	8b5b      	ldrh	r3, [r3, #26]
 800843a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800843e:	b29a      	uxth	r2, r3
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008444:	e018      	b.n	8008478 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	4618      	mov	r0, r3
 8008454:	f7fa ffe4 	bl	8003420 <lwip_htonl>
 8008458:	4603      	mov	r3, r0
 800845a:	1ae3      	subs	r3, r4, r3
 800845c:	2b00      	cmp	r3, #0
 800845e:	dc0b      	bgt.n	8008478 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	8b5b      	ldrh	r3, [r3, #26]
 8008464:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008468:	b29a      	uxth	r2, r3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800846e:	e003      	b.n	8008478 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f002 fbdd 	bl	800ac30 <tcp_send_empty_ack>
 8008476:	e000      	b.n	800847a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008478:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800847e:	2b00      	cmp	r3, #0
 8008480:	d05b      	beq.n	800853a <tcp_receive+0x50a>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008486:	4b60      	ldr	r3, [pc, #384]	; (8008608 <tcp_receive+0x5d8>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	1ad3      	subs	r3, r2, r3
 800848c:	2b00      	cmp	r3, #0
 800848e:	da54      	bge.n	800853a <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8008490:	4b5e      	ldr	r3, [pc, #376]	; (800860c <tcp_receive+0x5dc>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	b29a      	uxth	r2, r3
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800849a:	b29b      	uxth	r3, r3
 800849c:	1ad3      	subs	r3, r2, r3
 800849e:	b29b      	uxth	r3, r3
 80084a0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80084a4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80084ae:	10db      	asrs	r3, r3, #3
 80084b0:	b21b      	sxth	r3, r3
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	1ad3      	subs	r3, r2, r3
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80084c2:	b29a      	uxth	r2, r3
 80084c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80084c8:	4413      	add	r3, r2
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	b21a      	sxth	r2, r3
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80084d2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	da05      	bge.n	80084e6 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 80084da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80084de:	425b      	negs	r3, r3
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80084e6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80084f0:	109b      	asrs	r3, r3, #2
 80084f2:	b21b      	sxth	r3, r3
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	1ad3      	subs	r3, r2, r3
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008504:	b29a      	uxth	r2, r3
 8008506:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800850a:	4413      	add	r3, r2
 800850c:	b29b      	uxth	r3, r3
 800850e:	b21a      	sxth	r2, r3
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800851a:	10db      	asrs	r3, r3, #3
 800851c:	b21b      	sxth	r3, r3
 800851e:	b29a      	uxth	r2, r3
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008526:	b29b      	uxth	r3, r3
 8008528:	4413      	add	r3, r2
 800852a:	b29b      	uxth	r3, r3
 800852c:	b21a      	sxth	r2, r3
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2200      	movs	r2, #0
 8008538:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800853a:	4b35      	ldr	r3, [pc, #212]	; (8008610 <tcp_receive+0x5e0>)
 800853c:	881b      	ldrh	r3, [r3, #0]
 800853e:	2b00      	cmp	r3, #0
 8008540:	f000 84e1 	beq.w	8008f06 <tcp_receive+0xed6>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	7d1b      	ldrb	r3, [r3, #20]
 8008548:	2b06      	cmp	r3, #6
 800854a:	f200 84dc 	bhi.w	8008f06 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008552:	4b30      	ldr	r3, [pc, #192]	; (8008614 <tcp_receive+0x5e4>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	1ad3      	subs	r3, r2, r3
 8008558:	3b01      	subs	r3, #1
 800855a:	2b00      	cmp	r3, #0
 800855c:	f2c0 808e 	blt.w	800867c <tcp_receive+0x64c>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008564:	4b2a      	ldr	r3, [pc, #168]	; (8008610 <tcp_receive+0x5e0>)
 8008566:	881b      	ldrh	r3, [r3, #0]
 8008568:	4619      	mov	r1, r3
 800856a:	4b2a      	ldr	r3, [pc, #168]	; (8008614 <tcp_receive+0x5e4>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	440b      	add	r3, r1
 8008570:	1ad3      	subs	r3, r2, r3
 8008572:	3301      	adds	r3, #1
 8008574:	2b00      	cmp	r3, #0
 8008576:	f300 8081 	bgt.w	800867c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800857a:	4b27      	ldr	r3, [pc, #156]	; (8008618 <tcp_receive+0x5e8>)
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008584:	4b23      	ldr	r3, [pc, #140]	; (8008614 <tcp_receive+0x5e4>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	1ad3      	subs	r3, r2, r3
 800858a:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800858c:	4b22      	ldr	r3, [pc, #136]	; (8008618 <tcp_receive+0x5e8>)
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d106      	bne.n	80085a2 <tcp_receive+0x572>
 8008594:	4b21      	ldr	r3, [pc, #132]	; (800861c <tcp_receive+0x5ec>)
 8008596:	f240 5294 	movw	r2, #1428	; 0x594
 800859a:	4921      	ldr	r1, [pc, #132]	; (8008620 <tcp_receive+0x5f0>)
 800859c:	4821      	ldr	r0, [pc, #132]	; (8008624 <tcp_receive+0x5f4>)
 800859e:	f005 fe73 	bl	800e288 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80085a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d906      	bls.n	80085ba <tcp_receive+0x58a>
 80085ac:	4b1b      	ldr	r3, [pc, #108]	; (800861c <tcp_receive+0x5ec>)
 80085ae:	f240 5295 	movw	r2, #1429	; 0x595
 80085b2:	491d      	ldr	r1, [pc, #116]	; (8008628 <tcp_receive+0x5f8>)
 80085b4:	481b      	ldr	r0, [pc, #108]	; (8008624 <tcp_receive+0x5f4>)
 80085b6:	f005 fe67 	bl	800e288 <iprintf>
      off = (u16_t)off32;
 80085ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085bc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80085c0:	4b15      	ldr	r3, [pc, #84]	; (8008618 <tcp_receive+0x5e8>)
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	891b      	ldrh	r3, [r3, #8]
 80085c6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d906      	bls.n	80085dc <tcp_receive+0x5ac>
 80085ce:	4b13      	ldr	r3, [pc, #76]	; (800861c <tcp_receive+0x5ec>)
 80085d0:	f240 5297 	movw	r2, #1431	; 0x597
 80085d4:	4915      	ldr	r1, [pc, #84]	; (800862c <tcp_receive+0x5fc>)
 80085d6:	4813      	ldr	r0, [pc, #76]	; (8008624 <tcp_receive+0x5f4>)
 80085d8:	f005 fe56 	bl	800e288 <iprintf>
      inseg.len -= off;
 80085dc:	4b0e      	ldr	r3, [pc, #56]	; (8008618 <tcp_receive+0x5e8>)
 80085de:	891a      	ldrh	r2, [r3, #8]
 80085e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80085e4:	1ad3      	subs	r3, r2, r3
 80085e6:	b29a      	uxth	r2, r3
 80085e8:	4b0b      	ldr	r3, [pc, #44]	; (8008618 <tcp_receive+0x5e8>)
 80085ea:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80085ec:	4b0a      	ldr	r3, [pc, #40]	; (8008618 <tcp_receive+0x5e8>)
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	891a      	ldrh	r2, [r3, #8]
 80085f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80085f6:	1ad3      	subs	r3, r2, r3
 80085f8:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80085fa:	e029      	b.n	8008650 <tcp_receive+0x620>
 80085fc:	080106dc 	.word	0x080106dc
 8008600:	080106e4 	.word	0x080106e4
 8008604:	200000f8 	.word	0x200000f8
 8008608:	200000f4 	.word	0x200000f4
 800860c:	20006890 	.word	0x20006890
 8008610:	200000fa 	.word	0x200000fa
 8008614:	200000f0 	.word	0x200000f0
 8008618:	200000d0 	.word	0x200000d0
 800861c:	08010374 	.word	0x08010374
 8008620:	080106ec 	.word	0x080106ec
 8008624:	080103c0 	.word	0x080103c0
 8008628:	080106fc 	.word	0x080106fc
 800862c:	0801070c 	.word	0x0801070c
        off -= p->len;
 8008630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008632:	895b      	ldrh	r3, [r3, #10]
 8008634:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008638:	1ad3      	subs	r3, r2, r3
 800863a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800863e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008640:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008642:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8008644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008646:	2200      	movs	r2, #0
 8008648:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800864a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8008650:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008652:	895b      	ldrh	r3, [r3, #10]
 8008654:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008658:	429a      	cmp	r2, r3
 800865a:	d8e9      	bhi.n	8008630 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800865c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008660:	4619      	mov	r1, r3
 8008662:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008664:	f7fc f8dc 	bl	8004820 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866c:	4a91      	ldr	r2, [pc, #580]	; (80088b4 <tcp_receive+0x884>)
 800866e:	6013      	str	r3, [r2, #0]
 8008670:	4b91      	ldr	r3, [pc, #580]	; (80088b8 <tcp_receive+0x888>)
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	4a8f      	ldr	r2, [pc, #572]	; (80088b4 <tcp_receive+0x884>)
 8008676:	6812      	ldr	r2, [r2, #0]
 8008678:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800867a:	e00d      	b.n	8008698 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800867c:	4b8d      	ldr	r3, [pc, #564]	; (80088b4 <tcp_receive+0x884>)
 800867e:	681a      	ldr	r2, [r3, #0]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008684:	1ad3      	subs	r3, r2, r3
 8008686:	2b00      	cmp	r3, #0
 8008688:	da06      	bge.n	8008698 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	8b5b      	ldrh	r3, [r3, #26]
 800868e:	f043 0302 	orr.w	r3, r3, #2
 8008692:	b29a      	uxth	r2, r3
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008698:	4b86      	ldr	r3, [pc, #536]	; (80088b4 <tcp_receive+0x884>)
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a0:	1ad3      	subs	r3, r2, r3
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	f2c0 842a 	blt.w	8008efc <tcp_receive+0xecc>
 80086a8:	4b82      	ldr	r3, [pc, #520]	; (80088b4 <tcp_receive+0x884>)
 80086aa:	681a      	ldr	r2, [r3, #0]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b0:	6879      	ldr	r1, [r7, #4]
 80086b2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80086b4:	440b      	add	r3, r1
 80086b6:	1ad3      	subs	r3, r2, r3
 80086b8:	3301      	adds	r3, #1
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	f300 841e 	bgt.w	8008efc <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086c4:	4b7b      	ldr	r3, [pc, #492]	; (80088b4 <tcp_receive+0x884>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	f040 829a 	bne.w	8008c02 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80086ce:	4b7a      	ldr	r3, [pc, #488]	; (80088b8 <tcp_receive+0x888>)
 80086d0:	891c      	ldrh	r4, [r3, #8]
 80086d2:	4b79      	ldr	r3, [pc, #484]	; (80088b8 <tcp_receive+0x888>)
 80086d4:	68db      	ldr	r3, [r3, #12]
 80086d6:	899b      	ldrh	r3, [r3, #12]
 80086d8:	b29b      	uxth	r3, r3
 80086da:	4618      	mov	r0, r3
 80086dc:	f7fa fe8b 	bl	80033f6 <lwip_htons>
 80086e0:	4603      	mov	r3, r0
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	f003 0303 	and.w	r3, r3, #3
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d001      	beq.n	80086f0 <tcp_receive+0x6c0>
 80086ec:	2301      	movs	r3, #1
 80086ee:	e000      	b.n	80086f2 <tcp_receive+0x6c2>
 80086f0:	2300      	movs	r3, #0
 80086f2:	4423      	add	r3, r4
 80086f4:	b29a      	uxth	r2, r3
 80086f6:	4b71      	ldr	r3, [pc, #452]	; (80088bc <tcp_receive+0x88c>)
 80086f8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80086fe:	4b6f      	ldr	r3, [pc, #444]	; (80088bc <tcp_receive+0x88c>)
 8008700:	881b      	ldrh	r3, [r3, #0]
 8008702:	429a      	cmp	r2, r3
 8008704:	d275      	bcs.n	80087f2 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008706:	4b6c      	ldr	r3, [pc, #432]	; (80088b8 <tcp_receive+0x888>)
 8008708:	68db      	ldr	r3, [r3, #12]
 800870a:	899b      	ldrh	r3, [r3, #12]
 800870c:	b29b      	uxth	r3, r3
 800870e:	4618      	mov	r0, r3
 8008710:	f7fa fe71 	bl	80033f6 <lwip_htons>
 8008714:	4603      	mov	r3, r0
 8008716:	b2db      	uxtb	r3, r3
 8008718:	f003 0301 	and.w	r3, r3, #1
 800871c:	2b00      	cmp	r3, #0
 800871e:	d01f      	beq.n	8008760 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8008720:	4b65      	ldr	r3, [pc, #404]	; (80088b8 <tcp_receive+0x888>)
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	899b      	ldrh	r3, [r3, #12]
 8008726:	b29b      	uxth	r3, r3
 8008728:	b21b      	sxth	r3, r3
 800872a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800872e:	b21c      	sxth	r4, r3
 8008730:	4b61      	ldr	r3, [pc, #388]	; (80088b8 <tcp_receive+0x888>)
 8008732:	68db      	ldr	r3, [r3, #12]
 8008734:	899b      	ldrh	r3, [r3, #12]
 8008736:	b29b      	uxth	r3, r3
 8008738:	4618      	mov	r0, r3
 800873a:	f7fa fe5c 	bl	80033f6 <lwip_htons>
 800873e:	4603      	mov	r3, r0
 8008740:	b2db      	uxtb	r3, r3
 8008742:	b29b      	uxth	r3, r3
 8008744:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8008748:	b29b      	uxth	r3, r3
 800874a:	4618      	mov	r0, r3
 800874c:	f7fa fe53 	bl	80033f6 <lwip_htons>
 8008750:	4603      	mov	r3, r0
 8008752:	b21b      	sxth	r3, r3
 8008754:	4323      	orrs	r3, r4
 8008756:	b21a      	sxth	r2, r3
 8008758:	4b57      	ldr	r3, [pc, #348]	; (80088b8 <tcp_receive+0x888>)
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	b292      	uxth	r2, r2
 800875e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008764:	4b54      	ldr	r3, [pc, #336]	; (80088b8 <tcp_receive+0x888>)
 8008766:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008768:	4b53      	ldr	r3, [pc, #332]	; (80088b8 <tcp_receive+0x888>)
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	899b      	ldrh	r3, [r3, #12]
 800876e:	b29b      	uxth	r3, r3
 8008770:	4618      	mov	r0, r3
 8008772:	f7fa fe40 	bl	80033f6 <lwip_htons>
 8008776:	4603      	mov	r3, r0
 8008778:	b2db      	uxtb	r3, r3
 800877a:	f003 0302 	and.w	r3, r3, #2
 800877e:	2b00      	cmp	r3, #0
 8008780:	d005      	beq.n	800878e <tcp_receive+0x75e>
            inseg.len -= 1;
 8008782:	4b4d      	ldr	r3, [pc, #308]	; (80088b8 <tcp_receive+0x888>)
 8008784:	891b      	ldrh	r3, [r3, #8]
 8008786:	3b01      	subs	r3, #1
 8008788:	b29a      	uxth	r2, r3
 800878a:	4b4b      	ldr	r3, [pc, #300]	; (80088b8 <tcp_receive+0x888>)
 800878c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800878e:	4b4a      	ldr	r3, [pc, #296]	; (80088b8 <tcp_receive+0x888>)
 8008790:	685a      	ldr	r2, [r3, #4]
 8008792:	4b49      	ldr	r3, [pc, #292]	; (80088b8 <tcp_receive+0x888>)
 8008794:	891b      	ldrh	r3, [r3, #8]
 8008796:	4619      	mov	r1, r3
 8008798:	4610      	mov	r0, r2
 800879a:	f7fb ff41 	bl	8004620 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800879e:	4b46      	ldr	r3, [pc, #280]	; (80088b8 <tcp_receive+0x888>)
 80087a0:	891c      	ldrh	r4, [r3, #8]
 80087a2:	4b45      	ldr	r3, [pc, #276]	; (80088b8 <tcp_receive+0x888>)
 80087a4:	68db      	ldr	r3, [r3, #12]
 80087a6:	899b      	ldrh	r3, [r3, #12]
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	4618      	mov	r0, r3
 80087ac:	f7fa fe23 	bl	80033f6 <lwip_htons>
 80087b0:	4603      	mov	r3, r0
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	f003 0303 	and.w	r3, r3, #3
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d001      	beq.n	80087c0 <tcp_receive+0x790>
 80087bc:	2301      	movs	r3, #1
 80087be:	e000      	b.n	80087c2 <tcp_receive+0x792>
 80087c0:	2300      	movs	r3, #0
 80087c2:	4423      	add	r3, r4
 80087c4:	b29a      	uxth	r2, r3
 80087c6:	4b3d      	ldr	r3, [pc, #244]	; (80088bc <tcp_receive+0x88c>)
 80087c8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80087ca:	4b3c      	ldr	r3, [pc, #240]	; (80088bc <tcp_receive+0x88c>)
 80087cc:	881b      	ldrh	r3, [r3, #0]
 80087ce:	461a      	mov	r2, r3
 80087d0:	4b38      	ldr	r3, [pc, #224]	; (80088b4 <tcp_receive+0x884>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	441a      	add	r2, r3
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087da:	6879      	ldr	r1, [r7, #4]
 80087dc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80087de:	440b      	add	r3, r1
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d006      	beq.n	80087f2 <tcp_receive+0x7c2>
 80087e4:	4b36      	ldr	r3, [pc, #216]	; (80088c0 <tcp_receive+0x890>)
 80087e6:	f240 52cc 	movw	r2, #1484	; 0x5cc
 80087ea:	4936      	ldr	r1, [pc, #216]	; (80088c4 <tcp_receive+0x894>)
 80087ec:	4836      	ldr	r0, [pc, #216]	; (80088c8 <tcp_receive+0x898>)
 80087ee:	f005 fd4b 	bl	800e288 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	f000 80e7 	beq.w	80089ca <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80087fc:	4b2e      	ldr	r3, [pc, #184]	; (80088b8 <tcp_receive+0x888>)
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	899b      	ldrh	r3, [r3, #12]
 8008802:	b29b      	uxth	r3, r3
 8008804:	4618      	mov	r0, r3
 8008806:	f7fa fdf6 	bl	80033f6 <lwip_htons>
 800880a:	4603      	mov	r3, r0
 800880c:	b2db      	uxtb	r3, r3
 800880e:	f003 0301 	and.w	r3, r3, #1
 8008812:	2b00      	cmp	r3, #0
 8008814:	d010      	beq.n	8008838 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8008816:	e00a      	b.n	800882e <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800881c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008822:	681a      	ldr	r2, [r3, #0]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8008828:	68f8      	ldr	r0, [r7, #12]
 800882a:	f7fd fcb1 	bl	8006190 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008832:	2b00      	cmp	r3, #0
 8008834:	d1f0      	bne.n	8008818 <tcp_receive+0x7e8>
 8008836:	e0c8      	b.n	80089ca <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800883c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800883e:	e052      	b.n	80088e6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	899b      	ldrh	r3, [r3, #12]
 8008846:	b29b      	uxth	r3, r3
 8008848:	4618      	mov	r0, r3
 800884a:	f7fa fdd4 	bl	80033f6 <lwip_htons>
 800884e:	4603      	mov	r3, r0
 8008850:	b2db      	uxtb	r3, r3
 8008852:	f003 0301 	and.w	r3, r3, #1
 8008856:	2b00      	cmp	r3, #0
 8008858:	d03d      	beq.n	80088d6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800885a:	4b17      	ldr	r3, [pc, #92]	; (80088b8 <tcp_receive+0x888>)
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	899b      	ldrh	r3, [r3, #12]
 8008860:	b29b      	uxth	r3, r3
 8008862:	4618      	mov	r0, r3
 8008864:	f7fa fdc7 	bl	80033f6 <lwip_htons>
 8008868:	4603      	mov	r3, r0
 800886a:	b2db      	uxtb	r3, r3
 800886c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008870:	2b00      	cmp	r3, #0
 8008872:	d130      	bne.n	80088d6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8008874:	4b10      	ldr	r3, [pc, #64]	; (80088b8 <tcp_receive+0x888>)
 8008876:	68db      	ldr	r3, [r3, #12]
 8008878:	899b      	ldrh	r3, [r3, #12]
 800887a:	b29c      	uxth	r4, r3
 800887c:	2001      	movs	r0, #1
 800887e:	f7fa fdba 	bl	80033f6 <lwip_htons>
 8008882:	4603      	mov	r3, r0
 8008884:	461a      	mov	r2, r3
 8008886:	4b0c      	ldr	r3, [pc, #48]	; (80088b8 <tcp_receive+0x888>)
 8008888:	68db      	ldr	r3, [r3, #12]
 800888a:	4322      	orrs	r2, r4
 800888c:	b292      	uxth	r2, r2
 800888e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8008890:	4b09      	ldr	r3, [pc, #36]	; (80088b8 <tcp_receive+0x888>)
 8008892:	891c      	ldrh	r4, [r3, #8]
 8008894:	4b08      	ldr	r3, [pc, #32]	; (80088b8 <tcp_receive+0x888>)
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	899b      	ldrh	r3, [r3, #12]
 800889a:	b29b      	uxth	r3, r3
 800889c:	4618      	mov	r0, r3
 800889e:	f7fa fdaa 	bl	80033f6 <lwip_htons>
 80088a2:	4603      	mov	r3, r0
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	f003 0303 	and.w	r3, r3, #3
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d00e      	beq.n	80088cc <tcp_receive+0x89c>
 80088ae:	2301      	movs	r3, #1
 80088b0:	e00d      	b.n	80088ce <tcp_receive+0x89e>
 80088b2:	bf00      	nop
 80088b4:	200000f0 	.word	0x200000f0
 80088b8:	200000d0 	.word	0x200000d0
 80088bc:	200000fa 	.word	0x200000fa
 80088c0:	08010374 	.word	0x08010374
 80088c4:	0801071c 	.word	0x0801071c
 80088c8:	080103c0 	.word	0x080103c0
 80088cc:	2300      	movs	r3, #0
 80088ce:	4423      	add	r3, r4
 80088d0:	b29a      	uxth	r2, r3
 80088d2:	4b98      	ldr	r3, [pc, #608]	; (8008b34 <tcp_receive+0xb04>)
 80088d4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80088d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088d8:	613b      	str	r3, [r7, #16]
              next = next->next;
 80088da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80088e0:	6938      	ldr	r0, [r7, #16]
 80088e2:	f7fd fc55 	bl	8006190 <tcp_seg_free>
            while (next &&
 80088e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d00e      	beq.n	800890a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80088ec:	4b91      	ldr	r3, [pc, #580]	; (8008b34 <tcp_receive+0xb04>)
 80088ee:	881b      	ldrh	r3, [r3, #0]
 80088f0:	461a      	mov	r2, r3
 80088f2:	4b91      	ldr	r3, [pc, #580]	; (8008b38 <tcp_receive+0xb08>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	441a      	add	r2, r3
 80088f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008900:	8909      	ldrh	r1, [r1, #8]
 8008902:	440b      	add	r3, r1
 8008904:	1ad3      	subs	r3, r2, r3
            while (next &&
 8008906:	2b00      	cmp	r3, #0
 8008908:	da9a      	bge.n	8008840 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800890a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800890c:	2b00      	cmp	r3, #0
 800890e:	d059      	beq.n	80089c4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8008910:	4b88      	ldr	r3, [pc, #544]	; (8008b34 <tcp_receive+0xb04>)
 8008912:	881b      	ldrh	r3, [r3, #0]
 8008914:	461a      	mov	r2, r3
 8008916:	4b88      	ldr	r3, [pc, #544]	; (8008b38 <tcp_receive+0xb08>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	441a      	add	r2, r3
 800891c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800891e:	68db      	ldr	r3, [r3, #12]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	1ad3      	subs	r3, r2, r3
            if (next &&
 8008924:	2b00      	cmp	r3, #0
 8008926:	dd4d      	ble.n	80089c4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8008928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800892a:	68db      	ldr	r3, [r3, #12]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	b29a      	uxth	r2, r3
 8008930:	4b81      	ldr	r3, [pc, #516]	; (8008b38 <tcp_receive+0xb08>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	b29b      	uxth	r3, r3
 8008936:	1ad3      	subs	r3, r2, r3
 8008938:	b29a      	uxth	r2, r3
 800893a:	4b80      	ldr	r3, [pc, #512]	; (8008b3c <tcp_receive+0xb0c>)
 800893c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800893e:	4b7f      	ldr	r3, [pc, #508]	; (8008b3c <tcp_receive+0xb0c>)
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	899b      	ldrh	r3, [r3, #12]
 8008944:	b29b      	uxth	r3, r3
 8008946:	4618      	mov	r0, r3
 8008948:	f7fa fd55 	bl	80033f6 <lwip_htons>
 800894c:	4603      	mov	r3, r0
 800894e:	b2db      	uxtb	r3, r3
 8008950:	f003 0302 	and.w	r3, r3, #2
 8008954:	2b00      	cmp	r3, #0
 8008956:	d005      	beq.n	8008964 <tcp_receive+0x934>
                inseg.len -= 1;
 8008958:	4b78      	ldr	r3, [pc, #480]	; (8008b3c <tcp_receive+0xb0c>)
 800895a:	891b      	ldrh	r3, [r3, #8]
 800895c:	3b01      	subs	r3, #1
 800895e:	b29a      	uxth	r2, r3
 8008960:	4b76      	ldr	r3, [pc, #472]	; (8008b3c <tcp_receive+0xb0c>)
 8008962:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8008964:	4b75      	ldr	r3, [pc, #468]	; (8008b3c <tcp_receive+0xb0c>)
 8008966:	685a      	ldr	r2, [r3, #4]
 8008968:	4b74      	ldr	r3, [pc, #464]	; (8008b3c <tcp_receive+0xb0c>)
 800896a:	891b      	ldrh	r3, [r3, #8]
 800896c:	4619      	mov	r1, r3
 800896e:	4610      	mov	r0, r2
 8008970:	f7fb fe56 	bl	8004620 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8008974:	4b71      	ldr	r3, [pc, #452]	; (8008b3c <tcp_receive+0xb0c>)
 8008976:	891c      	ldrh	r4, [r3, #8]
 8008978:	4b70      	ldr	r3, [pc, #448]	; (8008b3c <tcp_receive+0xb0c>)
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	899b      	ldrh	r3, [r3, #12]
 800897e:	b29b      	uxth	r3, r3
 8008980:	4618      	mov	r0, r3
 8008982:	f7fa fd38 	bl	80033f6 <lwip_htons>
 8008986:	4603      	mov	r3, r0
 8008988:	b2db      	uxtb	r3, r3
 800898a:	f003 0303 	and.w	r3, r3, #3
 800898e:	2b00      	cmp	r3, #0
 8008990:	d001      	beq.n	8008996 <tcp_receive+0x966>
 8008992:	2301      	movs	r3, #1
 8008994:	e000      	b.n	8008998 <tcp_receive+0x968>
 8008996:	2300      	movs	r3, #0
 8008998:	4423      	add	r3, r4
 800899a:	b29a      	uxth	r2, r3
 800899c:	4b65      	ldr	r3, [pc, #404]	; (8008b34 <tcp_receive+0xb04>)
 800899e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80089a0:	4b64      	ldr	r3, [pc, #400]	; (8008b34 <tcp_receive+0xb04>)
 80089a2:	881b      	ldrh	r3, [r3, #0]
 80089a4:	461a      	mov	r2, r3
 80089a6:	4b64      	ldr	r3, [pc, #400]	; (8008b38 <tcp_receive+0xb08>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	441a      	add	r2, r3
 80089ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d006      	beq.n	80089c4 <tcp_receive+0x994>
 80089b6:	4b62      	ldr	r3, [pc, #392]	; (8008b40 <tcp_receive+0xb10>)
 80089b8:	f240 52fd 	movw	r2, #1533	; 0x5fd
 80089bc:	4961      	ldr	r1, [pc, #388]	; (8008b44 <tcp_receive+0xb14>)
 80089be:	4862      	ldr	r0, [pc, #392]	; (8008b48 <tcp_receive+0xb18>)
 80089c0:	f005 fc62 	bl	800e288 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80089c8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80089ca:	4b5a      	ldr	r3, [pc, #360]	; (8008b34 <tcp_receive+0xb04>)
 80089cc:	881b      	ldrh	r3, [r3, #0]
 80089ce:	461a      	mov	r2, r3
 80089d0:	4b59      	ldr	r3, [pc, #356]	; (8008b38 <tcp_receive+0xb08>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	441a      	add	r2, r3
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80089de:	4b55      	ldr	r3, [pc, #340]	; (8008b34 <tcp_receive+0xb04>)
 80089e0:	881b      	ldrh	r3, [r3, #0]
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d206      	bcs.n	80089f4 <tcp_receive+0x9c4>
 80089e6:	4b56      	ldr	r3, [pc, #344]	; (8008b40 <tcp_receive+0xb10>)
 80089e8:	f240 6207 	movw	r2, #1543	; 0x607
 80089ec:	4957      	ldr	r1, [pc, #348]	; (8008b4c <tcp_receive+0xb1c>)
 80089ee:	4856      	ldr	r0, [pc, #344]	; (8008b48 <tcp_receive+0xb18>)
 80089f0:	f005 fc4a 	bl	800e288 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80089f8:	4b4e      	ldr	r3, [pc, #312]	; (8008b34 <tcp_receive+0xb04>)
 80089fa:	881b      	ldrh	r3, [r3, #0]
 80089fc:	1ad3      	subs	r3, r2, r3
 80089fe:	b29a      	uxth	r2, r3
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f7fc fea1 	bl	800574c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8008a0a:	4b4c      	ldr	r3, [pc, #304]	; (8008b3c <tcp_receive+0xb0c>)
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	891b      	ldrh	r3, [r3, #8]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d006      	beq.n	8008a22 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8008a14:	4b49      	ldr	r3, [pc, #292]	; (8008b3c <tcp_receive+0xb0c>)
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	4a4d      	ldr	r2, [pc, #308]	; (8008b50 <tcp_receive+0xb20>)
 8008a1a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8008a1c:	4b47      	ldr	r3, [pc, #284]	; (8008b3c <tcp_receive+0xb0c>)
 8008a1e:	2200      	movs	r2, #0
 8008a20:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008a22:	4b46      	ldr	r3, [pc, #280]	; (8008b3c <tcp_receive+0xb0c>)
 8008a24:	68db      	ldr	r3, [r3, #12]
 8008a26:	899b      	ldrh	r3, [r3, #12]
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7fa fce3 	bl	80033f6 <lwip_htons>
 8008a30:	4603      	mov	r3, r0
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	f003 0301 	and.w	r3, r3, #1
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	f000 80b8 	beq.w	8008bae <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8008a3e:	4b45      	ldr	r3, [pc, #276]	; (8008b54 <tcp_receive+0xb24>)
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	f043 0320 	orr.w	r3, r3, #32
 8008a46:	b2da      	uxtb	r2, r3
 8008a48:	4b42      	ldr	r3, [pc, #264]	; (8008b54 <tcp_receive+0xb24>)
 8008a4a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8008a4c:	e0af      	b.n	8008bae <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a52:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a58:	68db      	ldr	r3, [r3, #12]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	4a36      	ldr	r2, [pc, #216]	; (8008b38 <tcp_receive+0xb08>)
 8008a5e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	891b      	ldrh	r3, [r3, #8]
 8008a64:	461c      	mov	r4, r3
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	899b      	ldrh	r3, [r3, #12]
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7fa fcc1 	bl	80033f6 <lwip_htons>
 8008a74:	4603      	mov	r3, r0
 8008a76:	b2db      	uxtb	r3, r3
 8008a78:	f003 0303 	and.w	r3, r3, #3
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d001      	beq.n	8008a84 <tcp_receive+0xa54>
 8008a80:	2301      	movs	r3, #1
 8008a82:	e000      	b.n	8008a86 <tcp_receive+0xa56>
 8008a84:	2300      	movs	r3, #0
 8008a86:	191a      	adds	r2, r3, r4
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a8c:	441a      	add	r2, r3
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a96:	461c      	mov	r4, r3
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	891b      	ldrh	r3, [r3, #8]
 8008a9c:	461d      	mov	r5, r3
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	68db      	ldr	r3, [r3, #12]
 8008aa2:	899b      	ldrh	r3, [r3, #12]
 8008aa4:	b29b      	uxth	r3, r3
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7fa fca5 	bl	80033f6 <lwip_htons>
 8008aac:	4603      	mov	r3, r0
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	f003 0303 	and.w	r3, r3, #3
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d001      	beq.n	8008abc <tcp_receive+0xa8c>
 8008ab8:	2301      	movs	r3, #1
 8008aba:	e000      	b.n	8008abe <tcp_receive+0xa8e>
 8008abc:	2300      	movs	r3, #0
 8008abe:	442b      	add	r3, r5
 8008ac0:	429c      	cmp	r4, r3
 8008ac2:	d206      	bcs.n	8008ad2 <tcp_receive+0xaa2>
 8008ac4:	4b1e      	ldr	r3, [pc, #120]	; (8008b40 <tcp_receive+0xb10>)
 8008ac6:	f240 622c 	movw	r2, #1580	; 0x62c
 8008aca:	4923      	ldr	r1, [pc, #140]	; (8008b58 <tcp_receive+0xb28>)
 8008acc:	481e      	ldr	r0, [pc, #120]	; (8008b48 <tcp_receive+0xb18>)
 8008ace:	f005 fbdb 	bl	800e288 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	891b      	ldrh	r3, [r3, #8]
 8008ad6:	461c      	mov	r4, r3
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	899b      	ldrh	r3, [r3, #12]
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f7fa fc88 	bl	80033f6 <lwip_htons>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	b2db      	uxtb	r3, r3
 8008aea:	f003 0303 	and.w	r3, r3, #3
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d001      	beq.n	8008af6 <tcp_receive+0xac6>
 8008af2:	2301      	movs	r3, #1
 8008af4:	e000      	b.n	8008af8 <tcp_receive+0xac8>
 8008af6:	2300      	movs	r3, #0
 8008af8:	1919      	adds	r1, r3, r4
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008afe:	b28b      	uxth	r3, r1
 8008b00:	1ad3      	subs	r3, r2, r3
 8008b02:	b29a      	uxth	r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f7fc fe1f 	bl	800574c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	891b      	ldrh	r3, [r3, #8]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d028      	beq.n	8008b6a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8008b18:	4b0d      	ldr	r3, [pc, #52]	; (8008b50 <tcp_receive+0xb20>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d01d      	beq.n	8008b5c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8008b20:	4b0b      	ldr	r3, [pc, #44]	; (8008b50 <tcp_receive+0xb20>)
 8008b22:	681a      	ldr	r2, [r3, #0]
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	4619      	mov	r1, r3
 8008b2a:	4610      	mov	r0, r2
 8008b2c:	f7fb ffc0 	bl	8004ab0 <pbuf_cat>
 8008b30:	e018      	b.n	8008b64 <tcp_receive+0xb34>
 8008b32:	bf00      	nop
 8008b34:	200000fa 	.word	0x200000fa
 8008b38:	200000f0 	.word	0x200000f0
 8008b3c:	200000d0 	.word	0x200000d0
 8008b40:	08010374 	.word	0x08010374
 8008b44:	08010754 	.word	0x08010754
 8008b48:	080103c0 	.word	0x080103c0
 8008b4c:	08010790 	.word	0x08010790
 8008b50:	20000100 	.word	0x20000100
 8008b54:	200000fd 	.word	0x200000fd
 8008b58:	080107b0 	.word	0x080107b0
            } else {
              recv_data = cseg->p;
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	4a70      	ldr	r2, [pc, #448]	; (8008d24 <tcp_receive+0xcf4>)
 8008b62:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	2200      	movs	r2, #0
 8008b68:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	899b      	ldrh	r3, [r3, #12]
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7fa fc3f 	bl	80033f6 <lwip_htons>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	f003 0301 	and.w	r3, r3, #1
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d00d      	beq.n	8008ba0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8008b84:	4b68      	ldr	r3, [pc, #416]	; (8008d28 <tcp_receive+0xcf8>)
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	f043 0320 	orr.w	r3, r3, #32
 8008b8c:	b2da      	uxtb	r2, r3
 8008b8e:	4b66      	ldr	r3, [pc, #408]	; (8008d28 <tcp_receive+0xcf8>)
 8008b90:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	7d1b      	ldrb	r3, [r3, #20]
 8008b96:	2b04      	cmp	r3, #4
 8008b98:	d102      	bne.n	8008ba0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2207      	movs	r2, #7
 8008b9e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	681a      	ldr	r2, [r3, #0]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8008ba8:	68b8      	ldr	r0, [r7, #8]
 8008baa:	f7fd faf1 	bl	8006190 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d008      	beq.n	8008bc8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	685a      	ldr	r2, [r3, #4]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	f43f af43 	beq.w	8008a4e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	8b5b      	ldrh	r3, [r3, #26]
 8008bcc:	f003 0301 	and.w	r3, r3, #1
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d00e      	beq.n	8008bf2 <tcp_receive+0xbc2>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	8b5b      	ldrh	r3, [r3, #26]
 8008bd8:	f023 0301 	bic.w	r3, r3, #1
 8008bdc:	b29a      	uxth	r2, r3
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	835a      	strh	r2, [r3, #26]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	8b5b      	ldrh	r3, [r3, #26]
 8008be6:	f043 0302 	orr.w	r3, r3, #2
 8008bea:	b29a      	uxth	r2, r3
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8008bf0:	e188      	b.n	8008f04 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	8b5b      	ldrh	r3, [r3, #26]
 8008bf6:	f043 0301 	orr.w	r3, r3, #1
 8008bfa:	b29a      	uxth	r2, r3
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8008c00:	e180      	b.n	8008f04 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d106      	bne.n	8008c18 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8008c0a:	4848      	ldr	r0, [pc, #288]	; (8008d2c <tcp_receive+0xcfc>)
 8008c0c:	f7fd faf6 	bl	80061fc <tcp_seg_copy>
 8008c10:	4602      	mov	r2, r0
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	675a      	str	r2, [r3, #116]	; 0x74
 8008c16:	e16d      	b.n	8008ef4 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c20:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c22:	e157      	b.n	8008ed4 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8008c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	685a      	ldr	r2, [r3, #4]
 8008c2a:	4b41      	ldr	r3, [pc, #260]	; (8008d30 <tcp_receive+0xd00>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d11d      	bne.n	8008c6e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8008c32:	4b3e      	ldr	r3, [pc, #248]	; (8008d2c <tcp_receive+0xcfc>)
 8008c34:	891a      	ldrh	r2, [r3, #8]
 8008c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c38:	891b      	ldrh	r3, [r3, #8]
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	f240 814f 	bls.w	8008ede <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008c40:	483a      	ldr	r0, [pc, #232]	; (8008d2c <tcp_receive+0xcfc>)
 8008c42:	f7fd fadb 	bl	80061fc <tcp_seg_copy>
 8008c46:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	f000 8149 	beq.w	8008ee2 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8008c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d003      	beq.n	8008c5e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8008c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c58:	697a      	ldr	r2, [r7, #20]
 8008c5a:	601a      	str	r2, [r3, #0]
 8008c5c:	e002      	b.n	8008c64 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	697a      	ldr	r2, [r7, #20]
 8008c62:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8008c64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008c66:	6978      	ldr	r0, [r7, #20]
 8008c68:	f7ff f8de 	bl	8007e28 <tcp_oos_insert_segment>
                }
                break;
 8008c6c:	e139      	b.n	8008ee2 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8008c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d117      	bne.n	8008ca4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8008c74:	4b2e      	ldr	r3, [pc, #184]	; (8008d30 <tcp_receive+0xd00>)
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c7a:	68db      	ldr	r3, [r3, #12]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	1ad3      	subs	r3, r2, r3
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	da57      	bge.n	8008d34 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008c84:	4829      	ldr	r0, [pc, #164]	; (8008d2c <tcp_receive+0xcfc>)
 8008c86:	f7fd fab9 	bl	80061fc <tcp_seg_copy>
 8008c8a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8008c8c:	69bb      	ldr	r3, [r7, #24]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	f000 8129 	beq.w	8008ee6 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	69ba      	ldr	r2, [r7, #24]
 8008c98:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8008c9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008c9c:	69b8      	ldr	r0, [r7, #24]
 8008c9e:	f7ff f8c3 	bl	8007e28 <tcp_oos_insert_segment>
                  }
                  break;
 8008ca2:	e120      	b.n	8008ee6 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8008ca4:	4b22      	ldr	r3, [pc, #136]	; (8008d30 <tcp_receive+0xd00>)
 8008ca6:	681a      	ldr	r2, [r3, #0]
 8008ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	1ad3      	subs	r3, r2, r3
 8008cb0:	3b01      	subs	r3, #1
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	db3e      	blt.n	8008d34 <tcp_receive+0xd04>
 8008cb6:	4b1e      	ldr	r3, [pc, #120]	; (8008d30 <tcp_receive+0xd00>)
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	1ad3      	subs	r3, r2, r3
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	dc35      	bgt.n	8008d34 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8008cc8:	4818      	ldr	r0, [pc, #96]	; (8008d2c <tcp_receive+0xcfc>)
 8008cca:	f7fd fa97 	bl	80061fc <tcp_seg_copy>
 8008cce:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	f000 8109 	beq.w	8008eea <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8008cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ce0:	8912      	ldrh	r2, [r2, #8]
 8008ce2:	441a      	add	r2, r3
 8008ce4:	4b12      	ldr	r3, [pc, #72]	; (8008d30 <tcp_receive+0xd00>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	1ad3      	subs	r3, r2, r3
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	dd12      	ble.n	8008d14 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8008cee:	4b10      	ldr	r3, [pc, #64]	; (8008d30 <tcp_receive+0xd00>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	b29a      	uxth	r2, r3
 8008cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cf6:	68db      	ldr	r3, [r3, #12]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	1ad3      	subs	r3, r2, r3
 8008cfe:	b29a      	uxth	r2, r3
 8008d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d02:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8008d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d06:	685a      	ldr	r2, [r3, #4]
 8008d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d0a:	891b      	ldrh	r3, [r3, #8]
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	4610      	mov	r0, r2
 8008d10:	f7fb fc86 	bl	8004620 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8008d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d16:	69fa      	ldr	r2, [r7, #28]
 8008d18:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8008d1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d1c:	69f8      	ldr	r0, [r7, #28]
 8008d1e:	f7ff f883 	bl	8007e28 <tcp_oos_insert_segment>
                  }
                  break;
 8008d22:	e0e2      	b.n	8008eea <tcp_receive+0xeba>
 8008d24:	20000100 	.word	0x20000100
 8008d28:	200000fd 	.word	0x200000fd
 8008d2c:	200000d0 	.word	0x200000d0
 8008d30:	200000f0 	.word	0x200000f0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8008d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d36:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8008d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	f040 80c6 	bne.w	8008ece <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8008d42:	4b80      	ldr	r3, [pc, #512]	; (8008f44 <tcp_receive+0xf14>)
 8008d44:	681a      	ldr	r2, [r3, #0]
 8008d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d48:	68db      	ldr	r3, [r3, #12]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	f340 80bd 	ble.w	8008ece <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	899b      	ldrh	r3, [r3, #12]
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f7fa fb4a 	bl	80033f6 <lwip_htons>
 8008d62:	4603      	mov	r3, r0
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	f003 0301 	and.w	r3, r3, #1
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	f040 80bf 	bne.w	8008eee <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8008d70:	4875      	ldr	r0, [pc, #468]	; (8008f48 <tcp_receive+0xf18>)
 8008d72:	f7fd fa43 	bl	80061fc <tcp_seg_copy>
 8008d76:	4602      	mov	r2, r0
 8008d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d7a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8008d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	f000 80b6 	beq.w	8008ef2 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8008d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d88:	68db      	ldr	r3, [r3, #12]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d8e:	8912      	ldrh	r2, [r2, #8]
 8008d90:	441a      	add	r2, r3
 8008d92:	4b6c      	ldr	r3, [pc, #432]	; (8008f44 <tcp_receive+0xf14>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	1ad3      	subs	r3, r2, r3
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	dd12      	ble.n	8008dc2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8008d9c:	4b69      	ldr	r3, [pc, #420]	; (8008f44 <tcp_receive+0xf14>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	b29a      	uxth	r2, r3
 8008da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	1ad3      	subs	r3, r2, r3
 8008dac:	b29a      	uxth	r2, r3
 8008dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8008db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db4:	685a      	ldr	r2, [r3, #4]
 8008db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db8:	891b      	ldrh	r3, [r3, #8]
 8008dba:	4619      	mov	r1, r3
 8008dbc:	4610      	mov	r0, r2
 8008dbe:	f7fb fc2f 	bl	8004620 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8008dc2:	4b62      	ldr	r3, [pc, #392]	; (8008f4c <tcp_receive+0xf1c>)
 8008dc4:	881b      	ldrh	r3, [r3, #0]
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	4b5e      	ldr	r3, [pc, #376]	; (8008f44 <tcp_receive+0xf14>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	441a      	add	r2, r3
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd2:	6879      	ldr	r1, [r7, #4]
 8008dd4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008dd6:	440b      	add	r3, r1
 8008dd8:	1ad3      	subs	r3, r2, r3
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	f340 8089 	ble.w	8008ef2 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8008de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	899b      	ldrh	r3, [r3, #12]
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	4618      	mov	r0, r3
 8008dec:	f7fa fb03 	bl	80033f6 <lwip_htons>
 8008df0:	4603      	mov	r3, r0
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	f003 0301 	and.w	r3, r3, #1
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d022      	beq.n	8008e42 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8008dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	899b      	ldrh	r3, [r3, #12]
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	b21b      	sxth	r3, r3
 8008e08:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008e0c:	b21c      	sxth	r4, r3
 8008e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	899b      	ldrh	r3, [r3, #12]
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f7fa faec 	bl	80033f6 <lwip_htons>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7fa fae3 	bl	80033f6 <lwip_htons>
 8008e30:	4603      	mov	r3, r0
 8008e32:	b21b      	sxth	r3, r3
 8008e34:	4323      	orrs	r3, r4
 8008e36:	b21a      	sxth	r2, r3
 8008e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	b292      	uxth	r2, r2
 8008e40:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e46:	b29a      	uxth	r2, r3
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e4c:	4413      	add	r3, r2
 8008e4e:	b299      	uxth	r1, r3
 8008e50:	4b3c      	ldr	r3, [pc, #240]	; (8008f44 <tcp_receive+0xf14>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	b29a      	uxth	r2, r3
 8008e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	1a8a      	subs	r2, r1, r2
 8008e5c:	b292      	uxth	r2, r2
 8008e5e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8008e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	685a      	ldr	r2, [r3, #4]
 8008e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	891b      	ldrh	r3, [r3, #8]
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	4610      	mov	r0, r2
 8008e70:	f7fb fbd6 	bl	8004620 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8008e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	891c      	ldrh	r4, [r3, #8]
 8008e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	899b      	ldrh	r3, [r3, #12]
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	4618      	mov	r0, r3
 8008e86:	f7fa fab6 	bl	80033f6 <lwip_htons>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	f003 0303 	and.w	r3, r3, #3
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d001      	beq.n	8008e9a <tcp_receive+0xe6a>
 8008e96:	2301      	movs	r3, #1
 8008e98:	e000      	b.n	8008e9c <tcp_receive+0xe6c>
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	4423      	add	r3, r4
 8008e9e:	b29a      	uxth	r2, r3
 8008ea0:	4b2a      	ldr	r3, [pc, #168]	; (8008f4c <tcp_receive+0xf1c>)
 8008ea2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008ea4:	4b29      	ldr	r3, [pc, #164]	; (8008f4c <tcp_receive+0xf1c>)
 8008ea6:	881b      	ldrh	r3, [r3, #0]
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	4b26      	ldr	r3, [pc, #152]	; (8008f44 <tcp_receive+0xf14>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	441a      	add	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb4:	6879      	ldr	r1, [r7, #4]
 8008eb6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008eb8:	440b      	add	r3, r1
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d019      	beq.n	8008ef2 <tcp_receive+0xec2>
 8008ebe:	4b24      	ldr	r3, [pc, #144]	; (8008f50 <tcp_receive+0xf20>)
 8008ec0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8008ec4:	4923      	ldr	r1, [pc, #140]	; (8008f54 <tcp_receive+0xf24>)
 8008ec6:	4824      	ldr	r0, [pc, #144]	; (8008f58 <tcp_receive+0xf28>)
 8008ec8:	f005 f9de 	bl	800e288 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8008ecc:	e011      	b.n	8008ef2 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8008ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	f47f aea4 	bne.w	8008c24 <tcp_receive+0xbf4>
 8008edc:	e00a      	b.n	8008ef4 <tcp_receive+0xec4>
                break;
 8008ede:	bf00      	nop
 8008ee0:	e008      	b.n	8008ef4 <tcp_receive+0xec4>
                break;
 8008ee2:	bf00      	nop
 8008ee4:	e006      	b.n	8008ef4 <tcp_receive+0xec4>
                  break;
 8008ee6:	bf00      	nop
 8008ee8:	e004      	b.n	8008ef4 <tcp_receive+0xec4>
                  break;
 8008eea:	bf00      	nop
 8008eec:	e002      	b.n	8008ef4 <tcp_receive+0xec4>
                  break;
 8008eee:	bf00      	nop
 8008ef0:	e000      	b.n	8008ef4 <tcp_receive+0xec4>
                break;
 8008ef2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f001 fe9b 	bl	800ac30 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8008efa:	e003      	b.n	8008f04 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f001 fe97 	bl	800ac30 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008f02:	e01a      	b.n	8008f3a <tcp_receive+0xf0a>
 8008f04:	e019      	b.n	8008f3a <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8008f06:	4b0f      	ldr	r3, [pc, #60]	; (8008f44 <tcp_receive+0xf14>)
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0e:	1ad3      	subs	r3, r2, r3
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	db0a      	blt.n	8008f2a <tcp_receive+0xefa>
 8008f14:	4b0b      	ldr	r3, [pc, #44]	; (8008f44 <tcp_receive+0xf14>)
 8008f16:	681a      	ldr	r2, [r3, #0]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1c:	6879      	ldr	r1, [r7, #4]
 8008f1e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008f20:	440b      	add	r3, r1
 8008f22:	1ad3      	subs	r3, r2, r3
 8008f24:	3301      	adds	r3, #1
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	dd07      	ble.n	8008f3a <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	8b5b      	ldrh	r3, [r3, #26]
 8008f2e:	f043 0302 	orr.w	r3, r3, #2
 8008f32:	b29a      	uxth	r2, r3
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8008f38:	e7ff      	b.n	8008f3a <tcp_receive+0xf0a>
 8008f3a:	bf00      	nop
 8008f3c:	3750      	adds	r7, #80	; 0x50
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bdb0      	pop	{r4, r5, r7, pc}
 8008f42:	bf00      	nop
 8008f44:	200000f0 	.word	0x200000f0
 8008f48:	200000d0 	.word	0x200000d0
 8008f4c:	200000fa 	.word	0x200000fa
 8008f50:	08010374 	.word	0x08010374
 8008f54:	0801071c 	.word	0x0801071c
 8008f58:	080103c0 	.word	0x080103c0

08008f5c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b083      	sub	sp, #12
 8008f60:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8008f62:	4b15      	ldr	r3, [pc, #84]	; (8008fb8 <tcp_get_next_optbyte+0x5c>)
 8008f64:	881b      	ldrh	r3, [r3, #0]
 8008f66:	1c5a      	adds	r2, r3, #1
 8008f68:	b291      	uxth	r1, r2
 8008f6a:	4a13      	ldr	r2, [pc, #76]	; (8008fb8 <tcp_get_next_optbyte+0x5c>)
 8008f6c:	8011      	strh	r1, [r2, #0]
 8008f6e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8008f70:	4b12      	ldr	r3, [pc, #72]	; (8008fbc <tcp_get_next_optbyte+0x60>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d004      	beq.n	8008f82 <tcp_get_next_optbyte+0x26>
 8008f78:	4b11      	ldr	r3, [pc, #68]	; (8008fc0 <tcp_get_next_optbyte+0x64>)
 8008f7a:	881b      	ldrh	r3, [r3, #0]
 8008f7c:	88fa      	ldrh	r2, [r7, #6]
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d208      	bcs.n	8008f94 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8008f82:	4b10      	ldr	r3, [pc, #64]	; (8008fc4 <tcp_get_next_optbyte+0x68>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	3314      	adds	r3, #20
 8008f88:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8008f8a:	88fb      	ldrh	r3, [r7, #6]
 8008f8c:	683a      	ldr	r2, [r7, #0]
 8008f8e:	4413      	add	r3, r2
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	e00b      	b.n	8008fac <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8008f94:	88fb      	ldrh	r3, [r7, #6]
 8008f96:	b2da      	uxtb	r2, r3
 8008f98:	4b09      	ldr	r3, [pc, #36]	; (8008fc0 <tcp_get_next_optbyte+0x64>)
 8008f9a:	881b      	ldrh	r3, [r3, #0]
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	1ad3      	subs	r3, r2, r3
 8008fa0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8008fa2:	4b06      	ldr	r3, [pc, #24]	; (8008fbc <tcp_get_next_optbyte+0x60>)
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	797b      	ldrb	r3, [r7, #5]
 8008fa8:	4413      	add	r3, r2
 8008faa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	370c      	adds	r7, #12
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr
 8008fb8:	200000ec 	.word	0x200000ec
 8008fbc:	200000e8 	.word	0x200000e8
 8008fc0:	200000e6 	.word	0x200000e6
 8008fc4:	200000e0 	.word	0x200000e0

08008fc8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d106      	bne.n	8008fe4 <tcp_parseopt+0x1c>
 8008fd6:	4b31      	ldr	r3, [pc, #196]	; (800909c <tcp_parseopt+0xd4>)
 8008fd8:	f240 727d 	movw	r2, #1917	; 0x77d
 8008fdc:	4930      	ldr	r1, [pc, #192]	; (80090a0 <tcp_parseopt+0xd8>)
 8008fde:	4831      	ldr	r0, [pc, #196]	; (80090a4 <tcp_parseopt+0xdc>)
 8008fe0:	f005 f952 	bl	800e288 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8008fe4:	4b30      	ldr	r3, [pc, #192]	; (80090a8 <tcp_parseopt+0xe0>)
 8008fe6:	881b      	ldrh	r3, [r3, #0]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d053      	beq.n	8009094 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8008fec:	4b2f      	ldr	r3, [pc, #188]	; (80090ac <tcp_parseopt+0xe4>)
 8008fee:	2200      	movs	r2, #0
 8008ff0:	801a      	strh	r2, [r3, #0]
 8008ff2:	e043      	b.n	800907c <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 8008ff4:	f7ff ffb2 	bl	8008f5c <tcp_get_next_optbyte>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8008ffc:	7bfb      	ldrb	r3, [r7, #15]
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d03c      	beq.n	800907c <tcp_parseopt+0xb4>
 8009002:	2b02      	cmp	r3, #2
 8009004:	d002      	beq.n	800900c <tcp_parseopt+0x44>
 8009006:	2b00      	cmp	r3, #0
 8009008:	d03f      	beq.n	800908a <tcp_parseopt+0xc2>
 800900a:	e026      	b.n	800905a <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800900c:	f7ff ffa6 	bl	8008f5c <tcp_get_next_optbyte>
 8009010:	4603      	mov	r3, r0
 8009012:	2b04      	cmp	r3, #4
 8009014:	d13b      	bne.n	800908e <tcp_parseopt+0xc6>
 8009016:	4b25      	ldr	r3, [pc, #148]	; (80090ac <tcp_parseopt+0xe4>)
 8009018:	881b      	ldrh	r3, [r3, #0]
 800901a:	3302      	adds	r3, #2
 800901c:	4a22      	ldr	r2, [pc, #136]	; (80090a8 <tcp_parseopt+0xe0>)
 800901e:	8812      	ldrh	r2, [r2, #0]
 8009020:	4293      	cmp	r3, r2
 8009022:	dc34      	bgt.n	800908e <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009024:	f7ff ff9a 	bl	8008f5c <tcp_get_next_optbyte>
 8009028:	4603      	mov	r3, r0
 800902a:	b29b      	uxth	r3, r3
 800902c:	021b      	lsls	r3, r3, #8
 800902e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8009030:	f7ff ff94 	bl	8008f5c <tcp_get_next_optbyte>
 8009034:	4603      	mov	r3, r0
 8009036:	b29a      	uxth	r2, r3
 8009038:	89bb      	ldrh	r3, [r7, #12]
 800903a:	4313      	orrs	r3, r2
 800903c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800903e:	89bb      	ldrh	r3, [r7, #12]
 8009040:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009044:	d804      	bhi.n	8009050 <tcp_parseopt+0x88>
 8009046:	89bb      	ldrh	r3, [r7, #12]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d001      	beq.n	8009050 <tcp_parseopt+0x88>
 800904c:	89ba      	ldrh	r2, [r7, #12]
 800904e:	e001      	b.n	8009054 <tcp_parseopt+0x8c>
 8009050:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8009058:	e010      	b.n	800907c <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800905a:	f7ff ff7f 	bl	8008f5c <tcp_get_next_optbyte>
 800905e:	4603      	mov	r3, r0
 8009060:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8009062:	7afb      	ldrb	r3, [r7, #11]
 8009064:	2b01      	cmp	r3, #1
 8009066:	d914      	bls.n	8009092 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8009068:	7afb      	ldrb	r3, [r7, #11]
 800906a:	b29a      	uxth	r2, r3
 800906c:	4b0f      	ldr	r3, [pc, #60]	; (80090ac <tcp_parseopt+0xe4>)
 800906e:	881b      	ldrh	r3, [r3, #0]
 8009070:	4413      	add	r3, r2
 8009072:	b29b      	uxth	r3, r3
 8009074:	3b02      	subs	r3, #2
 8009076:	b29a      	uxth	r2, r3
 8009078:	4b0c      	ldr	r3, [pc, #48]	; (80090ac <tcp_parseopt+0xe4>)
 800907a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800907c:	4b0b      	ldr	r3, [pc, #44]	; (80090ac <tcp_parseopt+0xe4>)
 800907e:	881a      	ldrh	r2, [r3, #0]
 8009080:	4b09      	ldr	r3, [pc, #36]	; (80090a8 <tcp_parseopt+0xe0>)
 8009082:	881b      	ldrh	r3, [r3, #0]
 8009084:	429a      	cmp	r2, r3
 8009086:	d3b5      	bcc.n	8008ff4 <tcp_parseopt+0x2c>
 8009088:	e004      	b.n	8009094 <tcp_parseopt+0xcc>
          return;
 800908a:	bf00      	nop
 800908c:	e002      	b.n	8009094 <tcp_parseopt+0xcc>
            return;
 800908e:	bf00      	nop
 8009090:	e000      	b.n	8009094 <tcp_parseopt+0xcc>
            return;
 8009092:	bf00      	nop
      }
    }
  }
}
 8009094:	3710      	adds	r7, #16
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	08010374 	.word	0x08010374
 80090a0:	080107d8 	.word	0x080107d8
 80090a4:	080103c0 	.word	0x080103c0
 80090a8:	200000e4 	.word	0x200000e4
 80090ac:	200000ec 	.word	0x200000ec

080090b0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80090b0:	b480      	push	{r7}
 80090b2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80090b4:	4b05      	ldr	r3, [pc, #20]	; (80090cc <tcp_trigger_input_pcb_close+0x1c>)
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	f043 0310 	orr.w	r3, r3, #16
 80090bc:	b2da      	uxtb	r2, r3
 80090be:	4b03      	ldr	r3, [pc, #12]	; (80090cc <tcp_trigger_input_pcb_close+0x1c>)
 80090c0:	701a      	strb	r2, [r3, #0]
}
 80090c2:	bf00      	nop
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr
 80090cc:	200000fd 	.word	0x200000fd

080090d0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	60b9      	str	r1, [r7, #8]
 80090da:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d00a      	beq.n	80090f8 <tcp_route+0x28>
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	7a1b      	ldrb	r3, [r3, #8]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d006      	beq.n	80090f8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	7a1b      	ldrb	r3, [r3, #8]
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7fb f8c0 	bl	8004274 <netif_get_by_index>
 80090f4:	4603      	mov	r3, r0
 80090f6:	e003      	b.n	8009100 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f003 fe9f 	bl	800ce3c <ip4_route>
 80090fe:	4603      	mov	r3, r0
  }
}
 8009100:	4618      	mov	r0, r3
 8009102:	3710      	adds	r7, #16
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8009108:	b590      	push	{r4, r7, lr}
 800910a:	b087      	sub	sp, #28
 800910c:	af00      	add	r7, sp, #0
 800910e:	60f8      	str	r0, [r7, #12]
 8009110:	60b9      	str	r1, [r7, #8]
 8009112:	603b      	str	r3, [r7, #0]
 8009114:	4613      	mov	r3, r2
 8009116:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d105      	bne.n	800912a <tcp_create_segment+0x22>
 800911e:	4b44      	ldr	r3, [pc, #272]	; (8009230 <tcp_create_segment+0x128>)
 8009120:	22a3      	movs	r2, #163	; 0xa3
 8009122:	4944      	ldr	r1, [pc, #272]	; (8009234 <tcp_create_segment+0x12c>)
 8009124:	4844      	ldr	r0, [pc, #272]	; (8009238 <tcp_create_segment+0x130>)
 8009126:	f005 f8af 	bl	800e288 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d105      	bne.n	800913c <tcp_create_segment+0x34>
 8009130:	4b3f      	ldr	r3, [pc, #252]	; (8009230 <tcp_create_segment+0x128>)
 8009132:	22a4      	movs	r2, #164	; 0xa4
 8009134:	4941      	ldr	r1, [pc, #260]	; (800923c <tcp_create_segment+0x134>)
 8009136:	4840      	ldr	r0, [pc, #256]	; (8009238 <tcp_create_segment+0x130>)
 8009138:	f005 f8a6 	bl	800e288 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800913c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009140:	009b      	lsls	r3, r3, #2
 8009142:	b2db      	uxtb	r3, r3
 8009144:	f003 0304 	and.w	r3, r3, #4
 8009148:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800914a:	2003      	movs	r0, #3
 800914c:	f7fa fda8 	bl	8003ca0 <memp_malloc>
 8009150:	6138      	str	r0, [r7, #16]
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d104      	bne.n	8009162 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8009158:	68b8      	ldr	r0, [r7, #8]
 800915a:	f7fb fbe7 	bl	800492c <pbuf_free>
    return NULL;
 800915e:	2300      	movs	r3, #0
 8009160:	e061      	b.n	8009226 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8009168:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	2200      	movs	r2, #0
 800916e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	68ba      	ldr	r2, [r7, #8]
 8009174:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	891a      	ldrh	r2, [r3, #8]
 800917a:	7dfb      	ldrb	r3, [r7, #23]
 800917c:	b29b      	uxth	r3, r3
 800917e:	429a      	cmp	r2, r3
 8009180:	d205      	bcs.n	800918e <tcp_create_segment+0x86>
 8009182:	4b2b      	ldr	r3, [pc, #172]	; (8009230 <tcp_create_segment+0x128>)
 8009184:	22b0      	movs	r2, #176	; 0xb0
 8009186:	492e      	ldr	r1, [pc, #184]	; (8009240 <tcp_create_segment+0x138>)
 8009188:	482b      	ldr	r0, [pc, #172]	; (8009238 <tcp_create_segment+0x130>)
 800918a:	f005 f87d 	bl	800e288 <iprintf>
  seg->len = p->tot_len - optlen;
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	891a      	ldrh	r2, [r3, #8]
 8009192:	7dfb      	ldrb	r3, [r7, #23]
 8009194:	b29b      	uxth	r3, r3
 8009196:	1ad3      	subs	r3, r2, r3
 8009198:	b29a      	uxth	r2, r3
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800919e:	2114      	movs	r1, #20
 80091a0:	68b8      	ldr	r0, [r7, #8]
 80091a2:	f7fb fb2d 	bl	8004800 <pbuf_add_header>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d004      	beq.n	80091b6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80091ac:	6938      	ldr	r0, [r7, #16]
 80091ae:	f7fc ffef 	bl	8006190 <tcp_seg_free>
    return NULL;
 80091b2:	2300      	movs	r3, #0
 80091b4:	e037      	b.n	8009226 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	685a      	ldr	r2, [r3, #4]
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	8ada      	ldrh	r2, [r3, #22]
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	68dc      	ldr	r4, [r3, #12]
 80091c8:	4610      	mov	r0, r2
 80091ca:	f7fa f914 	bl	80033f6 <lwip_htons>
 80091ce:	4603      	mov	r3, r0
 80091d0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	8b1a      	ldrh	r2, [r3, #24]
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	68dc      	ldr	r4, [r3, #12]
 80091da:	4610      	mov	r0, r2
 80091dc:	f7fa f90b 	bl	80033f6 <lwip_htons>
 80091e0:	4603      	mov	r3, r0
 80091e2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	68dc      	ldr	r4, [r3, #12]
 80091e8:	6838      	ldr	r0, [r7, #0]
 80091ea:	f7fa f919 	bl	8003420 <lwip_htonl>
 80091ee:	4603      	mov	r3, r0
 80091f0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80091f2:	7dfb      	ldrb	r3, [r7, #23]
 80091f4:	089b      	lsrs	r3, r3, #2
 80091f6:	b2db      	uxtb	r3, r3
 80091f8:	b29b      	uxth	r3, r3
 80091fa:	3305      	adds	r3, #5
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	031b      	lsls	r3, r3, #12
 8009200:	b29a      	uxth	r2, r3
 8009202:	79fb      	ldrb	r3, [r7, #7]
 8009204:	b29b      	uxth	r3, r3
 8009206:	4313      	orrs	r3, r2
 8009208:	b29a      	uxth	r2, r3
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	68dc      	ldr	r4, [r3, #12]
 800920e:	4610      	mov	r0, r2
 8009210:	f7fa f8f1 	bl	80033f6 <lwip_htons>
 8009214:	4603      	mov	r3, r0
 8009216:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	68db      	ldr	r3, [r3, #12]
 800921c:	2200      	movs	r2, #0
 800921e:	749a      	strb	r2, [r3, #18]
 8009220:	2200      	movs	r2, #0
 8009222:	74da      	strb	r2, [r3, #19]
  return seg;
 8009224:	693b      	ldr	r3, [r7, #16]
}
 8009226:	4618      	mov	r0, r3
 8009228:	371c      	adds	r7, #28
 800922a:	46bd      	mov	sp, r7
 800922c:	bd90      	pop	{r4, r7, pc}
 800922e:	bf00      	nop
 8009230:	080107f4 	.word	0x080107f4
 8009234:	08010828 	.word	0x08010828
 8009238:	08010848 	.word	0x08010848
 800923c:	08010870 	.word	0x08010870
 8009240:	08010894 	.word	0x08010894

08009244 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b086      	sub	sp, #24
 8009248:	af00      	add	r7, sp, #0
 800924a:	607b      	str	r3, [r7, #4]
 800924c:	4603      	mov	r3, r0
 800924e:	73fb      	strb	r3, [r7, #15]
 8009250:	460b      	mov	r3, r1
 8009252:	81bb      	strh	r3, [r7, #12]
 8009254:	4613      	mov	r3, r2
 8009256:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8009258:	89bb      	ldrh	r3, [r7, #12]
 800925a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d105      	bne.n	800926e <tcp_pbuf_prealloc+0x2a>
 8009262:	4b30      	ldr	r3, [pc, #192]	; (8009324 <tcp_pbuf_prealloc+0xe0>)
 8009264:	22e8      	movs	r2, #232	; 0xe8
 8009266:	4930      	ldr	r1, [pc, #192]	; (8009328 <tcp_pbuf_prealloc+0xe4>)
 8009268:	4830      	ldr	r0, [pc, #192]	; (800932c <tcp_pbuf_prealloc+0xe8>)
 800926a:	f005 f80d 	bl	800e288 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800926e:	6a3b      	ldr	r3, [r7, #32]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d105      	bne.n	8009280 <tcp_pbuf_prealloc+0x3c>
 8009274:	4b2b      	ldr	r3, [pc, #172]	; (8009324 <tcp_pbuf_prealloc+0xe0>)
 8009276:	22e9      	movs	r2, #233	; 0xe9
 8009278:	492d      	ldr	r1, [pc, #180]	; (8009330 <tcp_pbuf_prealloc+0xec>)
 800927a:	482c      	ldr	r0, [pc, #176]	; (800932c <tcp_pbuf_prealloc+0xe8>)
 800927c:	f005 f804 	bl	800e288 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8009280:	89ba      	ldrh	r2, [r7, #12]
 8009282:	897b      	ldrh	r3, [r7, #10]
 8009284:	429a      	cmp	r2, r3
 8009286:	d221      	bcs.n	80092cc <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8009288:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800928c:	f003 0302 	and.w	r3, r3, #2
 8009290:	2b00      	cmp	r3, #0
 8009292:	d111      	bne.n	80092b8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8009294:	6a3b      	ldr	r3, [r7, #32]
 8009296:	8b5b      	ldrh	r3, [r3, #26]
 8009298:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800929c:	2b00      	cmp	r3, #0
 800929e:	d115      	bne.n	80092cc <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80092a0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d007      	beq.n	80092b8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80092a8:	6a3b      	ldr	r3, [r7, #32]
 80092aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d103      	bne.n	80092b8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80092b0:	6a3b      	ldr	r3, [r7, #32]
 80092b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d009      	beq.n	80092cc <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80092b8:	89bb      	ldrh	r3, [r7, #12]
 80092ba:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80092be:	f023 0203 	bic.w	r2, r3, #3
 80092c2:	897b      	ldrh	r3, [r7, #10]
 80092c4:	4293      	cmp	r3, r2
 80092c6:	bf28      	it	cs
 80092c8:	4613      	movcs	r3, r2
 80092ca:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80092cc:	8af9      	ldrh	r1, [r7, #22]
 80092ce:	7bfb      	ldrb	r3, [r7, #15]
 80092d0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80092d4:	4618      	mov	r0, r3
 80092d6:	f7fb f849 	bl	800436c <pbuf_alloc>
 80092da:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d101      	bne.n	80092e6 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80092e2:	2300      	movs	r3, #0
 80092e4:	e019      	b.n	800931a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d006      	beq.n	80092fc <tcp_pbuf_prealloc+0xb8>
 80092ee:	4b0d      	ldr	r3, [pc, #52]	; (8009324 <tcp_pbuf_prealloc+0xe0>)
 80092f0:	f240 120b 	movw	r2, #267	; 0x10b
 80092f4:	490f      	ldr	r1, [pc, #60]	; (8009334 <tcp_pbuf_prealloc+0xf0>)
 80092f6:	480d      	ldr	r0, [pc, #52]	; (800932c <tcp_pbuf_prealloc+0xe8>)
 80092f8:	f004 ffc6 	bl	800e288 <iprintf>
  *oversize = p->len - length;
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	895a      	ldrh	r2, [r3, #10]
 8009300:	89bb      	ldrh	r3, [r7, #12]
 8009302:	1ad3      	subs	r3, r2, r3
 8009304:	b29a      	uxth	r2, r3
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	89ba      	ldrh	r2, [r7, #12]
 800930e:	811a      	strh	r2, [r3, #8]
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	891a      	ldrh	r2, [r3, #8]
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	815a      	strh	r2, [r3, #10]
  return p;
 8009318:	693b      	ldr	r3, [r7, #16]
}
 800931a:	4618      	mov	r0, r3
 800931c:	3718      	adds	r7, #24
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop
 8009324:	080107f4 	.word	0x080107f4
 8009328:	080108ac 	.word	0x080108ac
 800932c:	08010848 	.word	0x08010848
 8009330:	080108d0 	.word	0x080108d0
 8009334:	080108f0 	.word	0x080108f0

08009338 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	460b      	mov	r3, r1
 8009342:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d106      	bne.n	8009358 <tcp_write_checks+0x20>
 800934a:	4b33      	ldr	r3, [pc, #204]	; (8009418 <tcp_write_checks+0xe0>)
 800934c:	f240 1233 	movw	r2, #307	; 0x133
 8009350:	4932      	ldr	r1, [pc, #200]	; (800941c <tcp_write_checks+0xe4>)
 8009352:	4833      	ldr	r0, [pc, #204]	; (8009420 <tcp_write_checks+0xe8>)
 8009354:	f004 ff98 	bl	800e288 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	7d1b      	ldrb	r3, [r3, #20]
 800935c:	2b04      	cmp	r3, #4
 800935e:	d00e      	beq.n	800937e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8009364:	2b07      	cmp	r3, #7
 8009366:	d00a      	beq.n	800937e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800936c:	2b02      	cmp	r3, #2
 800936e:	d006      	beq.n	800937e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8009374:	2b03      	cmp	r3, #3
 8009376:	d002      	beq.n	800937e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8009378:	f06f 030a 	mvn.w	r3, #10
 800937c:	e048      	b.n	8009410 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800937e:	887b      	ldrh	r3, [r7, #2]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d101      	bne.n	8009388 <tcp_write_checks+0x50>
    return ERR_OK;
 8009384:	2300      	movs	r3, #0
 8009386:	e043      	b.n	8009410 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800938e:	887a      	ldrh	r2, [r7, #2]
 8009390:	429a      	cmp	r2, r3
 8009392:	d909      	bls.n	80093a8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	8b5b      	ldrh	r3, [r3, #26]
 8009398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800939c:	b29a      	uxth	r2, r3
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80093a2:	f04f 33ff 	mov.w	r3, #4294967295
 80093a6:	e033      	b.n	8009410 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80093ae:	2b08      	cmp	r3, #8
 80093b0:	d909      	bls.n	80093c6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	8b5b      	ldrh	r3, [r3, #26]
 80093b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093ba:	b29a      	uxth	r2, r3
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80093c0:	f04f 33ff 	mov.w	r3, #4294967295
 80093c4:	e024      	b.n	8009410 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d00f      	beq.n	80093f0 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d11a      	bne.n	800940e <tcp_write_checks+0xd6>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d116      	bne.n	800940e <tcp_write_checks+0xd6>
 80093e0:	4b0d      	ldr	r3, [pc, #52]	; (8009418 <tcp_write_checks+0xe0>)
 80093e2:	f44f 72ab 	mov.w	r2, #342	; 0x156
 80093e6:	490f      	ldr	r1, [pc, #60]	; (8009424 <tcp_write_checks+0xec>)
 80093e8:	480d      	ldr	r0, [pc, #52]	; (8009420 <tcp_write_checks+0xe8>)
 80093ea:	f004 ff4d 	bl	800e288 <iprintf>
 80093ee:	e00e      	b.n	800940e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d103      	bne.n	8009400 <tcp_write_checks+0xc8>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d006      	beq.n	800940e <tcp_write_checks+0xd6>
 8009400:	4b05      	ldr	r3, [pc, #20]	; (8009418 <tcp_write_checks+0xe0>)
 8009402:	f240 1259 	movw	r2, #345	; 0x159
 8009406:	4908      	ldr	r1, [pc, #32]	; (8009428 <tcp_write_checks+0xf0>)
 8009408:	4805      	ldr	r0, [pc, #20]	; (8009420 <tcp_write_checks+0xe8>)
 800940a:	f004 ff3d 	bl	800e288 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800940e:	2300      	movs	r3, #0
}
 8009410:	4618      	mov	r0, r3
 8009412:	3708      	adds	r7, #8
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}
 8009418:	080107f4 	.word	0x080107f4
 800941c:	08010904 	.word	0x08010904
 8009420:	08010848 	.word	0x08010848
 8009424:	08010924 	.word	0x08010924
 8009428:	08010960 	.word	0x08010960

0800942c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800942c:	b590      	push	{r4, r7, lr}
 800942e:	b09b      	sub	sp, #108	; 0x6c
 8009430:	af04      	add	r7, sp, #16
 8009432:	60f8      	str	r0, [r7, #12]
 8009434:	60b9      	str	r1, [r7, #8]
 8009436:	4611      	mov	r1, r2
 8009438:	461a      	mov	r2, r3
 800943a:	460b      	mov	r3, r1
 800943c:	80fb      	strh	r3, [r7, #6]
 800943e:	4613      	mov	r3, r2
 8009440:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8009442:	2300      	movs	r3, #0
 8009444:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8009446:	2300      	movs	r3, #0
 8009448:	653b      	str	r3, [r7, #80]	; 0x50
 800944a:	2300      	movs	r3, #0
 800944c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800944e:	2300      	movs	r3, #0
 8009450:	64bb      	str	r3, [r7, #72]	; 0x48
 8009452:	2300      	movs	r3, #0
 8009454:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8009456:	2300      	movs	r3, #0
 8009458:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800945c:	2300      	movs	r3, #0
 800945e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8009462:	2300      	movs	r3, #0
 8009464:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8009466:	2300      	movs	r3, #0
 8009468:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800946a:	2300      	movs	r3, #0
 800946c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d109      	bne.n	8009488 <tcp_write+0x5c>
 8009474:	4ba5      	ldr	r3, [pc, #660]	; (800970c <tcp_write+0x2e0>)
 8009476:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800947a:	49a5      	ldr	r1, [pc, #660]	; (8009710 <tcp_write+0x2e4>)
 800947c:	48a5      	ldr	r0, [pc, #660]	; (8009714 <tcp_write+0x2e8>)
 800947e:	f004 ff03 	bl	800e288 <iprintf>
 8009482:	f06f 030f 	mvn.w	r3, #15
 8009486:	e32c      	b.n	8009ae2 <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800948e:	085b      	lsrs	r3, r3, #1
 8009490:	b29a      	uxth	r2, r3
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009496:	4293      	cmp	r3, r2
 8009498:	bf28      	it	cs
 800949a:	4613      	movcs	r3, r2
 800949c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800949e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d102      	bne.n	80094aa <tcp_write+0x7e>
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80094a8:	e000      	b.n	80094ac <tcp_write+0x80>
 80094aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80094ac:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d109      	bne.n	80094c8 <tcp_write+0x9c>
 80094b4:	4b95      	ldr	r3, [pc, #596]	; (800970c <tcp_write+0x2e0>)
 80094b6:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 80094ba:	4997      	ldr	r1, [pc, #604]	; (8009718 <tcp_write+0x2ec>)
 80094bc:	4895      	ldr	r0, [pc, #596]	; (8009714 <tcp_write+0x2e8>)
 80094be:	f004 fee3 	bl	800e288 <iprintf>
 80094c2:	f06f 030f 	mvn.w	r3, #15
 80094c6:	e30c      	b.n	8009ae2 <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80094c8:	88fb      	ldrh	r3, [r7, #6]
 80094ca:	4619      	mov	r1, r3
 80094cc:	68f8      	ldr	r0, [r7, #12]
 80094ce:	f7ff ff33 	bl	8009338 <tcp_write_checks>
 80094d2:	4603      	mov	r3, r0
 80094d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80094d8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d002      	beq.n	80094e6 <tcp_write+0xba>
    return err;
 80094e0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80094e4:	e2fd      	b.n	8009ae2 <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80094ec:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80094f0:	2300      	movs	r3, #0
 80094f2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	f000 80f7 	beq.w	80096ee <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009504:	653b      	str	r3, [r7, #80]	; 0x50
 8009506:	e002      	b.n	800950e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8009508:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800950e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d1f8      	bne.n	8009508 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8009516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009518:	7a9b      	ldrb	r3, [r3, #10]
 800951a:	009b      	lsls	r3, r3, #2
 800951c:	b29b      	uxth	r3, r3
 800951e:	f003 0304 	and.w	r3, r3, #4
 8009522:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8009524:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009528:	891b      	ldrh	r3, [r3, #8]
 800952a:	4619      	mov	r1, r3
 800952c:	8c3b      	ldrh	r3, [r7, #32]
 800952e:	440b      	add	r3, r1
 8009530:	429a      	cmp	r2, r3
 8009532:	da06      	bge.n	8009542 <tcp_write+0x116>
 8009534:	4b75      	ldr	r3, [pc, #468]	; (800970c <tcp_write+0x2e0>)
 8009536:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800953a:	4978      	ldr	r1, [pc, #480]	; (800971c <tcp_write+0x2f0>)
 800953c:	4875      	ldr	r0, [pc, #468]	; (8009714 <tcp_write+0x2e8>)
 800953e:	f004 fea3 	bl	800e288 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8009542:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009544:	891a      	ldrh	r2, [r3, #8]
 8009546:	8c3b      	ldrh	r3, [r7, #32]
 8009548:	4413      	add	r3, r2
 800954a:	b29b      	uxth	r3, r3
 800954c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800954e:	1ad3      	subs	r3, r2, r3
 8009550:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009558:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800955a:	8a7b      	ldrh	r3, [r7, #18]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d027      	beq.n	80095b0 <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8009560:	8a7b      	ldrh	r3, [r7, #18]
 8009562:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009564:	429a      	cmp	r2, r3
 8009566:	d206      	bcs.n	8009576 <tcp_write+0x14a>
 8009568:	4b68      	ldr	r3, [pc, #416]	; (800970c <tcp_write+0x2e0>)
 800956a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800956e:	496c      	ldr	r1, [pc, #432]	; (8009720 <tcp_write+0x2f4>)
 8009570:	4868      	ldr	r0, [pc, #416]	; (8009714 <tcp_write+0x2e8>)
 8009572:	f004 fe89 	bl	800e288 <iprintf>
      seg = last_unsent;
 8009576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009578:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800957a:	8a7b      	ldrh	r3, [r7, #18]
 800957c:	88fa      	ldrh	r2, [r7, #6]
 800957e:	429a      	cmp	r2, r3
 8009580:	d901      	bls.n	8009586 <tcp_write+0x15a>
 8009582:	8a7b      	ldrh	r3, [r7, #18]
 8009584:	e000      	b.n	8009588 <tcp_write+0x15c>
 8009586:	88fb      	ldrh	r3, [r7, #6]
 8009588:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800958a:	4293      	cmp	r3, r2
 800958c:	bfa8      	it	ge
 800958e:	4613      	movge	r3, r2
 8009590:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8009592:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009596:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009598:	4413      	add	r3, r2
 800959a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800959e:	8a7a      	ldrh	r2, [r7, #18]
 80095a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80095a2:	1ad3      	subs	r3, r2, r3
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80095a8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80095aa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80095ac:	1ad3      	subs	r3, r2, r3
 80095ae:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80095b0:	8a7b      	ldrh	r3, [r7, #18]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d00b      	beq.n	80095ce <tcp_write+0x1a2>
 80095b6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80095ba:	88fb      	ldrh	r3, [r7, #6]
 80095bc:	429a      	cmp	r2, r3
 80095be:	d006      	beq.n	80095ce <tcp_write+0x1a2>
 80095c0:	4b52      	ldr	r3, [pc, #328]	; (800970c <tcp_write+0x2e0>)
 80095c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095c6:	4957      	ldr	r1, [pc, #348]	; (8009724 <tcp_write+0x2f8>)
 80095c8:	4852      	ldr	r0, [pc, #328]	; (8009714 <tcp_write+0x2e8>)
 80095ca:	f004 fe5d 	bl	800e288 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80095ce:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80095d2:	88fb      	ldrh	r3, [r7, #6]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	f080 8168 	bcs.w	80098aa <tcp_write+0x47e>
 80095da:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80095dc:	2b00      	cmp	r3, #0
 80095de:	f000 8164 	beq.w	80098aa <tcp_write+0x47e>
 80095e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095e4:	891b      	ldrh	r3, [r3, #8]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	f000 815f 	beq.w	80098aa <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80095ec:	88fa      	ldrh	r2, [r7, #6]
 80095ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80095f2:	1ad2      	subs	r2, r2, r3
 80095f4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80095f6:	4293      	cmp	r3, r2
 80095f8:	bfa8      	it	ge
 80095fa:	4613      	movge	r3, r2
 80095fc:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80095fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009600:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8009602:	797b      	ldrb	r3, [r7, #5]
 8009604:	f003 0301 	and.w	r3, r3, #1
 8009608:	2b00      	cmp	r3, #0
 800960a:	d027      	beq.n	800965c <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800960c:	f107 0012 	add.w	r0, r7, #18
 8009610:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009612:	8bf9      	ldrh	r1, [r7, #30]
 8009614:	2301      	movs	r3, #1
 8009616:	9302      	str	r3, [sp, #8]
 8009618:	797b      	ldrb	r3, [r7, #5]
 800961a:	9301      	str	r3, [sp, #4]
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	9300      	str	r3, [sp, #0]
 8009620:	4603      	mov	r3, r0
 8009622:	2000      	movs	r0, #0
 8009624:	f7ff fe0e 	bl	8009244 <tcp_pbuf_prealloc>
 8009628:	6578      	str	r0, [r7, #84]	; 0x54
 800962a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800962c:	2b00      	cmp	r3, #0
 800962e:	f000 8226 	beq.w	8009a7e <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8009632:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009634:	6858      	ldr	r0, [r3, #4]
 8009636:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800963a:	68ba      	ldr	r2, [r7, #8]
 800963c:	4413      	add	r3, r2
 800963e:	8bfa      	ldrh	r2, [r7, #30]
 8009640:	4619      	mov	r1, r3
 8009642:	f004 fe0e 	bl	800e262 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8009646:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009648:	f7fb f9f8 	bl	8004a3c <pbuf_clen>
 800964c:	4603      	mov	r3, r0
 800964e:	461a      	mov	r2, r3
 8009650:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009654:	4413      	add	r3, r2
 8009656:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800965a:	e041      	b.n	80096e0 <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800965c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	637b      	str	r3, [r7, #52]	; 0x34
 8009662:	e002      	b.n	800966a <tcp_write+0x23e>
 8009664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	637b      	str	r3, [r7, #52]	; 0x34
 800966a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d1f8      	bne.n	8009664 <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8009672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009674:	7b1b      	ldrb	r3, [r3, #12]
 8009676:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800967a:	2b00      	cmp	r3, #0
 800967c:	d115      	bne.n	80096aa <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800967e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009684:	8952      	ldrh	r2, [r2, #10]
 8009686:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8009688:	68ba      	ldr	r2, [r7, #8]
 800968a:	429a      	cmp	r2, r3
 800968c:	d10d      	bne.n	80096aa <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800968e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009692:	2b00      	cmp	r3, #0
 8009694:	d006      	beq.n	80096a4 <tcp_write+0x278>
 8009696:	4b1d      	ldr	r3, [pc, #116]	; (800970c <tcp_write+0x2e0>)
 8009698:	f240 2231 	movw	r2, #561	; 0x231
 800969c:	4922      	ldr	r1, [pc, #136]	; (8009728 <tcp_write+0x2fc>)
 800969e:	481d      	ldr	r0, [pc, #116]	; (8009714 <tcp_write+0x2e8>)
 80096a0:	f004 fdf2 	bl	800e288 <iprintf>
          extendlen = seglen;
 80096a4:	8bfb      	ldrh	r3, [r7, #30]
 80096a6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80096a8:	e01a      	b.n	80096e0 <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80096aa:	8bfb      	ldrh	r3, [r7, #30]
 80096ac:	2201      	movs	r2, #1
 80096ae:	4619      	mov	r1, r3
 80096b0:	2000      	movs	r0, #0
 80096b2:	f7fa fe5b 	bl	800436c <pbuf_alloc>
 80096b6:	6578      	str	r0, [r7, #84]	; 0x54
 80096b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	f000 81e1 	beq.w	8009a82 <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80096c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80096c4:	68ba      	ldr	r2, [r7, #8]
 80096c6:	441a      	add	r2, r3
 80096c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096ca:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80096cc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80096ce:	f7fb f9b5 	bl	8004a3c <pbuf_clen>
 80096d2:	4603      	mov	r3, r0
 80096d4:	461a      	mov	r2, r3
 80096d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80096da:	4413      	add	r3, r2
 80096dc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80096e0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80096e4:	8bfb      	ldrh	r3, [r7, #30]
 80096e6:	4413      	add	r3, r2
 80096e8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80096ec:	e0dd      	b.n	80098aa <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	f000 80d8 	beq.w	80098aa <tcp_write+0x47e>
 80096fa:	4b04      	ldr	r3, [pc, #16]	; (800970c <tcp_write+0x2e0>)
 80096fc:	f240 224b 	movw	r2, #587	; 0x24b
 8009700:	490a      	ldr	r1, [pc, #40]	; (800972c <tcp_write+0x300>)
 8009702:	4804      	ldr	r0, [pc, #16]	; (8009714 <tcp_write+0x2e8>)
 8009704:	f004 fdc0 	bl	800e288 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8009708:	e0cf      	b.n	80098aa <tcp_write+0x47e>
 800970a:	bf00      	nop
 800970c:	080107f4 	.word	0x080107f4
 8009710:	08010994 	.word	0x08010994
 8009714:	08010848 	.word	0x08010848
 8009718:	080109ac 	.word	0x080109ac
 800971c:	080109e0 	.word	0x080109e0
 8009720:	080109f8 	.word	0x080109f8
 8009724:	08010a18 	.word	0x08010a18
 8009728:	08010a38 	.word	0x08010a38
 800972c:	08010a64 	.word	0x08010a64
    struct pbuf *p;
    u16_t left = len - pos;
 8009730:	88fa      	ldrh	r2, [r7, #6]
 8009732:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009736:	1ad3      	subs	r3, r2, r3
 8009738:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800973a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800973e:	b29b      	uxth	r3, r3
 8009740:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009742:	1ad3      	subs	r3, r2, r3
 8009744:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8009746:	8b7a      	ldrh	r2, [r7, #26]
 8009748:	8bbb      	ldrh	r3, [r7, #28]
 800974a:	4293      	cmp	r3, r2
 800974c:	bf28      	it	cs
 800974e:	4613      	movcs	r3, r2
 8009750:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8009752:	797b      	ldrb	r3, [r7, #5]
 8009754:	f003 0301 	and.w	r3, r3, #1
 8009758:	2b00      	cmp	r3, #0
 800975a:	d036      	beq.n	80097ca <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800975c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009760:	b29a      	uxth	r2, r3
 8009762:	8b3b      	ldrh	r3, [r7, #24]
 8009764:	4413      	add	r3, r2
 8009766:	b299      	uxth	r1, r3
 8009768:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800976a:	2b00      	cmp	r3, #0
 800976c:	bf0c      	ite	eq
 800976e:	2301      	moveq	r3, #1
 8009770:	2300      	movne	r3, #0
 8009772:	b2db      	uxtb	r3, r3
 8009774:	f107 0012 	add.w	r0, r7, #18
 8009778:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800977a:	9302      	str	r3, [sp, #8]
 800977c:	797b      	ldrb	r3, [r7, #5]
 800977e:	9301      	str	r3, [sp, #4]
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	9300      	str	r3, [sp, #0]
 8009784:	4603      	mov	r3, r0
 8009786:	2036      	movs	r0, #54	; 0x36
 8009788:	f7ff fd5c 	bl	8009244 <tcp_pbuf_prealloc>
 800978c:	6338      	str	r0, [r7, #48]	; 0x30
 800978e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009790:	2b00      	cmp	r3, #0
 8009792:	f000 8178 	beq.w	8009a86 <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8009796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009798:	895b      	ldrh	r3, [r3, #10]
 800979a:	8b3a      	ldrh	r2, [r7, #24]
 800979c:	429a      	cmp	r2, r3
 800979e:	d906      	bls.n	80097ae <tcp_write+0x382>
 80097a0:	4b8c      	ldr	r3, [pc, #560]	; (80099d4 <tcp_write+0x5a8>)
 80097a2:	f240 2267 	movw	r2, #615	; 0x267
 80097a6:	498c      	ldr	r1, [pc, #560]	; (80099d8 <tcp_write+0x5ac>)
 80097a8:	488c      	ldr	r0, [pc, #560]	; (80099dc <tcp_write+0x5b0>)
 80097aa:	f004 fd6d 	bl	800e288 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80097ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b0:	685a      	ldr	r2, [r3, #4]
 80097b2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80097b6:	18d0      	adds	r0, r2, r3
 80097b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80097bc:	68ba      	ldr	r2, [r7, #8]
 80097be:	4413      	add	r3, r2
 80097c0:	8b3a      	ldrh	r2, [r7, #24]
 80097c2:	4619      	mov	r1, r3
 80097c4:	f004 fd4d 	bl	800e262 <memcpy>
 80097c8:	e02f      	b.n	800982a <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80097ca:	8a7b      	ldrh	r3, [r7, #18]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d006      	beq.n	80097de <tcp_write+0x3b2>
 80097d0:	4b80      	ldr	r3, [pc, #512]	; (80099d4 <tcp_write+0x5a8>)
 80097d2:	f240 2271 	movw	r2, #625	; 0x271
 80097d6:	4982      	ldr	r1, [pc, #520]	; (80099e0 <tcp_write+0x5b4>)
 80097d8:	4880      	ldr	r0, [pc, #512]	; (80099dc <tcp_write+0x5b0>)
 80097da:	f004 fd55 	bl	800e288 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80097de:	8b3b      	ldrh	r3, [r7, #24]
 80097e0:	2201      	movs	r2, #1
 80097e2:	4619      	mov	r1, r3
 80097e4:	2036      	movs	r0, #54	; 0x36
 80097e6:	f7fa fdc1 	bl	800436c <pbuf_alloc>
 80097ea:	6178      	str	r0, [r7, #20]
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	f000 814b 	beq.w	8009a8a <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80097f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80097f8:	68ba      	ldr	r2, [r7, #8]
 80097fa:	441a      	add	r2, r3
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009800:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009804:	b29b      	uxth	r3, r3
 8009806:	f44f 7220 	mov.w	r2, #640	; 0x280
 800980a:	4619      	mov	r1, r3
 800980c:	2036      	movs	r0, #54	; 0x36
 800980e:	f7fa fdad 	bl	800436c <pbuf_alloc>
 8009812:	6338      	str	r0, [r7, #48]	; 0x30
 8009814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009816:	2b00      	cmp	r3, #0
 8009818:	d103      	bne.n	8009822 <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800981a:	6978      	ldr	r0, [r7, #20]
 800981c:	f7fb f886 	bl	800492c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8009820:	e136      	b.n	8009a90 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8009822:	6979      	ldr	r1, [r7, #20]
 8009824:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009826:	f7fb f943 	bl	8004ab0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800982a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800982c:	f7fb f906 	bl	8004a3c <pbuf_clen>
 8009830:	4603      	mov	r3, r0
 8009832:	461a      	mov	r2, r3
 8009834:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009838:	4413      	add	r3, r2
 800983a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800983e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009842:	2b09      	cmp	r3, #9
 8009844:	d903      	bls.n	800984e <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8009846:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009848:	f7fb f870 	bl	800492c <pbuf_free>
      goto memerr;
 800984c:	e120      	b.n	8009a90 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009852:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009856:	441a      	add	r2, r3
 8009858:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800985c:	9300      	str	r3, [sp, #0]
 800985e:	4613      	mov	r3, r2
 8009860:	2200      	movs	r2, #0
 8009862:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009864:	68f8      	ldr	r0, [r7, #12]
 8009866:	f7ff fc4f 	bl	8009108 <tcp_create_segment>
 800986a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800986c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800986e:	2b00      	cmp	r3, #0
 8009870:	f000 810d 	beq.w	8009a8e <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8009874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009876:	2b00      	cmp	r3, #0
 8009878:	d102      	bne.n	8009880 <tcp_write+0x454>
      queue = seg;
 800987a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800987c:	647b      	str	r3, [r7, #68]	; 0x44
 800987e:	e00c      	b.n	800989a <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8009880:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009882:	2b00      	cmp	r3, #0
 8009884:	d106      	bne.n	8009894 <tcp_write+0x468>
 8009886:	4b53      	ldr	r3, [pc, #332]	; (80099d4 <tcp_write+0x5a8>)
 8009888:	f240 22ab 	movw	r2, #683	; 0x2ab
 800988c:	4955      	ldr	r1, [pc, #340]	; (80099e4 <tcp_write+0x5b8>)
 800988e:	4853      	ldr	r0, [pc, #332]	; (80099dc <tcp_write+0x5b0>)
 8009890:	f004 fcfa 	bl	800e288 <iprintf>
      prev_seg->next = seg;
 8009894:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009896:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009898:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800989a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800989c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800989e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80098a2:	8b3b      	ldrh	r3, [r7, #24]
 80098a4:	4413      	add	r3, r2
 80098a6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80098aa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80098ae:	88fb      	ldrh	r3, [r7, #6]
 80098b0:	429a      	cmp	r2, r3
 80098b2:	f4ff af3d 	bcc.w	8009730 <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80098b6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d02c      	beq.n	8009916 <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80098bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098c2:	e01e      	b.n	8009902 <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 80098c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098c6:	891a      	ldrh	r2, [r3, #8]
 80098c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80098ca:	4413      	add	r3, r2
 80098cc:	b29a      	uxth	r2, r3
 80098ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d0:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80098d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d110      	bne.n	80098fc <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80098da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098e0:	8952      	ldrh	r2, [r2, #10]
 80098e2:	4413      	add	r3, r2
 80098e4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80098e6:	68b9      	ldr	r1, [r7, #8]
 80098e8:	4618      	mov	r0, r3
 80098ea:	f004 fcba 	bl	800e262 <memcpy>
        p->len += oversize_used;
 80098ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f0:	895a      	ldrh	r2, [r3, #10]
 80098f2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80098f4:	4413      	add	r3, r2
 80098f6:	b29a      	uxth	r2, r3
 80098f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098fa:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80098fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009904:	2b00      	cmp	r3, #0
 8009906:	d1dd      	bne.n	80098c4 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 8009908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800990a:	891a      	ldrh	r2, [r3, #8]
 800990c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800990e:	4413      	add	r3, r2
 8009910:	b29a      	uxth	r2, r3
 8009912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009914:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8009916:	8a7a      	ldrh	r2, [r7, #18]
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800991e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009920:	2b00      	cmp	r3, #0
 8009922:	d018      	beq.n	8009956 <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8009924:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009926:	2b00      	cmp	r3, #0
 8009928:	d106      	bne.n	8009938 <tcp_write+0x50c>
 800992a:	4b2a      	ldr	r3, [pc, #168]	; (80099d4 <tcp_write+0x5a8>)
 800992c:	f240 22e1 	movw	r2, #737	; 0x2e1
 8009930:	492d      	ldr	r1, [pc, #180]	; (80099e8 <tcp_write+0x5bc>)
 8009932:	482a      	ldr	r0, [pc, #168]	; (80099dc <tcp_write+0x5b0>)
 8009934:	f004 fca8 	bl	800e288 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8009938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800993a:	685b      	ldr	r3, [r3, #4]
 800993c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800993e:	4618      	mov	r0, r3
 8009940:	f7fb f8b6 	bl	8004ab0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8009944:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009946:	891a      	ldrh	r2, [r3, #8]
 8009948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800994a:	891b      	ldrh	r3, [r3, #8]
 800994c:	4413      	add	r3, r2
 800994e:	b29a      	uxth	r2, r3
 8009950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009952:	811a      	strh	r2, [r3, #8]
 8009954:	e037      	b.n	80099c6 <tcp_write+0x59a>
  } else if (extendlen > 0) {
 8009956:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009958:	2b00      	cmp	r3, #0
 800995a:	d034      	beq.n	80099c6 <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800995c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800995e:	2b00      	cmp	r3, #0
 8009960:	d003      	beq.n	800996a <tcp_write+0x53e>
 8009962:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d106      	bne.n	8009978 <tcp_write+0x54c>
 800996a:	4b1a      	ldr	r3, [pc, #104]	; (80099d4 <tcp_write+0x5a8>)
 800996c:	f240 22e7 	movw	r2, #743	; 0x2e7
 8009970:	491e      	ldr	r1, [pc, #120]	; (80099ec <tcp_write+0x5c0>)
 8009972:	481a      	ldr	r0, [pc, #104]	; (80099dc <tcp_write+0x5b0>)
 8009974:	f004 fc88 	bl	800e288 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8009978:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	62bb      	str	r3, [r7, #40]	; 0x28
 800997e:	e009      	b.n	8009994 <tcp_write+0x568>
      p->tot_len += extendlen;
 8009980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009982:	891a      	ldrh	r2, [r3, #8]
 8009984:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009986:	4413      	add	r3, r2
 8009988:	b29a      	uxth	r2, r3
 800998a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800998c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800998e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	62bb      	str	r3, [r7, #40]	; 0x28
 8009994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d1f1      	bne.n	8009980 <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 800999c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800999e:	891a      	ldrh	r2, [r3, #8]
 80099a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80099a2:	4413      	add	r3, r2
 80099a4:	b29a      	uxth	r2, r3
 80099a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a8:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80099aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ac:	895a      	ldrh	r2, [r3, #10]
 80099ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80099b0:	4413      	add	r3, r2
 80099b2:	b29a      	uxth	r2, r3
 80099b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b6:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80099b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099ba:	891a      	ldrh	r2, [r3, #8]
 80099bc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80099be:	4413      	add	r3, r2
 80099c0:	b29a      	uxth	r2, r3
 80099c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099c4:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80099c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d111      	bne.n	80099f0 <tcp_write+0x5c4>
    pcb->unsent = queue;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80099d0:	66da      	str	r2, [r3, #108]	; 0x6c
 80099d2:	e010      	b.n	80099f6 <tcp_write+0x5ca>
 80099d4:	080107f4 	.word	0x080107f4
 80099d8:	08010a94 	.word	0x08010a94
 80099dc:	08010848 	.word	0x08010848
 80099e0:	08010ad4 	.word	0x08010ad4
 80099e4:	08010ae4 	.word	0x08010ae4
 80099e8:	08010af8 	.word	0x08010af8
 80099ec:	08010b30 	.word	0x08010b30
  } else {
    last_unsent->next = queue;
 80099f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80099f4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80099fa:	88fb      	ldrh	r3, [r7, #6]
 80099fc:	441a      	add	r2, r3
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8009a08:	88fb      	ldrh	r3, [r7, #6]
 8009a0a:	1ad3      	subs	r3, r2, r3
 8009a0c:	b29a      	uxth	r2, r3
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8009a1a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d00e      	beq.n	8009a46 <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d10a      	bne.n	8009a46 <tcp_write+0x61a>
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d106      	bne.n	8009a46 <tcp_write+0x61a>
 8009a38:	4b2c      	ldr	r3, [pc, #176]	; (8009aec <tcp_write+0x6c0>)
 8009a3a:	f240 3213 	movw	r2, #787	; 0x313
 8009a3e:	492c      	ldr	r1, [pc, #176]	; (8009af0 <tcp_write+0x6c4>)
 8009a40:	482c      	ldr	r0, [pc, #176]	; (8009af4 <tcp_write+0x6c8>)
 8009a42:	f004 fc21 	bl	800e288 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8009a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d016      	beq.n	8009a7a <tcp_write+0x64e>
 8009a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d012      	beq.n	8009a7a <tcp_write+0x64e>
 8009a54:	797b      	ldrb	r3, [r7, #5]
 8009a56:	f003 0302 	and.w	r3, r3, #2
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d10d      	bne.n	8009a7a <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8009a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a60:	68db      	ldr	r3, [r3, #12]
 8009a62:	899b      	ldrh	r3, [r3, #12]
 8009a64:	b29c      	uxth	r4, r3
 8009a66:	2008      	movs	r0, #8
 8009a68:	f7f9 fcc5 	bl	80033f6 <lwip_htons>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	461a      	mov	r2, r3
 8009a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a72:	68db      	ldr	r3, [r3, #12]
 8009a74:	4322      	orrs	r2, r4
 8009a76:	b292      	uxth	r2, r2
 8009a78:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	e031      	b.n	8009ae2 <tcp_write+0x6b6>
          goto memerr;
 8009a7e:	bf00      	nop
 8009a80:	e006      	b.n	8009a90 <tcp_write+0x664>
            goto memerr;
 8009a82:	bf00      	nop
 8009a84:	e004      	b.n	8009a90 <tcp_write+0x664>
        goto memerr;
 8009a86:	bf00      	nop
 8009a88:	e002      	b.n	8009a90 <tcp_write+0x664>
        goto memerr;
 8009a8a:	bf00      	nop
 8009a8c:	e000      	b.n	8009a90 <tcp_write+0x664>
      goto memerr;
 8009a8e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	8b5b      	ldrh	r3, [r3, #26]
 8009a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a98:	b29a      	uxth	r2, r3
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8009a9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d002      	beq.n	8009aaa <tcp_write+0x67e>
    pbuf_free(concat_p);
 8009aa4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009aa6:	f7fa ff41 	bl	800492c <pbuf_free>
  }
  if (queue != NULL) {
 8009aaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d002      	beq.n	8009ab6 <tcp_write+0x68a>
    tcp_segs_free(queue);
 8009ab0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009ab2:	f7fc fb59 	bl	8006168 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d00e      	beq.n	8009ade <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d10a      	bne.n	8009ade <tcp_write+0x6b2>
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d106      	bne.n	8009ade <tcp_write+0x6b2>
 8009ad0:	4b06      	ldr	r3, [pc, #24]	; (8009aec <tcp_write+0x6c0>)
 8009ad2:	f44f 724a 	mov.w	r2, #808	; 0x328
 8009ad6:	4906      	ldr	r1, [pc, #24]	; (8009af0 <tcp_write+0x6c4>)
 8009ad8:	4806      	ldr	r0, [pc, #24]	; (8009af4 <tcp_write+0x6c8>)
 8009ada:	f004 fbd5 	bl	800e288 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8009ade:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	375c      	adds	r7, #92	; 0x5c
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd90      	pop	{r4, r7, pc}
 8009aea:	bf00      	nop
 8009aec:	080107f4 	.word	0x080107f4
 8009af0:	08010b68 	.word	0x08010b68
 8009af4:	08010848 	.word	0x08010848

08009af8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8009af8:	b590      	push	{r4, r7, lr}
 8009afa:	b08b      	sub	sp, #44	; 0x2c
 8009afc:	af02      	add	r7, sp, #8
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	460b      	mov	r3, r1
 8009b02:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8009b04:	2300      	movs	r3, #0
 8009b06:	61fb      	str	r3, [r7, #28]
 8009b08:	2300      	movs	r3, #0
 8009b0a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d106      	bne.n	8009b24 <tcp_split_unsent_seg+0x2c>
 8009b16:	4b95      	ldr	r3, [pc, #596]	; (8009d6c <tcp_split_unsent_seg+0x274>)
 8009b18:	f240 324b 	movw	r2, #843	; 0x34b
 8009b1c:	4994      	ldr	r1, [pc, #592]	; (8009d70 <tcp_split_unsent_seg+0x278>)
 8009b1e:	4895      	ldr	r0, [pc, #596]	; (8009d74 <tcp_split_unsent_seg+0x27c>)
 8009b20:	f004 fbb2 	bl	800e288 <iprintf>

  useg = pcb->unsent;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b28:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d102      	bne.n	8009b36 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8009b30:	f04f 33ff 	mov.w	r3, #4294967295
 8009b34:	e116      	b.n	8009d64 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8009b36:	887b      	ldrh	r3, [r7, #2]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d109      	bne.n	8009b50 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8009b3c:	4b8b      	ldr	r3, [pc, #556]	; (8009d6c <tcp_split_unsent_seg+0x274>)
 8009b3e:	f240 3253 	movw	r2, #851	; 0x353
 8009b42:	498d      	ldr	r1, [pc, #564]	; (8009d78 <tcp_split_unsent_seg+0x280>)
 8009b44:	488b      	ldr	r0, [pc, #556]	; (8009d74 <tcp_split_unsent_seg+0x27c>)
 8009b46:	f004 fb9f 	bl	800e288 <iprintf>
    return ERR_VAL;
 8009b4a:	f06f 0305 	mvn.w	r3, #5
 8009b4e:	e109      	b.n	8009d64 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	891b      	ldrh	r3, [r3, #8]
 8009b54:	887a      	ldrh	r2, [r7, #2]
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d301      	bcc.n	8009b5e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	e102      	b.n	8009d64 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b62:	887a      	ldrh	r2, [r7, #2]
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d906      	bls.n	8009b76 <tcp_split_unsent_seg+0x7e>
 8009b68:	4b80      	ldr	r3, [pc, #512]	; (8009d6c <tcp_split_unsent_seg+0x274>)
 8009b6a:	f240 325b 	movw	r2, #859	; 0x35b
 8009b6e:	4983      	ldr	r1, [pc, #524]	; (8009d7c <tcp_split_unsent_seg+0x284>)
 8009b70:	4880      	ldr	r0, [pc, #512]	; (8009d74 <tcp_split_unsent_seg+0x27c>)
 8009b72:	f004 fb89 	bl	800e288 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	891b      	ldrh	r3, [r3, #8]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d106      	bne.n	8009b8c <tcp_split_unsent_seg+0x94>
 8009b7e:	4b7b      	ldr	r3, [pc, #492]	; (8009d6c <tcp_split_unsent_seg+0x274>)
 8009b80:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8009b84:	497e      	ldr	r1, [pc, #504]	; (8009d80 <tcp_split_unsent_seg+0x288>)
 8009b86:	487b      	ldr	r0, [pc, #492]	; (8009d74 <tcp_split_unsent_seg+0x27c>)
 8009b88:	f004 fb7e 	bl	800e288 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	7a9b      	ldrb	r3, [r3, #10]
 8009b90:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009b92:	7bfb      	ldrb	r3, [r7, #15]
 8009b94:	009b      	lsls	r3, r3, #2
 8009b96:	b2db      	uxtb	r3, r3
 8009b98:	f003 0304 	and.w	r3, r3, #4
 8009b9c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	891a      	ldrh	r2, [r3, #8]
 8009ba2:	887b      	ldrh	r3, [r7, #2]
 8009ba4:	1ad3      	subs	r3, r2, r3
 8009ba6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8009ba8:	7bbb      	ldrb	r3, [r7, #14]
 8009baa:	b29a      	uxth	r2, r3
 8009bac:	89bb      	ldrh	r3, [r7, #12]
 8009bae:	4413      	add	r3, r2
 8009bb0:	b29b      	uxth	r3, r3
 8009bb2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009bb6:	4619      	mov	r1, r3
 8009bb8:	2036      	movs	r0, #54	; 0x36
 8009bba:	f7fa fbd7 	bl	800436c <pbuf_alloc>
 8009bbe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	f000 80b7 	beq.w	8009d36 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	891a      	ldrh	r2, [r3, #8]
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	891b      	ldrh	r3, [r3, #8]
 8009bd2:	1ad3      	subs	r3, r2, r3
 8009bd4:	b29a      	uxth	r2, r3
 8009bd6:	887b      	ldrh	r3, [r7, #2]
 8009bd8:	4413      	add	r3, r2
 8009bda:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	6858      	ldr	r0, [r3, #4]
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	685a      	ldr	r2, [r3, #4]
 8009be4:	7bbb      	ldrb	r3, [r7, #14]
 8009be6:	18d1      	adds	r1, r2, r3
 8009be8:	897b      	ldrh	r3, [r7, #10]
 8009bea:	89ba      	ldrh	r2, [r7, #12]
 8009bec:	f7fb f898 	bl	8004d20 <pbuf_copy_partial>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	89bb      	ldrh	r3, [r7, #12]
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	f040 809f 	bne.w	8009d3a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	68db      	ldr	r3, [r3, #12]
 8009c00:	899b      	ldrh	r3, [r3, #12]
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	4618      	mov	r0, r3
 8009c06:	f7f9 fbf6 	bl	80033f6 <lwip_htons>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	b2db      	uxtb	r3, r3
 8009c0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c12:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8009c14:	2300      	movs	r3, #0
 8009c16:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8009c18:	7efb      	ldrb	r3, [r7, #27]
 8009c1a:	f003 0308 	and.w	r3, r3, #8
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d007      	beq.n	8009c32 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8009c22:	7efb      	ldrb	r3, [r7, #27]
 8009c24:	f023 0308 	bic.w	r3, r3, #8
 8009c28:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8009c2a:	7ebb      	ldrb	r3, [r7, #26]
 8009c2c:	f043 0308 	orr.w	r3, r3, #8
 8009c30:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8009c32:	7efb      	ldrb	r3, [r7, #27]
 8009c34:	f003 0301 	and.w	r3, r3, #1
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d007      	beq.n	8009c4c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8009c3c:	7efb      	ldrb	r3, [r7, #27]
 8009c3e:	f023 0301 	bic.w	r3, r3, #1
 8009c42:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8009c44:	7ebb      	ldrb	r3, [r7, #26]
 8009c46:	f043 0301 	orr.w	r3, r3, #1
 8009c4a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	68db      	ldr	r3, [r3, #12]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	4618      	mov	r0, r3
 8009c54:	f7f9 fbe4 	bl	8003420 <lwip_htonl>
 8009c58:	4602      	mov	r2, r0
 8009c5a:	887b      	ldrh	r3, [r7, #2]
 8009c5c:	18d1      	adds	r1, r2, r3
 8009c5e:	7eba      	ldrb	r2, [r7, #26]
 8009c60:	7bfb      	ldrb	r3, [r7, #15]
 8009c62:	9300      	str	r3, [sp, #0]
 8009c64:	460b      	mov	r3, r1
 8009c66:	6939      	ldr	r1, [r7, #16]
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f7ff fa4d 	bl	8009108 <tcp_create_segment>
 8009c6e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8009c70:	69fb      	ldr	r3, [r7, #28]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d063      	beq.n	8009d3e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f7fa fede 	bl	8004a3c <pbuf_clen>
 8009c80:	4603      	mov	r3, r0
 8009c82:	461a      	mov	r2, r3
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009c8a:	1a9b      	subs	r3, r3, r2
 8009c8c:	b29a      	uxth	r2, r3
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	6858      	ldr	r0, [r3, #4]
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	891a      	ldrh	r2, [r3, #8]
 8009c9e:	89bb      	ldrh	r3, [r7, #12]
 8009ca0:	1ad3      	subs	r3, r2, r3
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	f7fa fcbb 	bl	8004620 <pbuf_realloc>
  useg->len -= remainder;
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	891a      	ldrh	r2, [r3, #8]
 8009cae:	89bb      	ldrh	r3, [r7, #12]
 8009cb0:	1ad3      	subs	r3, r2, r3
 8009cb2:	b29a      	uxth	r2, r3
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	68db      	ldr	r3, [r3, #12]
 8009cbc:	899b      	ldrh	r3, [r3, #12]
 8009cbe:	b29c      	uxth	r4, r3
 8009cc0:	7efb      	ldrb	r3, [r7, #27]
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f7f9 fb96 	bl	80033f6 <lwip_htons>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	461a      	mov	r2, r3
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	68db      	ldr	r3, [r3, #12]
 8009cd2:	4322      	orrs	r2, r4
 8009cd4:	b292      	uxth	r2, r2
 8009cd6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f7fa fead 	bl	8004a3c <pbuf_clen>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	461a      	mov	r2, r3
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009cec:	4413      	add	r3, r2
 8009cee:	b29a      	uxth	r2, r3
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009cf6:	69fb      	ldr	r3, [r7, #28]
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f7fa fe9e 	bl	8004a3c <pbuf_clen>
 8009d00:	4603      	mov	r3, r0
 8009d02:	461a      	mov	r2, r3
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009d0a:	4413      	add	r3, r2
 8009d0c:	b29a      	uxth	r2, r3
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	681a      	ldr	r2, [r3, #0]
 8009d18:	69fb      	ldr	r3, [r7, #28]
 8009d1a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	69fa      	ldr	r2, [r7, #28]
 8009d20:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8009d22:	69fb      	ldr	r3, [r7, #28]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d103      	bne.n	8009d32 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8009d32:	2300      	movs	r3, #0
 8009d34:	e016      	b.n	8009d64 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8009d36:	bf00      	nop
 8009d38:	e002      	b.n	8009d40 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8009d3a:	bf00      	nop
 8009d3c:	e000      	b.n	8009d40 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8009d3e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8009d40:	69fb      	ldr	r3, [r7, #28]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d006      	beq.n	8009d54 <tcp_split_unsent_seg+0x25c>
 8009d46:	4b09      	ldr	r3, [pc, #36]	; (8009d6c <tcp_split_unsent_seg+0x274>)
 8009d48:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8009d4c:	490d      	ldr	r1, [pc, #52]	; (8009d84 <tcp_split_unsent_seg+0x28c>)
 8009d4e:	4809      	ldr	r0, [pc, #36]	; (8009d74 <tcp_split_unsent_seg+0x27c>)
 8009d50:	f004 fa9a 	bl	800e288 <iprintf>
  if (p != NULL) {
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d002      	beq.n	8009d60 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8009d5a:	6938      	ldr	r0, [r7, #16]
 8009d5c:	f7fa fde6 	bl	800492c <pbuf_free>
  }

  return ERR_MEM;
 8009d60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3724      	adds	r7, #36	; 0x24
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd90      	pop	{r4, r7, pc}
 8009d6c:	080107f4 	.word	0x080107f4
 8009d70:	08010b88 	.word	0x08010b88
 8009d74:	08010848 	.word	0x08010848
 8009d78:	08010bac 	.word	0x08010bac
 8009d7c:	08010bd0 	.word	0x08010bd0
 8009d80:	08010be0 	.word	0x08010be0
 8009d84:	08010bf0 	.word	0x08010bf0

08009d88 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8009d88:	b590      	push	{r4, r7, lr}
 8009d8a:	b085      	sub	sp, #20
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d106      	bne.n	8009da4 <tcp_send_fin+0x1c>
 8009d96:	4b21      	ldr	r3, [pc, #132]	; (8009e1c <tcp_send_fin+0x94>)
 8009d98:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8009d9c:	4920      	ldr	r1, [pc, #128]	; (8009e20 <tcp_send_fin+0x98>)
 8009d9e:	4821      	ldr	r0, [pc, #132]	; (8009e24 <tcp_send_fin+0x9c>)
 8009da0:	f004 fa72 	bl	800e288 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d02e      	beq.n	8009e0a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009db0:	60fb      	str	r3, [r7, #12]
 8009db2:	e002      	b.n	8009dba <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d1f8      	bne.n	8009db4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	68db      	ldr	r3, [r3, #12]
 8009dc6:	899b      	ldrh	r3, [r3, #12]
 8009dc8:	b29b      	uxth	r3, r3
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f7f9 fb13 	bl	80033f6 <lwip_htons>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	b2db      	uxtb	r3, r3
 8009dd4:	f003 0307 	and.w	r3, r3, #7
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d116      	bne.n	8009e0a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	68db      	ldr	r3, [r3, #12]
 8009de0:	899b      	ldrh	r3, [r3, #12]
 8009de2:	b29c      	uxth	r4, r3
 8009de4:	2001      	movs	r0, #1
 8009de6:	f7f9 fb06 	bl	80033f6 <lwip_htons>
 8009dea:	4603      	mov	r3, r0
 8009dec:	461a      	mov	r2, r3
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	68db      	ldr	r3, [r3, #12]
 8009df2:	4322      	orrs	r2, r4
 8009df4:	b292      	uxth	r2, r2
 8009df6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	8b5b      	ldrh	r3, [r3, #26]
 8009dfc:	f043 0320 	orr.w	r3, r3, #32
 8009e00:	b29a      	uxth	r2, r3
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8009e06:	2300      	movs	r3, #0
 8009e08:	e004      	b.n	8009e14 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8009e0a:	2101      	movs	r1, #1
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 f80b 	bl	8009e28 <tcp_enqueue_flags>
 8009e12:	4603      	mov	r3, r0
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3714      	adds	r7, #20
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd90      	pop	{r4, r7, pc}
 8009e1c:	080107f4 	.word	0x080107f4
 8009e20:	08010bfc 	.word	0x08010bfc
 8009e24:	08010848 	.word	0x08010848

08009e28 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b08a      	sub	sp, #40	; 0x28
 8009e2c:	af02      	add	r7, sp, #8
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	460b      	mov	r3, r1
 8009e32:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8009e34:	2300      	movs	r3, #0
 8009e36:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8009e3c:	78fb      	ldrb	r3, [r7, #3]
 8009e3e:	f003 0303 	and.w	r3, r3, #3
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d106      	bne.n	8009e54 <tcp_enqueue_flags+0x2c>
 8009e46:	4b67      	ldr	r3, [pc, #412]	; (8009fe4 <tcp_enqueue_flags+0x1bc>)
 8009e48:	f240 4212 	movw	r2, #1042	; 0x412
 8009e4c:	4966      	ldr	r1, [pc, #408]	; (8009fe8 <tcp_enqueue_flags+0x1c0>)
 8009e4e:	4867      	ldr	r0, [pc, #412]	; (8009fec <tcp_enqueue_flags+0x1c4>)
 8009e50:	f004 fa1a 	bl	800e288 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d106      	bne.n	8009e68 <tcp_enqueue_flags+0x40>
 8009e5a:	4b62      	ldr	r3, [pc, #392]	; (8009fe4 <tcp_enqueue_flags+0x1bc>)
 8009e5c:	f240 4213 	movw	r2, #1043	; 0x413
 8009e60:	4963      	ldr	r1, [pc, #396]	; (8009ff0 <tcp_enqueue_flags+0x1c8>)
 8009e62:	4862      	ldr	r0, [pc, #392]	; (8009fec <tcp_enqueue_flags+0x1c4>)
 8009e64:	f004 fa10 	bl	800e288 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8009e68:	78fb      	ldrb	r3, [r7, #3]
 8009e6a:	f003 0302 	and.w	r3, r3, #2
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d001      	beq.n	8009e76 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8009e72:	2301      	movs	r3, #1
 8009e74:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009e76:	7ffb      	ldrb	r3, [r7, #31]
 8009e78:	009b      	lsls	r3, r3, #2
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	f003 0304 	and.w	r3, r3, #4
 8009e80:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009e82:	7dfb      	ldrb	r3, [r7, #23]
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	2036      	movs	r0, #54	; 0x36
 8009e8e:	f7fa fa6d 	bl	800436c <pbuf_alloc>
 8009e92:	6138      	str	r0, [r7, #16]
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d109      	bne.n	8009eae <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	8b5b      	ldrh	r3, [r3, #26]
 8009e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ea2:	b29a      	uxth	r2, r3
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8009eac:	e095      	b.n	8009fda <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	895a      	ldrh	r2, [r3, #10]
 8009eb2:	7dfb      	ldrb	r3, [r7, #23]
 8009eb4:	b29b      	uxth	r3, r3
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d206      	bcs.n	8009ec8 <tcp_enqueue_flags+0xa0>
 8009eba:	4b4a      	ldr	r3, [pc, #296]	; (8009fe4 <tcp_enqueue_flags+0x1bc>)
 8009ebc:	f240 423a 	movw	r2, #1082	; 0x43a
 8009ec0:	494c      	ldr	r1, [pc, #304]	; (8009ff4 <tcp_enqueue_flags+0x1cc>)
 8009ec2:	484a      	ldr	r0, [pc, #296]	; (8009fec <tcp_enqueue_flags+0x1c4>)
 8009ec4:	f004 f9e0 	bl	800e288 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8009ecc:	78fa      	ldrb	r2, [r7, #3]
 8009ece:	7ffb      	ldrb	r3, [r7, #31]
 8009ed0:	9300      	str	r3, [sp, #0]
 8009ed2:	460b      	mov	r3, r1
 8009ed4:	6939      	ldr	r1, [r7, #16]
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f7ff f916 	bl	8009108 <tcp_create_segment>
 8009edc:	60f8      	str	r0, [r7, #12]
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d109      	bne.n	8009ef8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	8b5b      	ldrh	r3, [r3, #26]
 8009ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009eec:	b29a      	uxth	r2, r3
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ef6:	e070      	b.n	8009fda <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	68db      	ldr	r3, [r3, #12]
 8009efc:	f003 0303 	and.w	r3, r3, #3
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d006      	beq.n	8009f12 <tcp_enqueue_flags+0xea>
 8009f04:	4b37      	ldr	r3, [pc, #220]	; (8009fe4 <tcp_enqueue_flags+0x1bc>)
 8009f06:	f240 4242 	movw	r2, #1090	; 0x442
 8009f0a:	493b      	ldr	r1, [pc, #236]	; (8009ff8 <tcp_enqueue_flags+0x1d0>)
 8009f0c:	4837      	ldr	r0, [pc, #220]	; (8009fec <tcp_enqueue_flags+0x1c4>)
 8009f0e:	f004 f9bb 	bl	800e288 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	891b      	ldrh	r3, [r3, #8]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d006      	beq.n	8009f28 <tcp_enqueue_flags+0x100>
 8009f1a:	4b32      	ldr	r3, [pc, #200]	; (8009fe4 <tcp_enqueue_flags+0x1bc>)
 8009f1c:	f240 4243 	movw	r2, #1091	; 0x443
 8009f20:	4936      	ldr	r1, [pc, #216]	; (8009ffc <tcp_enqueue_flags+0x1d4>)
 8009f22:	4832      	ldr	r0, [pc, #200]	; (8009fec <tcp_enqueue_flags+0x1c4>)
 8009f24:	f004 f9b0 	bl	800e288 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d103      	bne.n	8009f38 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	68fa      	ldr	r2, [r7, #12]
 8009f34:	66da      	str	r2, [r3, #108]	; 0x6c
 8009f36:	e00d      	b.n	8009f54 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f3c:	61bb      	str	r3, [r7, #24]
 8009f3e:	e002      	b.n	8009f46 <tcp_enqueue_flags+0x11e>
 8009f40:	69bb      	ldr	r3, [r7, #24]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	61bb      	str	r3, [r7, #24]
 8009f46:	69bb      	ldr	r3, [r7, #24]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d1f8      	bne.n	8009f40 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8009f4e:	69bb      	ldr	r3, [r7, #24]
 8009f50:	68fa      	ldr	r2, [r7, #12]
 8009f52:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2200      	movs	r2, #0
 8009f58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8009f5c:	78fb      	ldrb	r3, [r7, #3]
 8009f5e:	f003 0302 	and.w	r3, r3, #2
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d104      	bne.n	8009f70 <tcp_enqueue_flags+0x148>
 8009f66:	78fb      	ldrb	r3, [r7, #3]
 8009f68:	f003 0301 	and.w	r3, r3, #1
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d004      	beq.n	8009f7a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f74:	1c5a      	adds	r2, r3, #1
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8009f7a:	78fb      	ldrb	r3, [r7, #3]
 8009f7c:	f003 0301 	and.w	r3, r3, #1
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d006      	beq.n	8009f92 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	8b5b      	ldrh	r3, [r3, #26]
 8009f88:	f043 0320 	orr.w	r3, r3, #32
 8009f8c:	b29a      	uxth	r2, r3
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	4618      	mov	r0, r3
 8009f98:	f7fa fd50 	bl	8004a3c <pbuf_clen>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	461a      	mov	r2, r3
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009fa6:	4413      	add	r3, r2
 8009fa8:	b29a      	uxth	r2, r3
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d00e      	beq.n	8009fd8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d10a      	bne.n	8009fd8 <tcp_enqueue_flags+0x1b0>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d106      	bne.n	8009fd8 <tcp_enqueue_flags+0x1b0>
 8009fca:	4b06      	ldr	r3, [pc, #24]	; (8009fe4 <tcp_enqueue_flags+0x1bc>)
 8009fcc:	f240 4266 	movw	r2, #1126	; 0x466
 8009fd0:	490b      	ldr	r1, [pc, #44]	; (800a000 <tcp_enqueue_flags+0x1d8>)
 8009fd2:	4806      	ldr	r0, [pc, #24]	; (8009fec <tcp_enqueue_flags+0x1c4>)
 8009fd4:	f004 f958 	bl	800e288 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8009fd8:	2300      	movs	r3, #0
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3720      	adds	r7, #32
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	080107f4 	.word	0x080107f4
 8009fe8:	08010c18 	.word	0x08010c18
 8009fec:	08010848 	.word	0x08010848
 8009ff0:	08010c70 	.word	0x08010c70
 8009ff4:	08010c90 	.word	0x08010c90
 8009ff8:	08010ccc 	.word	0x08010ccc
 8009ffc:	08010ce4 	.word	0x08010ce4
 800a000:	08010d10 	.word	0x08010d10

0800a004 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800a004:	b5b0      	push	{r4, r5, r7, lr}
 800a006:	b08a      	sub	sp, #40	; 0x28
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d106      	bne.n	800a020 <tcp_output+0x1c>
 800a012:	4ba0      	ldr	r3, [pc, #640]	; (800a294 <tcp_output+0x290>)
 800a014:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800a018:	499f      	ldr	r1, [pc, #636]	; (800a298 <tcp_output+0x294>)
 800a01a:	48a0      	ldr	r0, [pc, #640]	; (800a29c <tcp_output+0x298>)
 800a01c:	f004 f934 	bl	800e288 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	7d1b      	ldrb	r3, [r3, #20]
 800a024:	2b01      	cmp	r3, #1
 800a026:	d106      	bne.n	800a036 <tcp_output+0x32>
 800a028:	4b9a      	ldr	r3, [pc, #616]	; (800a294 <tcp_output+0x290>)
 800a02a:	f240 42e4 	movw	r2, #1252	; 0x4e4
 800a02e:	499c      	ldr	r1, [pc, #624]	; (800a2a0 <tcp_output+0x29c>)
 800a030:	489a      	ldr	r0, [pc, #616]	; (800a29c <tcp_output+0x298>)
 800a032:	f004 f929 	bl	800e288 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800a036:	4b9b      	ldr	r3, [pc, #620]	; (800a2a4 <tcp_output+0x2a0>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	687a      	ldr	r2, [r7, #4]
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d101      	bne.n	800a044 <tcp_output+0x40>
    return ERR_OK;
 800a040:	2300      	movs	r3, #0
 800a042:	e1d2      	b.n	800a3ea <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a050:	429a      	cmp	r2, r3
 800a052:	d203      	bcs.n	800a05c <tcp_output+0x58>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a05a:	e002      	b.n	800a062 <tcp_output+0x5e>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a062:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a068:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800a06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d10b      	bne.n	800a088 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	8b5b      	ldrh	r3, [r3, #26]
 800a074:	f003 0302 	and.w	r3, r3, #2
 800a078:	2b00      	cmp	r3, #0
 800a07a:	f000 81a9 	beq.w	800a3d0 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 fdd6 	bl	800ac30 <tcp_send_empty_ack>
 800a084:	4603      	mov	r3, r0
 800a086:	e1b0      	b.n	800a3ea <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800a088:	6879      	ldr	r1, [r7, #4]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	3304      	adds	r3, #4
 800a08e:	461a      	mov	r2, r3
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f7ff f81d 	bl	80090d0 <tcp_route>
 800a096:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d102      	bne.n	800a0a4 <tcp_output+0xa0>
    return ERR_RTE;
 800a09e:	f06f 0303 	mvn.w	r3, #3
 800a0a2:	e1a2      	b.n	800a3ea <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d003      	beq.n	800a0b2 <tcp_output+0xae>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d111      	bne.n	800a0d6 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d002      	beq.n	800a0be <tcp_output+0xba>
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	3304      	adds	r3, #4
 800a0bc:	e000      	b.n	800a0c0 <tcp_output+0xbc>
 800a0be:	2300      	movs	r3, #0
 800a0c0:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d102      	bne.n	800a0ce <tcp_output+0xca>
      return ERR_RTE;
 800a0c8:	f06f 0303 	mvn.w	r3, #3
 800a0cc:	e18d      	b.n	800a3ea <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800a0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d8:	68db      	ldr	r3, [r3, #12]
 800a0da:	685b      	ldr	r3, [r3, #4]
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f7f9 f99f 	bl	8003420 <lwip_htonl>
 800a0e2:	4602      	mov	r2, r0
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0e8:	1ad3      	subs	r3, r2, r3
 800a0ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0ec:	8912      	ldrh	r2, [r2, #8]
 800a0ee:	4413      	add	r3, r2
 800a0f0:	69ba      	ldr	r2, [r7, #24]
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d227      	bcs.n	800a146 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	69bb      	ldr	r3, [r7, #24]
 800a100:	4293      	cmp	r3, r2
 800a102:	d114      	bne.n	800a12e <tcp_output+0x12a>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d110      	bne.n	800a12e <tcp_output+0x12a>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a112:	2b00      	cmp	r3, #0
 800a114:	d10b      	bne.n	800a12e <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2200      	movs	r2, #0
 800a11a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2201      	movs	r2, #1
 800a122:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2200      	movs	r2, #0
 800a12a:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	8b5b      	ldrh	r3, [r3, #26]
 800a132:	f003 0302 	and.w	r3, r3, #2
 800a136:	2b00      	cmp	r3, #0
 800a138:	f000 814c 	beq.w	800a3d4 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f000 fd77 	bl	800ac30 <tcp_send_empty_ack>
 800a142:	4603      	mov	r3, r0
 800a144:	e151      	b.n	800a3ea <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2200      	movs	r2, #0
 800a14a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a152:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800a154:	6a3b      	ldr	r3, [r7, #32]
 800a156:	2b00      	cmp	r3, #0
 800a158:	f000 811b 	beq.w	800a392 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 800a15c:	e002      	b.n	800a164 <tcp_output+0x160>
 800a15e:	6a3b      	ldr	r3, [r7, #32]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	623b      	str	r3, [r7, #32]
 800a164:	6a3b      	ldr	r3, [r7, #32]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d1f8      	bne.n	800a15e <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800a16c:	e111      	b.n	800a392 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800a16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a170:	68db      	ldr	r3, [r3, #12]
 800a172:	899b      	ldrh	r3, [r3, #12]
 800a174:	b29b      	uxth	r3, r3
 800a176:	4618      	mov	r0, r3
 800a178:	f7f9 f93d 	bl	80033f6 <lwip_htons>
 800a17c:	4603      	mov	r3, r0
 800a17e:	b2db      	uxtb	r3, r3
 800a180:	f003 0304 	and.w	r3, r3, #4
 800a184:	2b00      	cmp	r3, #0
 800a186:	d006      	beq.n	800a196 <tcp_output+0x192>
 800a188:	4b42      	ldr	r3, [pc, #264]	; (800a294 <tcp_output+0x290>)
 800a18a:	f240 5237 	movw	r2, #1335	; 0x537
 800a18e:	4946      	ldr	r1, [pc, #280]	; (800a2a8 <tcp_output+0x2a4>)
 800a190:	4842      	ldr	r0, [pc, #264]	; (800a29c <tcp_output+0x298>)
 800a192:	f004 f879 	bl	800e288 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d01f      	beq.n	800a1de <tcp_output+0x1da>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	8b5b      	ldrh	r3, [r3, #26]
 800a1a2:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d119      	bne.n	800a1de <tcp_output+0x1da>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d00b      	beq.n	800a1ca <tcp_output+0x1c6>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d110      	bne.n	800a1de <tcp_output+0x1da>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1c0:	891a      	ldrh	r2, [r3, #8]
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d209      	bcs.n	800a1de <tcp_output+0x1da>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d004      	beq.n	800a1de <tcp_output+0x1da>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a1da:	2b08      	cmp	r3, #8
 800a1dc:	d901      	bls.n	800a1e2 <tcp_output+0x1de>
 800a1de:	2301      	movs	r3, #1
 800a1e0:	e000      	b.n	800a1e4 <tcp_output+0x1e0>
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d106      	bne.n	800a1f6 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	8b5b      	ldrh	r3, [r3, #26]
 800a1ec:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	f000 80e3 	beq.w	800a3bc <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	7d1b      	ldrb	r3, [r3, #20]
 800a1fa:	2b02      	cmp	r3, #2
 800a1fc:	d00d      	beq.n	800a21a <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800a1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a200:	68db      	ldr	r3, [r3, #12]
 800a202:	899b      	ldrh	r3, [r3, #12]
 800a204:	b29c      	uxth	r4, r3
 800a206:	2010      	movs	r0, #16
 800a208:	f7f9 f8f5 	bl	80033f6 <lwip_htons>
 800a20c:	4603      	mov	r3, r0
 800a20e:	461a      	mov	r2, r3
 800a210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a212:	68db      	ldr	r3, [r3, #12]
 800a214:	4322      	orrs	r2, r4
 800a216:	b292      	uxth	r2, r2
 800a218:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800a21a:	697a      	ldr	r2, [r7, #20]
 800a21c:	6879      	ldr	r1, [r7, #4]
 800a21e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a220:	f000 f908 	bl	800a434 <tcp_output_segment>
 800a224:	4603      	mov	r3, r0
 800a226:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800a228:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d009      	beq.n	800a244 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	8b5b      	ldrh	r3, [r3, #26]
 800a234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a238:	b29a      	uxth	r2, r3
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	835a      	strh	r2, [r3, #26]
      return err;
 800a23e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a242:	e0d2      	b.n	800a3ea <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800a244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a246:	681a      	ldr	r2, [r3, #0]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	7d1b      	ldrb	r3, [r3, #20]
 800a250:	2b02      	cmp	r3, #2
 800a252:	d006      	beq.n	800a262 <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	8b5b      	ldrh	r3, [r3, #26]
 800a258:	f023 0303 	bic.w	r3, r3, #3
 800a25c:	b29a      	uxth	r2, r3
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a264:	68db      	ldr	r3, [r3, #12]
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	4618      	mov	r0, r3
 800a26a:	f7f9 f8d9 	bl	8003420 <lwip_htonl>
 800a26e:	4604      	mov	r4, r0
 800a270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a272:	891b      	ldrh	r3, [r3, #8]
 800a274:	461d      	mov	r5, r3
 800a276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a278:	68db      	ldr	r3, [r3, #12]
 800a27a:	899b      	ldrh	r3, [r3, #12]
 800a27c:	b29b      	uxth	r3, r3
 800a27e:	4618      	mov	r0, r3
 800a280:	f7f9 f8b9 	bl	80033f6 <lwip_htons>
 800a284:	4603      	mov	r3, r0
 800a286:	b2db      	uxtb	r3, r3
 800a288:	f003 0303 	and.w	r3, r3, #3
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d00d      	beq.n	800a2ac <tcp_output+0x2a8>
 800a290:	2301      	movs	r3, #1
 800a292:	e00c      	b.n	800a2ae <tcp_output+0x2aa>
 800a294:	080107f4 	.word	0x080107f4
 800a298:	08010d38 	.word	0x08010d38
 800a29c:	08010848 	.word	0x08010848
 800a2a0:	08010d50 	.word	0x08010d50
 800a2a4:	200068a0 	.word	0x200068a0
 800a2a8:	08010d78 	.word	0x08010d78
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	442b      	add	r3, r5
 800a2b0:	4423      	add	r3, r4
 800a2b2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	1ad3      	subs	r3, r2, r3
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	da02      	bge.n	800a2c6 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	68ba      	ldr	r2, [r7, #8]
 800a2c4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800a2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c8:	891b      	ldrh	r3, [r3, #8]
 800a2ca:	461c      	mov	r4, r3
 800a2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ce:	68db      	ldr	r3, [r3, #12]
 800a2d0:	899b      	ldrh	r3, [r3, #12]
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f7f9 f88e 	bl	80033f6 <lwip_htons>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	b2db      	uxtb	r3, r3
 800a2de:	f003 0303 	and.w	r3, r3, #3
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d001      	beq.n	800a2ea <tcp_output+0x2e6>
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	e000      	b.n	800a2ec <tcp_output+0x2e8>
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	4423      	add	r3, r4
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d049      	beq.n	800a386 <tcp_output+0x382>
      seg->next = NULL;
 800a2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d105      	bne.n	800a30c <tcp_output+0x308>
        pcb->unacked = seg;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a304:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800a306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a308:	623b      	str	r3, [r7, #32]
 800a30a:	e03f      	b.n	800a38c <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800a30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a30e:	68db      	ldr	r3, [r3, #12]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	4618      	mov	r0, r3
 800a314:	f7f9 f884 	bl	8003420 <lwip_htonl>
 800a318:	4604      	mov	r4, r0
 800a31a:	6a3b      	ldr	r3, [r7, #32]
 800a31c:	68db      	ldr	r3, [r3, #12]
 800a31e:	685b      	ldr	r3, [r3, #4]
 800a320:	4618      	mov	r0, r3
 800a322:	f7f9 f87d 	bl	8003420 <lwip_htonl>
 800a326:	4603      	mov	r3, r0
 800a328:	1ae3      	subs	r3, r4, r3
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	da24      	bge.n	800a378 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	3370      	adds	r3, #112	; 0x70
 800a332:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a334:	e002      	b.n	800a33c <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800a336:	69fb      	ldr	r3, [r7, #28]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a33c:	69fb      	ldr	r3, [r7, #28]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d011      	beq.n	800a368 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a344:	69fb      	ldr	r3, [r7, #28]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	68db      	ldr	r3, [r3, #12]
 800a34a:	685b      	ldr	r3, [r3, #4]
 800a34c:	4618      	mov	r0, r3
 800a34e:	f7f9 f867 	bl	8003420 <lwip_htonl>
 800a352:	4604      	mov	r4, r0
 800a354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a356:	68db      	ldr	r3, [r3, #12]
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	4618      	mov	r0, r3
 800a35c:	f7f9 f860 	bl	8003420 <lwip_htonl>
 800a360:	4603      	mov	r3, r0
 800a362:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800a364:	2b00      	cmp	r3, #0
 800a366:	dbe6      	blt.n	800a336 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 800a368:	69fb      	ldr	r3, [r7, #28]
 800a36a:	681a      	ldr	r2, [r3, #0]
 800a36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a36e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800a370:	69fb      	ldr	r3, [r7, #28]
 800a372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a374:	601a      	str	r2, [r3, #0]
 800a376:	e009      	b.n	800a38c <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800a378:	6a3b      	ldr	r3, [r7, #32]
 800a37a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a37c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800a37e:	6a3b      	ldr	r3, [r7, #32]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	623b      	str	r3, [r7, #32]
 800a384:	e002      	b.n	800a38c <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800a386:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a388:	f7fb ff02 	bl	8006190 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a390:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800a392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a394:	2b00      	cmp	r3, #0
 800a396:	d012      	beq.n	800a3be <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800a398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39a:	68db      	ldr	r3, [r3, #12]
 800a39c:	685b      	ldr	r3, [r3, #4]
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f7f9 f83e 	bl	8003420 <lwip_htonl>
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3aa:	1ad3      	subs	r3, r2, r3
 800a3ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3ae:	8912      	ldrh	r2, [r2, #8]
 800a3b0:	4413      	add	r3, r2
  while (seg != NULL &&
 800a3b2:	69ba      	ldr	r2, [r7, #24]
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	f4bf aeda 	bcs.w	800a16e <tcp_output+0x16a>
 800a3ba:	e000      	b.n	800a3be <tcp_output+0x3ba>
      break;
 800a3bc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d108      	bne.n	800a3d8 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800a3ce:	e004      	b.n	800a3da <tcp_output+0x3d6>
    goto output_done;
 800a3d0:	bf00      	nop
 800a3d2:	e002      	b.n	800a3da <tcp_output+0x3d6>
    goto output_done;
 800a3d4:	bf00      	nop
 800a3d6:	e000      	b.n	800a3da <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800a3d8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	8b5b      	ldrh	r3, [r3, #26]
 800a3de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3e2:	b29a      	uxth	r2, r3
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800a3e8:	2300      	movs	r3, #0
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3728      	adds	r7, #40	; 0x28
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bdb0      	pop	{r4, r5, r7, pc}
 800a3f2:	bf00      	nop

0800a3f4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b082      	sub	sp, #8
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d106      	bne.n	800a410 <tcp_output_segment_busy+0x1c>
 800a402:	4b09      	ldr	r3, [pc, #36]	; (800a428 <tcp_output_segment_busy+0x34>)
 800a404:	f240 529a 	movw	r2, #1434	; 0x59a
 800a408:	4908      	ldr	r1, [pc, #32]	; (800a42c <tcp_output_segment_busy+0x38>)
 800a40a:	4809      	ldr	r0, [pc, #36]	; (800a430 <tcp_output_segment_busy+0x3c>)
 800a40c:	f003 ff3c 	bl	800e288 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	7b9b      	ldrb	r3, [r3, #14]
 800a416:	2b01      	cmp	r3, #1
 800a418:	d001      	beq.n	800a41e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800a41a:	2301      	movs	r3, #1
 800a41c:	e000      	b.n	800a420 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800a41e:	2300      	movs	r3, #0
}
 800a420:	4618      	mov	r0, r3
 800a422:	3708      	adds	r7, #8
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}
 800a428:	080107f4 	.word	0x080107f4
 800a42c:	08010d90 	.word	0x08010d90
 800a430:	08010848 	.word	0x08010848

0800a434 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800a434:	b5b0      	push	{r4, r5, r7, lr}
 800a436:	b08c      	sub	sp, #48	; 0x30
 800a438:	af04      	add	r7, sp, #16
 800a43a:	60f8      	str	r0, [r7, #12]
 800a43c:	60b9      	str	r1, [r7, #8]
 800a43e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d106      	bne.n	800a454 <tcp_output_segment+0x20>
 800a446:	4b64      	ldr	r3, [pc, #400]	; (800a5d8 <tcp_output_segment+0x1a4>)
 800a448:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800a44c:	4963      	ldr	r1, [pc, #396]	; (800a5dc <tcp_output_segment+0x1a8>)
 800a44e:	4864      	ldr	r0, [pc, #400]	; (800a5e0 <tcp_output_segment+0x1ac>)
 800a450:	f003 ff1a 	bl	800e288 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d106      	bne.n	800a468 <tcp_output_segment+0x34>
 800a45a:	4b5f      	ldr	r3, [pc, #380]	; (800a5d8 <tcp_output_segment+0x1a4>)
 800a45c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800a460:	4960      	ldr	r1, [pc, #384]	; (800a5e4 <tcp_output_segment+0x1b0>)
 800a462:	485f      	ldr	r0, [pc, #380]	; (800a5e0 <tcp_output_segment+0x1ac>)
 800a464:	f003 ff10 	bl	800e288 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d106      	bne.n	800a47c <tcp_output_segment+0x48>
 800a46e:	4b5a      	ldr	r3, [pc, #360]	; (800a5d8 <tcp_output_segment+0x1a4>)
 800a470:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800a474:	495c      	ldr	r1, [pc, #368]	; (800a5e8 <tcp_output_segment+0x1b4>)
 800a476:	485a      	ldr	r0, [pc, #360]	; (800a5e0 <tcp_output_segment+0x1ac>)
 800a478:	f003 ff06 	bl	800e288 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800a47c:	68f8      	ldr	r0, [r7, #12]
 800a47e:	f7ff ffb9 	bl	800a3f4 <tcp_output_segment_busy>
 800a482:	4603      	mov	r3, r0
 800a484:	2b00      	cmp	r3, #0
 800a486:	d001      	beq.n	800a48c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800a488:	2300      	movs	r3, #0
 800a48a:	e0a0      	b.n	800a5ce <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	68dc      	ldr	r4, [r3, #12]
 800a494:	4610      	mov	r0, r2
 800a496:	f7f8 ffc3 	bl	8003420 <lwip_htonl>
 800a49a:	4603      	mov	r3, r0
 800a49c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	68dc      	ldr	r4, [r3, #12]
 800a4a6:	4610      	mov	r0, r2
 800a4a8:	f7f8 ffa5 	bl	80033f6 <lwip_htons>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b4:	68ba      	ldr	r2, [r7, #8]
 800a4b6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800a4b8:	441a      	add	r2, r3
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	68db      	ldr	r3, [r3, #12]
 800a4c2:	3314      	adds	r3, #20
 800a4c4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	7a9b      	ldrb	r3, [r3, #10]
 800a4ca:	f003 0301 	and.w	r3, r3, #1
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d015      	beq.n	800a4fe <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	3304      	adds	r3, #4
 800a4d6:	461a      	mov	r2, r3
 800a4d8:	6879      	ldr	r1, [r7, #4]
 800a4da:	f44f 7006 	mov.w	r0, #536	; 0x218
 800a4de:	f7fc fa33 	bl	8006948 <tcp_eff_send_mss_netif>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800a4e6:	8b7b      	ldrh	r3, [r7, #26]
 800a4e8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f7f8 ff97 	bl	8003420 <lwip_htonl>
 800a4f2:	4602      	mov	r2, r0
 800a4f4:	69fb      	ldr	r3, [r7, #28]
 800a4f6:	601a      	str	r2, [r3, #0]
    opts += 1;
 800a4f8:	69fb      	ldr	r3, [r7, #28]
 800a4fa:	3304      	adds	r3, #4
 800a4fc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a504:	2b00      	cmp	r3, #0
 800a506:	da02      	bge.n	800a50e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	2200      	movs	r2, #0
 800a50c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a512:	2b00      	cmp	r3, #0
 800a514:	d10c      	bne.n	800a530 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800a516:	4b35      	ldr	r3, [pc, #212]	; (800a5ec <tcp_output_segment+0x1b8>)
 800a518:	681a      	ldr	r2, [r3, #0]
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	68db      	ldr	r3, [r3, #12]
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	4618      	mov	r0, r3
 800a526:	f7f8 ff7b 	bl	8003420 <lwip_htonl>
 800a52a:	4602      	mov	r2, r0
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	68db      	ldr	r3, [r3, #12]
 800a534:	461a      	mov	r2, r3
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	1ad3      	subs	r3, r2, r3
 800a53e:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	8959      	ldrh	r1, [r3, #10]
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	685b      	ldr	r3, [r3, #4]
 800a54a:	8b3a      	ldrh	r2, [r7, #24]
 800a54c:	1a8a      	subs	r2, r1, r2
 800a54e:	b292      	uxth	r2, r2
 800a550:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	685b      	ldr	r3, [r3, #4]
 800a556:	8919      	ldrh	r1, [r3, #8]
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	685b      	ldr	r3, [r3, #4]
 800a55c:	8b3a      	ldrh	r2, [r7, #24]
 800a55e:	1a8a      	subs	r2, r1, r2
 800a560:	b292      	uxth	r2, r2
 800a562:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	685b      	ldr	r3, [r3, #4]
 800a568:	68fa      	ldr	r2, [r7, #12]
 800a56a:	68d2      	ldr	r2, [r2, #12]
 800a56c:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	68db      	ldr	r3, [r3, #12]
 800a572:	2200      	movs	r2, #0
 800a574:	741a      	strb	r2, [r3, #16]
 800a576:	2200      	movs	r2, #0
 800a578:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	68db      	ldr	r3, [r3, #12]
 800a57e:	f103 0214 	add.w	r2, r3, #20
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	7a9b      	ldrb	r3, [r3, #10]
 800a586:	009b      	lsls	r3, r3, #2
 800a588:	f003 0304 	and.w	r3, r3, #4
 800a58c:	4413      	add	r3, r2
 800a58e:	69fa      	ldr	r2, [r7, #28]
 800a590:	429a      	cmp	r2, r3
 800a592:	d006      	beq.n	800a5a2 <tcp_output_segment+0x16e>
 800a594:	4b10      	ldr	r3, [pc, #64]	; (800a5d8 <tcp_output_segment+0x1a4>)
 800a596:	f240 621c 	movw	r2, #1564	; 0x61c
 800a59a:	4915      	ldr	r1, [pc, #84]	; (800a5f0 <tcp_output_segment+0x1bc>)
 800a59c:	4810      	ldr	r0, [pc, #64]	; (800a5e0 <tcp_output_segment+0x1ac>)
 800a59e:	f003 fe73 	bl	800e288 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	6858      	ldr	r0, [r3, #4]
 800a5a6:	68b9      	ldr	r1, [r7, #8]
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	1d1c      	adds	r4, r3, #4
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	7add      	ldrb	r5, [r3, #11]
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	7a9b      	ldrb	r3, [r3, #10]
 800a5b4:	687a      	ldr	r2, [r7, #4]
 800a5b6:	9202      	str	r2, [sp, #8]
 800a5b8:	2206      	movs	r2, #6
 800a5ba:	9201      	str	r2, [sp, #4]
 800a5bc:	9300      	str	r3, [sp, #0]
 800a5be:	462b      	mov	r3, r5
 800a5c0:	4622      	mov	r2, r4
 800a5c2:	f002 fdf7 	bl	800d1b4 <ip4_output_if>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800a5ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	3720      	adds	r7, #32
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bdb0      	pop	{r4, r5, r7, pc}
 800a5d6:	bf00      	nop
 800a5d8:	080107f4 	.word	0x080107f4
 800a5dc:	08010db8 	.word	0x08010db8
 800a5e0:	08010848 	.word	0x08010848
 800a5e4:	08010dd8 	.word	0x08010dd8
 800a5e8:	08010df8 	.word	0x08010df8
 800a5ec:	20006890 	.word	0x20006890
 800a5f0:	08010e1c 	.word	0x08010e1c

0800a5f4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800a5f4:	b5b0      	push	{r4, r5, r7, lr}
 800a5f6:	b084      	sub	sp, #16
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d106      	bne.n	800a610 <tcp_rexmit_rto_prepare+0x1c>
 800a602:	4b31      	ldr	r3, [pc, #196]	; (800a6c8 <tcp_rexmit_rto_prepare+0xd4>)
 800a604:	f240 6263 	movw	r2, #1635	; 0x663
 800a608:	4930      	ldr	r1, [pc, #192]	; (800a6cc <tcp_rexmit_rto_prepare+0xd8>)
 800a60a:	4831      	ldr	r0, [pc, #196]	; (800a6d0 <tcp_rexmit_rto_prepare+0xdc>)
 800a60c:	f003 fe3c 	bl	800e288 <iprintf>

  if (pcb->unacked == NULL) {
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a614:	2b00      	cmp	r3, #0
 800a616:	d102      	bne.n	800a61e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800a618:	f06f 0305 	mvn.w	r3, #5
 800a61c:	e050      	b.n	800a6c0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a622:	60fb      	str	r3, [r7, #12]
 800a624:	e00b      	b.n	800a63e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800a626:	68f8      	ldr	r0, [r7, #12]
 800a628:	f7ff fee4 	bl	800a3f4 <tcp_output_segment_busy>
 800a62c:	4603      	mov	r3, r0
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d002      	beq.n	800a638 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800a632:	f06f 0305 	mvn.w	r3, #5
 800a636:	e043      	b.n	800a6c0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	60fb      	str	r3, [r7, #12]
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d1ef      	bne.n	800a626 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800a646:	68f8      	ldr	r0, [r7, #12]
 800a648:	f7ff fed4 	bl	800a3f4 <tcp_output_segment_busy>
 800a64c:	4603      	mov	r3, r0
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d002      	beq.n	800a658 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800a652:	f06f 0305 	mvn.w	r3, #5
 800a656:	e033      	b.n	800a6c0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2200      	movs	r2, #0
 800a66c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	8b5b      	ldrh	r3, [r3, #26]
 800a672:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a676:	b29a      	uxth	r2, r3
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	68db      	ldr	r3, [r3, #12]
 800a680:	685b      	ldr	r3, [r3, #4]
 800a682:	4618      	mov	r0, r3
 800a684:	f7f8 fecc 	bl	8003420 <lwip_htonl>
 800a688:	4604      	mov	r4, r0
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	891b      	ldrh	r3, [r3, #8]
 800a68e:	461d      	mov	r5, r3
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	68db      	ldr	r3, [r3, #12]
 800a694:	899b      	ldrh	r3, [r3, #12]
 800a696:	b29b      	uxth	r3, r3
 800a698:	4618      	mov	r0, r3
 800a69a:	f7f8 feac 	bl	80033f6 <lwip_htons>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	f003 0303 	and.w	r3, r3, #3
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d001      	beq.n	800a6ae <tcp_rexmit_rto_prepare+0xba>
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	e000      	b.n	800a6b0 <tcp_rexmit_rto_prepare+0xbc>
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	442b      	add	r3, r5
 800a6b2:	18e2      	adds	r2, r4, r3
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800a6be:	2300      	movs	r3, #0
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3710      	adds	r7, #16
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bdb0      	pop	{r4, r5, r7, pc}
 800a6c8:	080107f4 	.word	0x080107f4
 800a6cc:	08010e30 	.word	0x08010e30
 800a6d0:	08010848 	.word	0x08010848

0800a6d4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b082      	sub	sp, #8
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d106      	bne.n	800a6f0 <tcp_rexmit_rto_commit+0x1c>
 800a6e2:	4b0d      	ldr	r3, [pc, #52]	; (800a718 <tcp_rexmit_rto_commit+0x44>)
 800a6e4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800a6e8:	490c      	ldr	r1, [pc, #48]	; (800a71c <tcp_rexmit_rto_commit+0x48>)
 800a6ea:	480d      	ldr	r0, [pc, #52]	; (800a720 <tcp_rexmit_rto_commit+0x4c>)
 800a6ec:	f003 fdcc 	bl	800e288 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a6f6:	2bff      	cmp	r3, #255	; 0xff
 800a6f8:	d007      	beq.n	800a70a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a700:	3301      	adds	r3, #1
 800a702:	b2da      	uxtb	r2, r3
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f7ff fc7a 	bl	800a004 <tcp_output>
}
 800a710:	bf00      	nop
 800a712:	3708      	adds	r7, #8
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}
 800a718:	080107f4 	.word	0x080107f4
 800a71c:	08010e54 	.word	0x08010e54
 800a720:	08010848 	.word	0x08010848

0800a724 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b082      	sub	sp, #8
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d106      	bne.n	800a740 <tcp_rexmit_rto+0x1c>
 800a732:	4b0a      	ldr	r3, [pc, #40]	; (800a75c <tcp_rexmit_rto+0x38>)
 800a734:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800a738:	4909      	ldr	r1, [pc, #36]	; (800a760 <tcp_rexmit_rto+0x3c>)
 800a73a:	480a      	ldr	r0, [pc, #40]	; (800a764 <tcp_rexmit_rto+0x40>)
 800a73c:	f003 fda4 	bl	800e288 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f7ff ff57 	bl	800a5f4 <tcp_rexmit_rto_prepare>
 800a746:	4603      	mov	r3, r0
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d102      	bne.n	800a752 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f7ff ffc1 	bl	800a6d4 <tcp_rexmit_rto_commit>
  }
}
 800a752:	bf00      	nop
 800a754:	3708      	adds	r7, #8
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
 800a75a:	bf00      	nop
 800a75c:	080107f4 	.word	0x080107f4
 800a760:	08010e78 	.word	0x08010e78
 800a764:	08010848 	.word	0x08010848

0800a768 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800a768:	b590      	push	{r4, r7, lr}
 800a76a:	b085      	sub	sp, #20
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d106      	bne.n	800a784 <tcp_rexmit+0x1c>
 800a776:	4b2f      	ldr	r3, [pc, #188]	; (800a834 <tcp_rexmit+0xcc>)
 800a778:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800a77c:	492e      	ldr	r1, [pc, #184]	; (800a838 <tcp_rexmit+0xd0>)
 800a77e:	482f      	ldr	r0, [pc, #188]	; (800a83c <tcp_rexmit+0xd4>)
 800a780:	f003 fd82 	bl	800e288 <iprintf>

  if (pcb->unacked == NULL) {
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d102      	bne.n	800a792 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800a78c:	f06f 0305 	mvn.w	r3, #5
 800a790:	e04c      	b.n	800a82c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a796:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800a798:	68b8      	ldr	r0, [r7, #8]
 800a79a:	f7ff fe2b 	bl	800a3f4 <tcp_output_segment_busy>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d002      	beq.n	800a7aa <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800a7a4:	f06f 0305 	mvn.w	r3, #5
 800a7a8:	e040      	b.n	800a82c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	681a      	ldr	r2, [r3, #0]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	336c      	adds	r3, #108	; 0x6c
 800a7b6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a7b8:	e002      	b.n	800a7c0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d011      	beq.n	800a7ec <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	68db      	ldr	r3, [r3, #12]
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f7f8 fe25 	bl	8003420 <lwip_htonl>
 800a7d6:	4604      	mov	r4, r0
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	68db      	ldr	r3, [r3, #12]
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f7f8 fe1e 	bl	8003420 <lwip_htonl>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	dbe6      	blt.n	800a7ba <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	681a      	ldr	r2, [r3, #0]
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	68ba      	ldr	r2, [r7, #8]
 800a7f8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d103      	bne.n	800a80a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2200      	movs	r2, #0
 800a806:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a810:	2bff      	cmp	r3, #255	; 0xff
 800a812:	d007      	beq.n	800a824 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a81a:	3301      	adds	r3, #1
 800a81c:	b2da      	uxtb	r2, r3
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2200      	movs	r2, #0
 800a828:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800a82a:	2300      	movs	r3, #0
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3714      	adds	r7, #20
 800a830:	46bd      	mov	sp, r7
 800a832:	bd90      	pop	{r4, r7, pc}
 800a834:	080107f4 	.word	0x080107f4
 800a838:	08010e94 	.word	0x08010e94
 800a83c:	08010848 	.word	0x08010848

0800a840 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b082      	sub	sp, #8
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d106      	bne.n	800a85c <tcp_rexmit_fast+0x1c>
 800a84e:	4b2e      	ldr	r3, [pc, #184]	; (800a908 <tcp_rexmit_fast+0xc8>)
 800a850:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800a854:	492d      	ldr	r1, [pc, #180]	; (800a90c <tcp_rexmit_fast+0xcc>)
 800a856:	482e      	ldr	r0, [pc, #184]	; (800a910 <tcp_rexmit_fast+0xd0>)
 800a858:	f003 fd16 	bl	800e288 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a860:	2b00      	cmp	r3, #0
 800a862:	d04d      	beq.n	800a900 <tcp_rexmit_fast+0xc0>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	8b5b      	ldrh	r3, [r3, #26]
 800a868:	f003 0304 	and.w	r3, r3, #4
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d147      	bne.n	800a900 <tcp_rexmit_fast+0xc0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f7ff ff79 	bl	800a768 <tcp_rexmit>
 800a876:	4603      	mov	r3, r0
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d141      	bne.n	800a900 <tcp_rexmit_fast+0xc0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a888:	429a      	cmp	r2, r3
 800a88a:	d207      	bcs.n	800a89c <tcp_rexmit_fast+0x5c>
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a892:	0fda      	lsrs	r2, r3, #31
 800a894:	4413      	add	r3, r2
 800a896:	105b      	asrs	r3, r3, #1
 800a898:	b29b      	uxth	r3, r3
 800a89a:	e006      	b.n	800a8aa <tcp_rexmit_fast+0x6a>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a8a2:	0fda      	lsrs	r2, r3, #31
 800a8a4:	4413      	add	r3, r2
 800a8a6:	105b      	asrs	r3, r3, #1
 800a8a8:	b29b      	uxth	r3, r3
 800a8aa:	687a      	ldr	r2, [r7, #4]
 800a8ac:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a8bc:	005b      	lsls	r3, r3, #1
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d206      	bcs.n	800a8d0 <tcp_rexmit_fast+0x90>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a8c6:	005b      	lsls	r3, r3, #1
 800a8c8:	b29a      	uxth	r2, r3
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a8da:	4619      	mov	r1, r3
 800a8dc:	0049      	lsls	r1, r1, #1
 800a8de:	440b      	add	r3, r1
 800a8e0:	b29b      	uxth	r3, r3
 800a8e2:	4413      	add	r3, r2
 800a8e4:	b29a      	uxth	r2, r3
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	8b5b      	ldrh	r3, [r3, #26]
 800a8f0:	f043 0304 	orr.w	r3, r3, #4
 800a8f4:	b29a      	uxth	r2, r3
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800a900:	bf00      	nop
 800a902:	3708      	adds	r7, #8
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}
 800a908:	080107f4 	.word	0x080107f4
 800a90c:	08010eac 	.word	0x08010eac
 800a910:	08010848 	.word	0x08010848

0800a914 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b086      	sub	sp, #24
 800a918:	af00      	add	r7, sp, #0
 800a91a:	60f8      	str	r0, [r7, #12]
 800a91c:	607b      	str	r3, [r7, #4]
 800a91e:	460b      	mov	r3, r1
 800a920:	817b      	strh	r3, [r7, #10]
 800a922:	4613      	mov	r3, r2
 800a924:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800a926:	897a      	ldrh	r2, [r7, #10]
 800a928:	893b      	ldrh	r3, [r7, #8]
 800a92a:	4413      	add	r3, r2
 800a92c:	b29b      	uxth	r3, r3
 800a92e:	3314      	adds	r3, #20
 800a930:	b29b      	uxth	r3, r3
 800a932:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a936:	4619      	mov	r1, r3
 800a938:	2022      	movs	r0, #34	; 0x22
 800a93a:	f7f9 fd17 	bl	800436c <pbuf_alloc>
 800a93e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d04e      	beq.n	800a9e4 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	895b      	ldrh	r3, [r3, #10]
 800a94a:	461a      	mov	r2, r3
 800a94c:	897b      	ldrh	r3, [r7, #10]
 800a94e:	3314      	adds	r3, #20
 800a950:	429a      	cmp	r2, r3
 800a952:	da06      	bge.n	800a962 <tcp_output_alloc_header_common+0x4e>
 800a954:	4b26      	ldr	r3, [pc, #152]	; (800a9f0 <tcp_output_alloc_header_common+0xdc>)
 800a956:	f240 7224 	movw	r2, #1828	; 0x724
 800a95a:	4926      	ldr	r1, [pc, #152]	; (800a9f4 <tcp_output_alloc_header_common+0xe0>)
 800a95c:	4826      	ldr	r0, [pc, #152]	; (800a9f8 <tcp_output_alloc_header_common+0xe4>)
 800a95e:	f003 fc93 	bl	800e288 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	685b      	ldr	r3, [r3, #4]
 800a966:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800a968:	8c3b      	ldrh	r3, [r7, #32]
 800a96a:	4618      	mov	r0, r3
 800a96c:	f7f8 fd43 	bl	80033f6 <lwip_htons>
 800a970:	4603      	mov	r3, r0
 800a972:	461a      	mov	r2, r3
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800a978:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a97a:	4618      	mov	r0, r3
 800a97c:	f7f8 fd3b 	bl	80033f6 <lwip_htons>
 800a980:	4603      	mov	r3, r0
 800a982:	461a      	mov	r2, r3
 800a984:	693b      	ldr	r3, [r7, #16]
 800a986:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	687a      	ldr	r2, [r7, #4]
 800a98c:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800a98e:	68f8      	ldr	r0, [r7, #12]
 800a990:	f7f8 fd46 	bl	8003420 <lwip_htonl>
 800a994:	4602      	mov	r2, r0
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800a99a:	897b      	ldrh	r3, [r7, #10]
 800a99c:	089b      	lsrs	r3, r3, #2
 800a99e:	b29b      	uxth	r3, r3
 800a9a0:	3305      	adds	r3, #5
 800a9a2:	b29b      	uxth	r3, r3
 800a9a4:	031b      	lsls	r3, r3, #12
 800a9a6:	b29a      	uxth	r2, r3
 800a9a8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a9ac:	b29b      	uxth	r3, r3
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	b29b      	uxth	r3, r3
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f7f8 fd1f 	bl	80033f6 <lwip_htons>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800a9c0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f7f8 fd17 	bl	80033f6 <lwip_htons>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	741a      	strb	r2, [r3, #16]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	749a      	strb	r2, [r3, #18]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800a9e4:	697b      	ldr	r3, [r7, #20]
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3718      	adds	r7, #24
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}
 800a9ee:	bf00      	nop
 800a9f0:	080107f4 	.word	0x080107f4
 800a9f4:	08010ecc 	.word	0x08010ecc
 800a9f8:	08010848 	.word	0x08010848

0800a9fc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800a9fc:	b5b0      	push	{r4, r5, r7, lr}
 800a9fe:	b08a      	sub	sp, #40	; 0x28
 800aa00:	af04      	add	r7, sp, #16
 800aa02:	60f8      	str	r0, [r7, #12]
 800aa04:	607b      	str	r3, [r7, #4]
 800aa06:	460b      	mov	r3, r1
 800aa08:	817b      	strh	r3, [r7, #10]
 800aa0a:	4613      	mov	r3, r2
 800aa0c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d106      	bne.n	800aa22 <tcp_output_alloc_header+0x26>
 800aa14:	4b15      	ldr	r3, [pc, #84]	; (800aa6c <tcp_output_alloc_header+0x70>)
 800aa16:	f240 7242 	movw	r2, #1858	; 0x742
 800aa1a:	4915      	ldr	r1, [pc, #84]	; (800aa70 <tcp_output_alloc_header+0x74>)
 800aa1c:	4815      	ldr	r0, [pc, #84]	; (800aa74 <tcp_output_alloc_header+0x78>)
 800aa1e:	f003 fc33 	bl	800e288 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	8adb      	ldrh	r3, [r3, #22]
 800aa2a:	68fa      	ldr	r2, [r7, #12]
 800aa2c:	8b12      	ldrh	r2, [r2, #24]
 800aa2e:	68f9      	ldr	r1, [r7, #12]
 800aa30:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800aa32:	893d      	ldrh	r5, [r7, #8]
 800aa34:	897c      	ldrh	r4, [r7, #10]
 800aa36:	9103      	str	r1, [sp, #12]
 800aa38:	2110      	movs	r1, #16
 800aa3a:	9102      	str	r1, [sp, #8]
 800aa3c:	9201      	str	r2, [sp, #4]
 800aa3e:	9300      	str	r3, [sp, #0]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	462a      	mov	r2, r5
 800aa44:	4621      	mov	r1, r4
 800aa46:	f7ff ff65 	bl	800a914 <tcp_output_alloc_header_common>
 800aa4a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d006      	beq.n	800aa60 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa56:	68fa      	ldr	r2, [r7, #12]
 800aa58:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800aa5a:	441a      	add	r2, r3
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800aa60:	697b      	ldr	r3, [r7, #20]
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3718      	adds	r7, #24
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bdb0      	pop	{r4, r5, r7, pc}
 800aa6a:	bf00      	nop
 800aa6c:	080107f4 	.word	0x080107f4
 800aa70:	08010efc 	.word	0x08010efc
 800aa74:	08010848 	.word	0x08010848

0800aa78 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b088      	sub	sp, #32
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	60f8      	str	r0, [r7, #12]
 800aa80:	60b9      	str	r1, [r7, #8]
 800aa82:	4611      	mov	r1, r2
 800aa84:	461a      	mov	r2, r3
 800aa86:	460b      	mov	r3, r1
 800aa88:	71fb      	strb	r3, [r7, #7]
 800aa8a:	4613      	mov	r3, r2
 800aa8c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d106      	bne.n	800aaa6 <tcp_output_fill_options+0x2e>
 800aa98:	4b13      	ldr	r3, [pc, #76]	; (800aae8 <tcp_output_fill_options+0x70>)
 800aa9a:	f240 7256 	movw	r2, #1878	; 0x756
 800aa9e:	4913      	ldr	r1, [pc, #76]	; (800aaec <tcp_output_fill_options+0x74>)
 800aaa0:	4813      	ldr	r0, [pc, #76]	; (800aaf0 <tcp_output_fill_options+0x78>)
 800aaa2:	f003 fbf1 	bl	800e288 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	685b      	ldr	r3, [r3, #4]
 800aaaa:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800aaac:	69bb      	ldr	r3, [r7, #24]
 800aaae:	3314      	adds	r3, #20
 800aab0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800aab2:	69bb      	ldr	r3, [r7, #24]
 800aab4:	f103 0214 	add.w	r2, r3, #20
 800aab8:	8bfb      	ldrh	r3, [r7, #30]
 800aaba:	009b      	lsls	r3, r3, #2
 800aabc:	4619      	mov	r1, r3
 800aabe:	79fb      	ldrb	r3, [r7, #7]
 800aac0:	009b      	lsls	r3, r3, #2
 800aac2:	f003 0304 	and.w	r3, r3, #4
 800aac6:	440b      	add	r3, r1
 800aac8:	4413      	add	r3, r2
 800aaca:	697a      	ldr	r2, [r7, #20]
 800aacc:	429a      	cmp	r2, r3
 800aace:	d006      	beq.n	800aade <tcp_output_fill_options+0x66>
 800aad0:	4b05      	ldr	r3, [pc, #20]	; (800aae8 <tcp_output_fill_options+0x70>)
 800aad2:	f240 7275 	movw	r2, #1909	; 0x775
 800aad6:	4907      	ldr	r1, [pc, #28]	; (800aaf4 <tcp_output_fill_options+0x7c>)
 800aad8:	4805      	ldr	r0, [pc, #20]	; (800aaf0 <tcp_output_fill_options+0x78>)
 800aada:	f003 fbd5 	bl	800e288 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800aade:	bf00      	nop
 800aae0:	3720      	adds	r7, #32
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}
 800aae6:	bf00      	nop
 800aae8:	080107f4 	.word	0x080107f4
 800aaec:	08010f24 	.word	0x08010f24
 800aaf0:	08010848 	.word	0x08010848
 800aaf4:	08010e1c 	.word	0x08010e1c

0800aaf8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b08a      	sub	sp, #40	; 0x28
 800aafc:	af04      	add	r7, sp, #16
 800aafe:	60f8      	str	r0, [r7, #12]
 800ab00:	60b9      	str	r1, [r7, #8]
 800ab02:	607a      	str	r2, [r7, #4]
 800ab04:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d106      	bne.n	800ab1a <tcp_output_control_segment+0x22>
 800ab0c:	4b1c      	ldr	r3, [pc, #112]	; (800ab80 <tcp_output_control_segment+0x88>)
 800ab0e:	f240 7287 	movw	r2, #1927	; 0x787
 800ab12:	491c      	ldr	r1, [pc, #112]	; (800ab84 <tcp_output_control_segment+0x8c>)
 800ab14:	481c      	ldr	r0, [pc, #112]	; (800ab88 <tcp_output_control_segment+0x90>)
 800ab16:	f003 fbb7 	bl	800e288 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800ab1a:	683a      	ldr	r2, [r7, #0]
 800ab1c:	6879      	ldr	r1, [r7, #4]
 800ab1e:	68f8      	ldr	r0, [r7, #12]
 800ab20:	f7fe fad6 	bl	80090d0 <tcp_route>
 800ab24:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800ab26:	693b      	ldr	r3, [r7, #16]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d102      	bne.n	800ab32 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800ab2c:	23fc      	movs	r3, #252	; 0xfc
 800ab2e:	75fb      	strb	r3, [r7, #23]
 800ab30:	e01c      	b.n	800ab6c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d006      	beq.n	800ab46 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	7adb      	ldrb	r3, [r3, #11]
 800ab3c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	7a9b      	ldrb	r3, [r3, #10]
 800ab42:	757b      	strb	r3, [r7, #21]
 800ab44:	e003      	b.n	800ab4e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800ab46:	23ff      	movs	r3, #255	; 0xff
 800ab48:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800ab4e:	7dba      	ldrb	r2, [r7, #22]
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	9302      	str	r3, [sp, #8]
 800ab54:	2306      	movs	r3, #6
 800ab56:	9301      	str	r3, [sp, #4]
 800ab58:	7d7b      	ldrb	r3, [r7, #21]
 800ab5a:	9300      	str	r3, [sp, #0]
 800ab5c:	4613      	mov	r3, r2
 800ab5e:	683a      	ldr	r2, [r7, #0]
 800ab60:	6879      	ldr	r1, [r7, #4]
 800ab62:	68b8      	ldr	r0, [r7, #8]
 800ab64:	f002 fb26 	bl	800d1b4 <ip4_output_if>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800ab6c:	68b8      	ldr	r0, [r7, #8]
 800ab6e:	f7f9 fedd 	bl	800492c <pbuf_free>
  return err;
 800ab72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3718      	adds	r7, #24
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}
 800ab7e:	bf00      	nop
 800ab80:	080107f4 	.word	0x080107f4
 800ab84:	08010f4c 	.word	0x08010f4c
 800ab88:	08010848 	.word	0x08010848

0800ab8c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800ab8c:	b590      	push	{r4, r7, lr}
 800ab8e:	b08b      	sub	sp, #44	; 0x2c
 800ab90:	af04      	add	r7, sp, #16
 800ab92:	60f8      	str	r0, [r7, #12]
 800ab94:	60b9      	str	r1, [r7, #8]
 800ab96:	607a      	str	r2, [r7, #4]
 800ab98:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d106      	bne.n	800abae <tcp_rst+0x22>
 800aba0:	4b1f      	ldr	r3, [pc, #124]	; (800ac20 <tcp_rst+0x94>)
 800aba2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800aba6:	491f      	ldr	r1, [pc, #124]	; (800ac24 <tcp_rst+0x98>)
 800aba8:	481f      	ldr	r0, [pc, #124]	; (800ac28 <tcp_rst+0x9c>)
 800abaa:	f003 fb6d 	bl	800e288 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800abae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d106      	bne.n	800abc2 <tcp_rst+0x36>
 800abb4:	4b1a      	ldr	r3, [pc, #104]	; (800ac20 <tcp_rst+0x94>)
 800abb6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800abba:	491c      	ldr	r1, [pc, #112]	; (800ac2c <tcp_rst+0xa0>)
 800abbc:	481a      	ldr	r0, [pc, #104]	; (800ac28 <tcp_rst+0x9c>)
 800abbe:	f003 fb63 	bl	800e288 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800abc2:	2300      	movs	r3, #0
 800abc4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800abc6:	f246 0308 	movw	r3, #24584	; 0x6008
 800abca:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800abcc:	7dfb      	ldrb	r3, [r7, #23]
 800abce:	b29c      	uxth	r4, r3
 800abd0:	68b8      	ldr	r0, [r7, #8]
 800abd2:	f7f8 fc25 	bl	8003420 <lwip_htonl>
 800abd6:	4602      	mov	r2, r0
 800abd8:	8abb      	ldrh	r3, [r7, #20]
 800abda:	9303      	str	r3, [sp, #12]
 800abdc:	2314      	movs	r3, #20
 800abde:	9302      	str	r3, [sp, #8]
 800abe0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800abe2:	9301      	str	r3, [sp, #4]
 800abe4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800abe6:	9300      	str	r3, [sp, #0]
 800abe8:	4613      	mov	r3, r2
 800abea:	2200      	movs	r2, #0
 800abec:	4621      	mov	r1, r4
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f7ff fe90 	bl	800a914 <tcp_output_alloc_header_common>
 800abf4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d00c      	beq.n	800ac16 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800abfc:	7dfb      	ldrb	r3, [r7, #23]
 800abfe:	2200      	movs	r2, #0
 800ac00:	6939      	ldr	r1, [r7, #16]
 800ac02:	68f8      	ldr	r0, [r7, #12]
 800ac04:	f7ff ff38 	bl	800aa78 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800ac08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac0a:	683a      	ldr	r2, [r7, #0]
 800ac0c:	6939      	ldr	r1, [r7, #16]
 800ac0e:	68f8      	ldr	r0, [r7, #12]
 800ac10:	f7ff ff72 	bl	800aaf8 <tcp_output_control_segment>
 800ac14:	e000      	b.n	800ac18 <tcp_rst+0x8c>
    return;
 800ac16:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800ac18:	371c      	adds	r7, #28
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd90      	pop	{r4, r7, pc}
 800ac1e:	bf00      	nop
 800ac20:	080107f4 	.word	0x080107f4
 800ac24:	08010f78 	.word	0x08010f78
 800ac28:	08010848 	.word	0x08010848
 800ac2c:	08010f94 	.word	0x08010f94

0800ac30 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800ac30:	b590      	push	{r4, r7, lr}
 800ac32:	b087      	sub	sp, #28
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d106      	bne.n	800ac54 <tcp_send_empty_ack+0x24>
 800ac46:	4b28      	ldr	r3, [pc, #160]	; (800ace8 <tcp_send_empty_ack+0xb8>)
 800ac48:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800ac4c:	4927      	ldr	r1, [pc, #156]	; (800acec <tcp_send_empty_ack+0xbc>)
 800ac4e:	4828      	ldr	r0, [pc, #160]	; (800acf0 <tcp_send_empty_ack+0xc0>)
 800ac50:	f003 fb1a 	bl	800e288 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ac54:	7dfb      	ldrb	r3, [r7, #23]
 800ac56:	009b      	lsls	r3, r3, #2
 800ac58:	b2db      	uxtb	r3, r3
 800ac5a:	f003 0304 	and.w	r3, r3, #4
 800ac5e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800ac60:	7d7b      	ldrb	r3, [r7, #21]
 800ac62:	b29c      	uxth	r4, r3
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f7f8 fbd9 	bl	8003420 <lwip_htonl>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	2200      	movs	r2, #0
 800ac72:	4621      	mov	r1, r4
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f7ff fec1 	bl	800a9fc <tcp_output_alloc_header>
 800ac7a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ac7c:	693b      	ldr	r3, [r7, #16]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d109      	bne.n	800ac96 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	8b5b      	ldrh	r3, [r3, #26]
 800ac86:	f043 0303 	orr.w	r3, r3, #3
 800ac8a:	b29a      	uxth	r2, r3
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800ac90:	f06f 0301 	mvn.w	r3, #1
 800ac94:	e023      	b.n	800acde <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800ac96:	7dbb      	ldrb	r3, [r7, #22]
 800ac98:	7dfa      	ldrb	r2, [r7, #23]
 800ac9a:	6939      	ldr	r1, [r7, #16]
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f7ff feeb 	bl	800aa78 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800aca2:	687a      	ldr	r2, [r7, #4]
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	3304      	adds	r3, #4
 800aca8:	6939      	ldr	r1, [r7, #16]
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f7ff ff24 	bl	800aaf8 <tcp_output_control_segment>
 800acb0:	4603      	mov	r3, r0
 800acb2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800acb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d007      	beq.n	800accc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	8b5b      	ldrh	r3, [r3, #26]
 800acc0:	f043 0303 	orr.w	r3, r3, #3
 800acc4:	b29a      	uxth	r2, r3
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	835a      	strh	r2, [r3, #26]
 800acca:	e006      	b.n	800acda <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	8b5b      	ldrh	r3, [r3, #26]
 800acd0:	f023 0303 	bic.w	r3, r3, #3
 800acd4:	b29a      	uxth	r2, r3
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800acda:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800acde:	4618      	mov	r0, r3
 800ace0:	371c      	adds	r7, #28
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd90      	pop	{r4, r7, pc}
 800ace6:	bf00      	nop
 800ace8:	080107f4 	.word	0x080107f4
 800acec:	08010fb0 	.word	0x08010fb0
 800acf0:	08010848 	.word	0x08010848

0800acf4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800acf4:	b590      	push	{r4, r7, lr}
 800acf6:	b087      	sub	sp, #28
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800acfc:	2300      	movs	r3, #0
 800acfe:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d106      	bne.n	800ad14 <tcp_keepalive+0x20>
 800ad06:	4b18      	ldr	r3, [pc, #96]	; (800ad68 <tcp_keepalive+0x74>)
 800ad08:	f640 0224 	movw	r2, #2084	; 0x824
 800ad0c:	4917      	ldr	r1, [pc, #92]	; (800ad6c <tcp_keepalive+0x78>)
 800ad0e:	4818      	ldr	r0, [pc, #96]	; (800ad70 <tcp_keepalive+0x7c>)
 800ad10:	f003 faba 	bl	800e288 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800ad14:	7dfb      	ldrb	r3, [r7, #23]
 800ad16:	b29c      	uxth	r4, r3
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad1c:	3b01      	subs	r3, #1
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f7f8 fb7e 	bl	8003420 <lwip_htonl>
 800ad24:	4603      	mov	r3, r0
 800ad26:	2200      	movs	r2, #0
 800ad28:	4621      	mov	r1, r4
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f7ff fe66 	bl	800a9fc <tcp_output_alloc_header>
 800ad30:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d102      	bne.n	800ad3e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800ad38:	f04f 33ff 	mov.w	r3, #4294967295
 800ad3c:	e010      	b.n	800ad60 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ad3e:	7dfb      	ldrb	r3, [r7, #23]
 800ad40:	2200      	movs	r2, #0
 800ad42:	6939      	ldr	r1, [r7, #16]
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f7ff fe97 	bl	800aa78 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ad4a:	687a      	ldr	r2, [r7, #4]
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	3304      	adds	r3, #4
 800ad50:	6939      	ldr	r1, [r7, #16]
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f7ff fed0 	bl	800aaf8 <tcp_output_control_segment>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ad5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	371c      	adds	r7, #28
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd90      	pop	{r4, r7, pc}
 800ad68:	080107f4 	.word	0x080107f4
 800ad6c:	08010fd0 	.word	0x08010fd0
 800ad70:	08010848 	.word	0x08010848

0800ad74 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800ad74:	b590      	push	{r4, r7, lr}
 800ad76:	b08b      	sub	sp, #44	; 0x2c
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d106      	bne.n	800ad96 <tcp_zero_window_probe+0x22>
 800ad88:	4b4c      	ldr	r3, [pc, #304]	; (800aebc <tcp_zero_window_probe+0x148>)
 800ad8a:	f640 024f 	movw	r2, #2127	; 0x84f
 800ad8e:	494c      	ldr	r1, [pc, #304]	; (800aec0 <tcp_zero_window_probe+0x14c>)
 800ad90:	484c      	ldr	r0, [pc, #304]	; (800aec4 <tcp_zero_window_probe+0x150>)
 800ad92:	f003 fa79 	bl	800e288 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad9a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800ad9c:	6a3b      	ldr	r3, [r7, #32]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d101      	bne.n	800ada6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800ada2:	2300      	movs	r3, #0
 800ada4:	e086      	b.n	800aeb4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800adac:	2bff      	cmp	r3, #255	; 0xff
 800adae:	d007      	beq.n	800adc0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800adb6:	3301      	adds	r3, #1
 800adb8:	b2da      	uxtb	r2, r3
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800adc0:	6a3b      	ldr	r3, [r7, #32]
 800adc2:	68db      	ldr	r3, [r3, #12]
 800adc4:	899b      	ldrh	r3, [r3, #12]
 800adc6:	b29b      	uxth	r3, r3
 800adc8:	4618      	mov	r0, r3
 800adca:	f7f8 fb14 	bl	80033f6 <lwip_htons>
 800adce:	4603      	mov	r3, r0
 800add0:	b2db      	uxtb	r3, r3
 800add2:	f003 0301 	and.w	r3, r3, #1
 800add6:	2b00      	cmp	r3, #0
 800add8:	d005      	beq.n	800ade6 <tcp_zero_window_probe+0x72>
 800adda:	6a3b      	ldr	r3, [r7, #32]
 800addc:	891b      	ldrh	r3, [r3, #8]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d101      	bne.n	800ade6 <tcp_zero_window_probe+0x72>
 800ade2:	2301      	movs	r3, #1
 800ade4:	e000      	b.n	800ade8 <tcp_zero_window_probe+0x74>
 800ade6:	2300      	movs	r3, #0
 800ade8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800adea:	7ffb      	ldrb	r3, [r7, #31]
 800adec:	2b00      	cmp	r3, #0
 800adee:	bf0c      	ite	eq
 800adf0:	2301      	moveq	r3, #1
 800adf2:	2300      	movne	r3, #0
 800adf4:	b2db      	uxtb	r3, r3
 800adf6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800adf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800adfc:	b299      	uxth	r1, r3
 800adfe:	6a3b      	ldr	r3, [r7, #32]
 800ae00:	68db      	ldr	r3, [r3, #12]
 800ae02:	685b      	ldr	r3, [r3, #4]
 800ae04:	8bba      	ldrh	r2, [r7, #28]
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f7ff fdf8 	bl	800a9fc <tcp_output_alloc_header>
 800ae0c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ae0e:	69bb      	ldr	r3, [r7, #24]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d102      	bne.n	800ae1a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800ae14:	f04f 33ff 	mov.w	r3, #4294967295
 800ae18:	e04c      	b.n	800aeb4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ae1a:	69bb      	ldr	r3, [r7, #24]
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800ae20:	7ffb      	ldrb	r3, [r7, #31]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d011      	beq.n	800ae4a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	899b      	ldrh	r3, [r3, #12]
 800ae2a:	b29b      	uxth	r3, r3
 800ae2c:	b21b      	sxth	r3, r3
 800ae2e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ae32:	b21c      	sxth	r4, r3
 800ae34:	2011      	movs	r0, #17
 800ae36:	f7f8 fade 	bl	80033f6 <lwip_htons>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	b21b      	sxth	r3, r3
 800ae3e:	4323      	orrs	r3, r4
 800ae40:	b21b      	sxth	r3, r3
 800ae42:	b29a      	uxth	r2, r3
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	819a      	strh	r2, [r3, #12]
 800ae48:	e010      	b.n	800ae6c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800ae4a:	69bb      	ldr	r3, [r7, #24]
 800ae4c:	685b      	ldr	r3, [r3, #4]
 800ae4e:	3314      	adds	r3, #20
 800ae50:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ae52:	6a3b      	ldr	r3, [r7, #32]
 800ae54:	6858      	ldr	r0, [r3, #4]
 800ae56:	6a3b      	ldr	r3, [r7, #32]
 800ae58:	685b      	ldr	r3, [r3, #4]
 800ae5a:	891a      	ldrh	r2, [r3, #8]
 800ae5c:	6a3b      	ldr	r3, [r7, #32]
 800ae5e:	891b      	ldrh	r3, [r3, #8]
 800ae60:	1ad3      	subs	r3, r2, r3
 800ae62:	b29b      	uxth	r3, r3
 800ae64:	2201      	movs	r2, #1
 800ae66:	6939      	ldr	r1, [r7, #16]
 800ae68:	f7f9 ff5a 	bl	8004d20 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ae6c:	6a3b      	ldr	r3, [r7, #32]
 800ae6e:	68db      	ldr	r3, [r3, #12]
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	4618      	mov	r0, r3
 800ae74:	f7f8 fad4 	bl	8003420 <lwip_htonl>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	3301      	adds	r3, #1
 800ae7c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	1ad3      	subs	r3, r2, r3
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	da02      	bge.n	800ae90 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	68fa      	ldr	r2, [r7, #12]
 800ae8e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ae90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae94:	2200      	movs	r2, #0
 800ae96:	69b9      	ldr	r1, [r7, #24]
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f7ff fded 	bl	800aa78 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ae9e:	687a      	ldr	r2, [r7, #4]
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	3304      	adds	r3, #4
 800aea4:	69b9      	ldr	r1, [r7, #24]
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f7ff fe26 	bl	800aaf8 <tcp_output_control_segment>
 800aeac:	4603      	mov	r3, r0
 800aeae:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800aeb0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	372c      	adds	r7, #44	; 0x2c
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd90      	pop	{r4, r7, pc}
 800aebc:	080107f4 	.word	0x080107f4
 800aec0:	08010fec 	.word	0x08010fec
 800aec4:	08010848 	.word	0x08010848

0800aec8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b082      	sub	sp, #8
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800aed0:	f7fa f814 	bl	8004efc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800aed4:	4b0a      	ldr	r3, [pc, #40]	; (800af00 <tcpip_tcp_timer+0x38>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d103      	bne.n	800aee4 <tcpip_tcp_timer+0x1c>
 800aedc:	4b09      	ldr	r3, [pc, #36]	; (800af04 <tcpip_tcp_timer+0x3c>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d005      	beq.n	800aef0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800aee4:	2200      	movs	r2, #0
 800aee6:	4908      	ldr	r1, [pc, #32]	; (800af08 <tcpip_tcp_timer+0x40>)
 800aee8:	20fa      	movs	r0, #250	; 0xfa
 800aeea:	f000 f8f1 	bl	800b0d0 <sys_timeout>
 800aeee:	e002      	b.n	800aef6 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800aef0:	4b06      	ldr	r3, [pc, #24]	; (800af0c <tcpip_tcp_timer+0x44>)
 800aef2:	2200      	movs	r2, #0
 800aef4:	601a      	str	r2, [r3, #0]
  }
}
 800aef6:	bf00      	nop
 800aef8:	3708      	adds	r7, #8
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}
 800aefe:	bf00      	nop
 800af00:	2000688c 	.word	0x2000688c
 800af04:	2000689c 	.word	0x2000689c
 800af08:	0800aec9 	.word	0x0800aec9
 800af0c:	2000010c 	.word	0x2000010c

0800af10 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800af14:	4b0a      	ldr	r3, [pc, #40]	; (800af40 <tcp_timer_needed+0x30>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d10f      	bne.n	800af3c <tcp_timer_needed+0x2c>
 800af1c:	4b09      	ldr	r3, [pc, #36]	; (800af44 <tcp_timer_needed+0x34>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d103      	bne.n	800af2c <tcp_timer_needed+0x1c>
 800af24:	4b08      	ldr	r3, [pc, #32]	; (800af48 <tcp_timer_needed+0x38>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d007      	beq.n	800af3c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800af2c:	4b04      	ldr	r3, [pc, #16]	; (800af40 <tcp_timer_needed+0x30>)
 800af2e:	2201      	movs	r2, #1
 800af30:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800af32:	2200      	movs	r2, #0
 800af34:	4905      	ldr	r1, [pc, #20]	; (800af4c <tcp_timer_needed+0x3c>)
 800af36:	20fa      	movs	r0, #250	; 0xfa
 800af38:	f000 f8ca 	bl	800b0d0 <sys_timeout>
  }
}
 800af3c:	bf00      	nop
 800af3e:	bd80      	pop	{r7, pc}
 800af40:	2000010c 	.word	0x2000010c
 800af44:	2000688c 	.word	0x2000688c
 800af48:	2000689c 	.word	0x2000689c
 800af4c:	0800aec9 	.word	0x0800aec9

0800af50 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b086      	sub	sp, #24
 800af54:	af00      	add	r7, sp, #0
 800af56:	60f8      	str	r0, [r7, #12]
 800af58:	60b9      	str	r1, [r7, #8]
 800af5a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800af5c:	2006      	movs	r0, #6
 800af5e:	f7f8 fe9f 	bl	8003ca0 <memp_malloc>
 800af62:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d109      	bne.n	800af7e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d151      	bne.n	800b014 <sys_timeout_abs+0xc4>
 800af70:	4b2a      	ldr	r3, [pc, #168]	; (800b01c <sys_timeout_abs+0xcc>)
 800af72:	22be      	movs	r2, #190	; 0xbe
 800af74:	492a      	ldr	r1, [pc, #168]	; (800b020 <sys_timeout_abs+0xd0>)
 800af76:	482b      	ldr	r0, [pc, #172]	; (800b024 <sys_timeout_abs+0xd4>)
 800af78:	f003 f986 	bl	800e288 <iprintf>
    return;
 800af7c:	e04a      	b.n	800b014 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	2200      	movs	r2, #0
 800af82:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	68ba      	ldr	r2, [r7, #8]
 800af88:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	687a      	ldr	r2, [r7, #4]
 800af8e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	68fa      	ldr	r2, [r7, #12]
 800af94:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800af96:	4b24      	ldr	r3, [pc, #144]	; (800b028 <sys_timeout_abs+0xd8>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d103      	bne.n	800afa6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800af9e:	4a22      	ldr	r2, [pc, #136]	; (800b028 <sys_timeout_abs+0xd8>)
 800afa0:	693b      	ldr	r3, [r7, #16]
 800afa2:	6013      	str	r3, [r2, #0]
    return;
 800afa4:	e037      	b.n	800b016 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	685a      	ldr	r2, [r3, #4]
 800afaa:	4b1f      	ldr	r3, [pc, #124]	; (800b028 <sys_timeout_abs+0xd8>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	685b      	ldr	r3, [r3, #4]
 800afb0:	1ad3      	subs	r3, r2, r3
 800afb2:	0fdb      	lsrs	r3, r3, #31
 800afb4:	f003 0301 	and.w	r3, r3, #1
 800afb8:	b2db      	uxtb	r3, r3
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d007      	beq.n	800afce <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800afbe:	4b1a      	ldr	r3, [pc, #104]	; (800b028 <sys_timeout_abs+0xd8>)
 800afc0:	681a      	ldr	r2, [r3, #0]
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800afc6:	4a18      	ldr	r2, [pc, #96]	; (800b028 <sys_timeout_abs+0xd8>)
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	6013      	str	r3, [r2, #0]
 800afcc:	e023      	b.n	800b016 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800afce:	4b16      	ldr	r3, [pc, #88]	; (800b028 <sys_timeout_abs+0xd8>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	617b      	str	r3, [r7, #20]
 800afd4:	e01a      	b.n	800b00c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d00b      	beq.n	800aff6 <sys_timeout_abs+0xa6>
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	685a      	ldr	r2, [r3, #4]
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	1ad3      	subs	r3, r2, r3
 800afea:	0fdb      	lsrs	r3, r3, #31
 800afec:	f003 0301 	and.w	r3, r3, #1
 800aff0:	b2db      	uxtb	r3, r3
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d007      	beq.n	800b006 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	681a      	ldr	r2, [r3, #0]
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	693a      	ldr	r2, [r7, #16]
 800b002:	601a      	str	r2, [r3, #0]
        break;
 800b004:	e007      	b.n	800b016 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	617b      	str	r3, [r7, #20]
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d1e1      	bne.n	800afd6 <sys_timeout_abs+0x86>
 800b012:	e000      	b.n	800b016 <sys_timeout_abs+0xc6>
    return;
 800b014:	bf00      	nop
      }
    }
  }
}
 800b016:	3718      	adds	r7, #24
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}
 800b01c:	08011010 	.word	0x08011010
 800b020:	08011044 	.word	0x08011044
 800b024:	08011084 	.word	0x08011084
 800b028:	20000104 	.word	0x20000104

0800b02c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b086      	sub	sp, #24
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	685b      	ldr	r3, [r3, #4]
 800b03c:	4798      	blx	r3

  now = sys_now();
 800b03e:	f7f8 f9d3 	bl	80033e8 <sys_now>
 800b042:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	681a      	ldr	r2, [r3, #0]
 800b048:	4b0f      	ldr	r3, [pc, #60]	; (800b088 <lwip_cyclic_timer+0x5c>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	4413      	add	r3, r2
 800b04e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800b050:	68fa      	ldr	r2, [r7, #12]
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	1ad3      	subs	r3, r2, r3
 800b056:	0fdb      	lsrs	r3, r3, #31
 800b058:	f003 0301 	and.w	r3, r3, #1
 800b05c:	b2db      	uxtb	r3, r3
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d009      	beq.n	800b076 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	681a      	ldr	r2, [r3, #0]
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	4413      	add	r3, r2
 800b06a:	687a      	ldr	r2, [r7, #4]
 800b06c:	4907      	ldr	r1, [pc, #28]	; (800b08c <lwip_cyclic_timer+0x60>)
 800b06e:	4618      	mov	r0, r3
 800b070:	f7ff ff6e 	bl	800af50 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800b074:	e004      	b.n	800b080 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800b076:	687a      	ldr	r2, [r7, #4]
 800b078:	4904      	ldr	r1, [pc, #16]	; (800b08c <lwip_cyclic_timer+0x60>)
 800b07a:	68f8      	ldr	r0, [r7, #12]
 800b07c:	f7ff ff68 	bl	800af50 <sys_timeout_abs>
}
 800b080:	bf00      	nop
 800b082:	3718      	adds	r7, #24
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}
 800b088:	20000108 	.word	0x20000108
 800b08c:	0800b02d 	.word	0x0800b02d

0800b090 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b082      	sub	sp, #8
 800b094:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b096:	2301      	movs	r3, #1
 800b098:	607b      	str	r3, [r7, #4]
 800b09a:	e00e      	b.n	800b0ba <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800b09c:	4a0a      	ldr	r2, [pc, #40]	; (800b0c8 <sys_timeouts_init+0x38>)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	00db      	lsls	r3, r3, #3
 800b0a8:	4a07      	ldr	r2, [pc, #28]	; (800b0c8 <sys_timeouts_init+0x38>)
 800b0aa:	4413      	add	r3, r2
 800b0ac:	461a      	mov	r2, r3
 800b0ae:	4907      	ldr	r1, [pc, #28]	; (800b0cc <sys_timeouts_init+0x3c>)
 800b0b0:	f000 f80e 	bl	800b0d0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	3301      	adds	r3, #1
 800b0b8:	607b      	str	r3, [r7, #4]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2b02      	cmp	r3, #2
 800b0be:	d9ed      	bls.n	800b09c <sys_timeouts_init+0xc>
  }
}
 800b0c0:	bf00      	nop
 800b0c2:	3708      	adds	r7, #8
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}
 800b0c8:	08011be8 	.word	0x08011be8
 800b0cc:	0800b02d 	.word	0x0800b02d

0800b0d0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b086      	sub	sp, #24
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	60f8      	str	r0, [r7, #12]
 800b0d8:	60b9      	str	r1, [r7, #8]
 800b0da:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0e2:	d306      	bcc.n	800b0f2 <sys_timeout+0x22>
 800b0e4:	4b0a      	ldr	r3, [pc, #40]	; (800b110 <sys_timeout+0x40>)
 800b0e6:	f240 1229 	movw	r2, #297	; 0x129
 800b0ea:	490a      	ldr	r1, [pc, #40]	; (800b114 <sys_timeout+0x44>)
 800b0ec:	480a      	ldr	r0, [pc, #40]	; (800b118 <sys_timeout+0x48>)
 800b0ee:	f003 f8cb 	bl	800e288 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800b0f2:	f7f8 f979 	bl	80033e8 <sys_now>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	4413      	add	r3, r2
 800b0fc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800b0fe:	687a      	ldr	r2, [r7, #4]
 800b100:	68b9      	ldr	r1, [r7, #8]
 800b102:	6978      	ldr	r0, [r7, #20]
 800b104:	f7ff ff24 	bl	800af50 <sys_timeout_abs>
#endif
}
 800b108:	bf00      	nop
 800b10a:	3718      	adds	r7, #24
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}
 800b110:	08011010 	.word	0x08011010
 800b114:	080110ac 	.word	0x080110ac
 800b118:	08011084 	.word	0x08011084

0800b11c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b084      	sub	sp, #16
 800b120:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800b122:	f7f8 f961 	bl	80033e8 <sys_now>
 800b126:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800b128:	4b1a      	ldr	r3, [pc, #104]	; (800b194 <sys_check_timeouts+0x78>)
 800b12a:	781b      	ldrb	r3, [r3, #0]
 800b12c:	b2db      	uxtb	r3, r3
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d001      	beq.n	800b136 <sys_check_timeouts+0x1a>
 800b132:	f7f9 f8c5 	bl	80042c0 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800b136:	4b18      	ldr	r3, [pc, #96]	; (800b198 <sys_check_timeouts+0x7c>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d022      	beq.n	800b188 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	68fa      	ldr	r2, [r7, #12]
 800b148:	1ad3      	subs	r3, r2, r3
 800b14a:	0fdb      	lsrs	r3, r3, #31
 800b14c:	f003 0301 	and.w	r3, r3, #1
 800b150:	b2db      	uxtb	r3, r3
 800b152:	2b00      	cmp	r3, #0
 800b154:	d11a      	bne.n	800b18c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	4a0f      	ldr	r2, [pc, #60]	; (800b198 <sys_check_timeouts+0x7c>)
 800b15c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	689b      	ldr	r3, [r3, #8]
 800b162:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	68db      	ldr	r3, [r3, #12]
 800b168:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	4a0b      	ldr	r2, [pc, #44]	; (800b19c <sys_check_timeouts+0x80>)
 800b170:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800b172:	68b9      	ldr	r1, [r7, #8]
 800b174:	2006      	movs	r0, #6
 800b176:	f7f8 fddf 	bl	8003d38 <memp_free>
    if (handler != NULL) {
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d0d3      	beq.n	800b128 <sys_check_timeouts+0xc>
      handler(arg);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6838      	ldr	r0, [r7, #0]
 800b184:	4798      	blx	r3
  do {
 800b186:	e7cf      	b.n	800b128 <sys_check_timeouts+0xc>
      return;
 800b188:	bf00      	nop
 800b18a:	e000      	b.n	800b18e <sys_check_timeouts+0x72>
      return;
 800b18c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800b18e:	3710      	adds	r7, #16
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}
 800b194:	20006884 	.word	0x20006884
 800b198:	20000104 	.word	0x20000104
 800b19c:	20000108 	.word	0x20000108

0800b1a0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b1a4:	f003 f888 	bl	800e2b8 <rand>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	b29b      	uxth	r3, r3
 800b1ac:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b1b0:	b29b      	uxth	r3, r3
 800b1b2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800b1b6:	b29a      	uxth	r2, r3
 800b1b8:	4b01      	ldr	r3, [pc, #4]	; (800b1c0 <udp_init+0x20>)
 800b1ba:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b1bc:	bf00      	nop
 800b1be:	bd80      	pop	{r7, pc}
 800b1c0:	20000010 	.word	0x20000010

0800b1c4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b083      	sub	sp, #12
 800b1c8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800b1ce:	4b17      	ldr	r3, [pc, #92]	; (800b22c <udp_new_port+0x68>)
 800b1d0:	881b      	ldrh	r3, [r3, #0]
 800b1d2:	1c5a      	adds	r2, r3, #1
 800b1d4:	b291      	uxth	r1, r2
 800b1d6:	4a15      	ldr	r2, [pc, #84]	; (800b22c <udp_new_port+0x68>)
 800b1d8:	8011      	strh	r1, [r2, #0]
 800b1da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d103      	bne.n	800b1ea <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800b1e2:	4b12      	ldr	r3, [pc, #72]	; (800b22c <udp_new_port+0x68>)
 800b1e4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800b1e8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b1ea:	4b11      	ldr	r3, [pc, #68]	; (800b230 <udp_new_port+0x6c>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	603b      	str	r3, [r7, #0]
 800b1f0:	e011      	b.n	800b216 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	8a5a      	ldrh	r2, [r3, #18]
 800b1f6:	4b0d      	ldr	r3, [pc, #52]	; (800b22c <udp_new_port+0x68>)
 800b1f8:	881b      	ldrh	r3, [r3, #0]
 800b1fa:	429a      	cmp	r2, r3
 800b1fc:	d108      	bne.n	800b210 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800b1fe:	88fb      	ldrh	r3, [r7, #6]
 800b200:	3301      	adds	r3, #1
 800b202:	80fb      	strh	r3, [r7, #6]
 800b204:	88fb      	ldrh	r3, [r7, #6]
 800b206:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b20a:	d3e0      	bcc.n	800b1ce <udp_new_port+0xa>
        return 0;
 800b20c:	2300      	movs	r3, #0
 800b20e:	e007      	b.n	800b220 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	68db      	ldr	r3, [r3, #12]
 800b214:	603b      	str	r3, [r7, #0]
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d1ea      	bne.n	800b1f2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800b21c:	4b03      	ldr	r3, [pc, #12]	; (800b22c <udp_new_port+0x68>)
 800b21e:	881b      	ldrh	r3, [r3, #0]
}
 800b220:	4618      	mov	r0, r3
 800b222:	370c      	adds	r7, #12
 800b224:	46bd      	mov	sp, r7
 800b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22a:	4770      	bx	lr
 800b22c:	20000010 	.word	0x20000010
 800b230:	200068a4 	.word	0x200068a4

0800b234 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b084      	sub	sp, #16
 800b238:	af00      	add	r7, sp, #0
 800b23a:	60f8      	str	r0, [r7, #12]
 800b23c:	60b9      	str	r1, [r7, #8]
 800b23e:	4613      	mov	r3, r2
 800b240:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d105      	bne.n	800b254 <udp_input_local_match+0x20>
 800b248:	4b27      	ldr	r3, [pc, #156]	; (800b2e8 <udp_input_local_match+0xb4>)
 800b24a:	2287      	movs	r2, #135	; 0x87
 800b24c:	4927      	ldr	r1, [pc, #156]	; (800b2ec <udp_input_local_match+0xb8>)
 800b24e:	4828      	ldr	r0, [pc, #160]	; (800b2f0 <udp_input_local_match+0xbc>)
 800b250:	f003 f81a 	bl	800e288 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d105      	bne.n	800b266 <udp_input_local_match+0x32>
 800b25a:	4b23      	ldr	r3, [pc, #140]	; (800b2e8 <udp_input_local_match+0xb4>)
 800b25c:	2288      	movs	r2, #136	; 0x88
 800b25e:	4925      	ldr	r1, [pc, #148]	; (800b2f4 <udp_input_local_match+0xc0>)
 800b260:	4823      	ldr	r0, [pc, #140]	; (800b2f0 <udp_input_local_match+0xbc>)
 800b262:	f003 f811 	bl	800e288 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	7a1b      	ldrb	r3, [r3, #8]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d00b      	beq.n	800b286 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	7a1a      	ldrb	r2, [r3, #8]
 800b272:	4b21      	ldr	r3, [pc, #132]	; (800b2f8 <udp_input_local_match+0xc4>)
 800b274:	685b      	ldr	r3, [r3, #4]
 800b276:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b27a:	3301      	adds	r3, #1
 800b27c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b27e:	429a      	cmp	r2, r3
 800b280:	d001      	beq.n	800b286 <udp_input_local_match+0x52>
    return 0;
 800b282:	2300      	movs	r3, #0
 800b284:	e02b      	b.n	800b2de <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800b286:	79fb      	ldrb	r3, [r7, #7]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d018      	beq.n	800b2be <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d013      	beq.n	800b2ba <udp_input_local_match+0x86>
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d00f      	beq.n	800b2ba <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b29a:	4b17      	ldr	r3, [pc, #92]	; (800b2f8 <udp_input_local_match+0xc4>)
 800b29c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b29e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2a2:	d00a      	beq.n	800b2ba <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	681a      	ldr	r2, [r3, #0]
 800b2a8:	4b13      	ldr	r3, [pc, #76]	; (800b2f8 <udp_input_local_match+0xc4>)
 800b2aa:	695b      	ldr	r3, [r3, #20]
 800b2ac:	405a      	eors	r2, r3
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	3308      	adds	r3, #8
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d110      	bne.n	800b2dc <udp_input_local_match+0xa8>
          return 1;
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	e00f      	b.n	800b2de <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d009      	beq.n	800b2d8 <udp_input_local_match+0xa4>
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d005      	beq.n	800b2d8 <udp_input_local_match+0xa4>
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	681a      	ldr	r2, [r3, #0]
 800b2d0:	4b09      	ldr	r3, [pc, #36]	; (800b2f8 <udp_input_local_match+0xc4>)
 800b2d2:	695b      	ldr	r3, [r3, #20]
 800b2d4:	429a      	cmp	r2, r3
 800b2d6:	d101      	bne.n	800b2dc <udp_input_local_match+0xa8>
        return 1;
 800b2d8:	2301      	movs	r3, #1
 800b2da:	e000      	b.n	800b2de <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800b2dc:	2300      	movs	r3, #0
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3710      	adds	r7, #16
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}
 800b2e6:	bf00      	nop
 800b2e8:	080110f8 	.word	0x080110f8
 800b2ec:	08011128 	.word	0x08011128
 800b2f0:	0801114c 	.word	0x0801114c
 800b2f4:	08011174 	.word	0x08011174
 800b2f8:	20003348 	.word	0x20003348

0800b2fc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800b2fc:	b590      	push	{r4, r7, lr}
 800b2fe:	b08d      	sub	sp, #52	; 0x34
 800b300:	af02      	add	r7, sp, #8
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800b306:	2300      	movs	r3, #0
 800b308:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d105      	bne.n	800b31c <udp_input+0x20>
 800b310:	4b7c      	ldr	r3, [pc, #496]	; (800b504 <udp_input+0x208>)
 800b312:	22cf      	movs	r2, #207	; 0xcf
 800b314:	497c      	ldr	r1, [pc, #496]	; (800b508 <udp_input+0x20c>)
 800b316:	487d      	ldr	r0, [pc, #500]	; (800b50c <udp_input+0x210>)
 800b318:	f002 ffb6 	bl	800e288 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d105      	bne.n	800b32e <udp_input+0x32>
 800b322:	4b78      	ldr	r3, [pc, #480]	; (800b504 <udp_input+0x208>)
 800b324:	22d0      	movs	r2, #208	; 0xd0
 800b326:	497a      	ldr	r1, [pc, #488]	; (800b510 <udp_input+0x214>)
 800b328:	4878      	ldr	r0, [pc, #480]	; (800b50c <udp_input+0x210>)
 800b32a:	f002 ffad 	bl	800e288 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	895b      	ldrh	r3, [r3, #10]
 800b332:	2b07      	cmp	r3, #7
 800b334:	d803      	bhi.n	800b33e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f7f9 faf8 	bl	800492c <pbuf_free>
    goto end;
 800b33c:	e0de      	b.n	800b4fc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	685b      	ldr	r3, [r3, #4]
 800b342:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800b344:	4b73      	ldr	r3, [pc, #460]	; (800b514 <udp_input+0x218>)
 800b346:	695a      	ldr	r2, [r3, #20]
 800b348:	4b72      	ldr	r3, [pc, #456]	; (800b514 <udp_input+0x218>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	4619      	mov	r1, r3
 800b34e:	4610      	mov	r0, r2
 800b350:	f002 f808 	bl	800d364 <ip4_addr_isbroadcast_u32>
 800b354:	4603      	mov	r3, r0
 800b356:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	881b      	ldrh	r3, [r3, #0]
 800b35c:	b29b      	uxth	r3, r3
 800b35e:	4618      	mov	r0, r3
 800b360:	f7f8 f849 	bl	80033f6 <lwip_htons>
 800b364:	4603      	mov	r3, r0
 800b366:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800b368:	697b      	ldr	r3, [r7, #20]
 800b36a:	885b      	ldrh	r3, [r3, #2]
 800b36c:	b29b      	uxth	r3, r3
 800b36e:	4618      	mov	r0, r3
 800b370:	f7f8 f841 	bl	80033f6 <lwip_htons>
 800b374:	4603      	mov	r3, r0
 800b376:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800b378:	2300      	movs	r3, #0
 800b37a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800b37c:	2300      	movs	r3, #0
 800b37e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800b380:	2300      	movs	r3, #0
 800b382:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b384:	4b64      	ldr	r3, [pc, #400]	; (800b518 <udp_input+0x21c>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	627b      	str	r3, [r7, #36]	; 0x24
 800b38a:	e054      	b.n	800b436 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800b38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b38e:	8a5b      	ldrh	r3, [r3, #18]
 800b390:	89fa      	ldrh	r2, [r7, #14]
 800b392:	429a      	cmp	r2, r3
 800b394:	d14a      	bne.n	800b42c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800b396:	7cfb      	ldrb	r3, [r7, #19]
 800b398:	461a      	mov	r2, r3
 800b39a:	6839      	ldr	r1, [r7, #0]
 800b39c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b39e:	f7ff ff49 	bl	800b234 <udp_input_local_match>
 800b3a2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d041      	beq.n	800b42c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800b3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3aa:	7c1b      	ldrb	r3, [r3, #16]
 800b3ac:	f003 0304 	and.w	r3, r3, #4
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d11d      	bne.n	800b3f0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800b3b4:	69fb      	ldr	r3, [r7, #28]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d102      	bne.n	800b3c0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800b3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3bc:	61fb      	str	r3, [r7, #28]
 800b3be:	e017      	b.n	800b3f0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800b3c0:	7cfb      	ldrb	r3, [r7, #19]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d014      	beq.n	800b3f0 <udp_input+0xf4>
 800b3c6:	4b53      	ldr	r3, [pc, #332]	; (800b514 <udp_input+0x218>)
 800b3c8:	695b      	ldr	r3, [r3, #20]
 800b3ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3ce:	d10f      	bne.n	800b3f0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800b3d0:	69fb      	ldr	r3, [r7, #28]
 800b3d2:	681a      	ldr	r2, [r3, #0]
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	3304      	adds	r3, #4
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	d008      	beq.n	800b3f0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800b3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e0:	681a      	ldr	r2, [r3, #0]
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	3304      	adds	r3, #4
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	429a      	cmp	r2, r3
 800b3ea:	d101      	bne.n	800b3f0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800b3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ee:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800b3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3f2:	8a9b      	ldrh	r3, [r3, #20]
 800b3f4:	8a3a      	ldrh	r2, [r7, #16]
 800b3f6:	429a      	cmp	r2, r3
 800b3f8:	d118      	bne.n	800b42c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3fc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d005      	beq.n	800b40e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800b402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b404:	685a      	ldr	r2, [r3, #4]
 800b406:	4b43      	ldr	r3, [pc, #268]	; (800b514 <udp_input+0x218>)
 800b408:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b40a:	429a      	cmp	r2, r3
 800b40c:	d10e      	bne.n	800b42c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800b40e:	6a3b      	ldr	r3, [r7, #32]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d014      	beq.n	800b43e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800b414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b416:	68da      	ldr	r2, [r3, #12]
 800b418:	6a3b      	ldr	r3, [r7, #32]
 800b41a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800b41c:	4b3e      	ldr	r3, [pc, #248]	; (800b518 <udp_input+0x21c>)
 800b41e:	681a      	ldr	r2, [r3, #0]
 800b420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b422:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800b424:	4a3c      	ldr	r2, [pc, #240]	; (800b518 <udp_input+0x21c>)
 800b426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b428:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800b42a:	e008      	b.n	800b43e <udp_input+0x142>
      }
    }

    prev = pcb;
 800b42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b42e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b432:	68db      	ldr	r3, [r3, #12]
 800b434:	627b      	str	r3, [r7, #36]	; 0x24
 800b436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d1a7      	bne.n	800b38c <udp_input+0x90>
 800b43c:	e000      	b.n	800b440 <udp_input+0x144>
        break;
 800b43e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800b440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b442:	2b00      	cmp	r3, #0
 800b444:	d101      	bne.n	800b44a <udp_input+0x14e>
    pcb = uncon_pcb;
 800b446:	69fb      	ldr	r3, [r7, #28]
 800b448:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800b44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d002      	beq.n	800b456 <udp_input+0x15a>
    for_us = 1;
 800b450:	2301      	movs	r3, #1
 800b452:	76fb      	strb	r3, [r7, #27]
 800b454:	e00a      	b.n	800b46c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	3304      	adds	r3, #4
 800b45a:	681a      	ldr	r2, [r3, #0]
 800b45c:	4b2d      	ldr	r3, [pc, #180]	; (800b514 <udp_input+0x218>)
 800b45e:	695b      	ldr	r3, [r3, #20]
 800b460:	429a      	cmp	r2, r3
 800b462:	bf0c      	ite	eq
 800b464:	2301      	moveq	r3, #1
 800b466:	2300      	movne	r3, #0
 800b468:	b2db      	uxtb	r3, r3
 800b46a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800b46c:	7efb      	ldrb	r3, [r7, #27]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d041      	beq.n	800b4f6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800b472:	2108      	movs	r1, #8
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f7f9 f9d3 	bl	8004820 <pbuf_remove_header>
 800b47a:	4603      	mov	r3, r0
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d00a      	beq.n	800b496 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800b480:	4b20      	ldr	r3, [pc, #128]	; (800b504 <udp_input+0x208>)
 800b482:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800b486:	4925      	ldr	r1, [pc, #148]	; (800b51c <udp_input+0x220>)
 800b488:	4820      	ldr	r0, [pc, #128]	; (800b50c <udp_input+0x210>)
 800b48a:	f002 fefd 	bl	800e288 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f7f9 fa4c 	bl	800492c <pbuf_free>
      goto end;
 800b494:	e032      	b.n	800b4fc <udp_input+0x200>
    }

    if (pcb != NULL) {
 800b496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d012      	beq.n	800b4c2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800b49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b49e:	699b      	ldr	r3, [r3, #24]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d00a      	beq.n	800b4ba <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800b4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a6:	699c      	ldr	r4, [r3, #24]
 800b4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4aa:	69d8      	ldr	r0, [r3, #28]
 800b4ac:	8a3b      	ldrh	r3, [r7, #16]
 800b4ae:	9300      	str	r3, [sp, #0]
 800b4b0:	4b1b      	ldr	r3, [pc, #108]	; (800b520 <udp_input+0x224>)
 800b4b2:	687a      	ldr	r2, [r7, #4]
 800b4b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b4b6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800b4b8:	e021      	b.n	800b4fe <udp_input+0x202>
        pbuf_free(p);
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f7f9 fa36 	bl	800492c <pbuf_free>
        goto end;
 800b4c0:	e01c      	b.n	800b4fc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800b4c2:	7cfb      	ldrb	r3, [r7, #19]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d112      	bne.n	800b4ee <udp_input+0x1f2>
 800b4c8:	4b12      	ldr	r3, [pc, #72]	; (800b514 <udp_input+0x218>)
 800b4ca:	695b      	ldr	r3, [r3, #20]
 800b4cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b4d0:	2be0      	cmp	r3, #224	; 0xe0
 800b4d2:	d00c      	beq.n	800b4ee <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800b4d4:	4b0f      	ldr	r3, [pc, #60]	; (800b514 <udp_input+0x218>)
 800b4d6:	899b      	ldrh	r3, [r3, #12]
 800b4d8:	3308      	adds	r3, #8
 800b4da:	b29b      	uxth	r3, r3
 800b4dc:	b21b      	sxth	r3, r3
 800b4de:	4619      	mov	r1, r3
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f7f9 fa10 	bl	8004906 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800b4e6:	2103      	movs	r1, #3
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f001 fc1d 	bl	800cd28 <icmp_dest_unreach>
      pbuf_free(p);
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f7f9 fa1c 	bl	800492c <pbuf_free>
  return;
 800b4f4:	e003      	b.n	800b4fe <udp_input+0x202>
    pbuf_free(p);
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f7f9 fa18 	bl	800492c <pbuf_free>
  return;
 800b4fc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800b4fe:	372c      	adds	r7, #44	; 0x2c
 800b500:	46bd      	mov	sp, r7
 800b502:	bd90      	pop	{r4, r7, pc}
 800b504:	080110f8 	.word	0x080110f8
 800b508:	0801119c 	.word	0x0801119c
 800b50c:	0801114c 	.word	0x0801114c
 800b510:	080111b4 	.word	0x080111b4
 800b514:	20003348 	.word	0x20003348
 800b518:	200068a4 	.word	0x200068a4
 800b51c:	080111d0 	.word	0x080111d0
 800b520:	20003358 	.word	0x20003358

0800b524 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b082      	sub	sp, #8
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
 800b52c:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d109      	bne.n	800b548 <udp_send+0x24>
 800b534:	4b11      	ldr	r3, [pc, #68]	; (800b57c <udp_send+0x58>)
 800b536:	f240 12d5 	movw	r2, #469	; 0x1d5
 800b53a:	4911      	ldr	r1, [pc, #68]	; (800b580 <udp_send+0x5c>)
 800b53c:	4811      	ldr	r0, [pc, #68]	; (800b584 <udp_send+0x60>)
 800b53e:	f002 fea3 	bl	800e288 <iprintf>
 800b542:	f06f 030f 	mvn.w	r3, #15
 800b546:	e015      	b.n	800b574 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d109      	bne.n	800b562 <udp_send+0x3e>
 800b54e:	4b0b      	ldr	r3, [pc, #44]	; (800b57c <udp_send+0x58>)
 800b550:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800b554:	490c      	ldr	r1, [pc, #48]	; (800b588 <udp_send+0x64>)
 800b556:	480b      	ldr	r0, [pc, #44]	; (800b584 <udp_send+0x60>)
 800b558:	f002 fe96 	bl	800e288 <iprintf>
 800b55c:	f06f 030f 	mvn.w	r3, #15
 800b560:	e008      	b.n	800b574 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	1d1a      	adds	r2, r3, #4
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	8a9b      	ldrh	r3, [r3, #20]
 800b56a:	6839      	ldr	r1, [r7, #0]
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f000 f80d 	bl	800b58c <udp_sendto>
 800b572:	4603      	mov	r3, r0
}
 800b574:	4618      	mov	r0, r3
 800b576:	3708      	adds	r7, #8
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}
 800b57c:	080110f8 	.word	0x080110f8
 800b580:	080111ec 	.word	0x080111ec
 800b584:	0801114c 	.word	0x0801114c
 800b588:	08011204 	.word	0x08011204

0800b58c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b088      	sub	sp, #32
 800b590:	af02      	add	r7, sp, #8
 800b592:	60f8      	str	r0, [r7, #12]
 800b594:	60b9      	str	r1, [r7, #8]
 800b596:	607a      	str	r2, [r7, #4]
 800b598:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d109      	bne.n	800b5b4 <udp_sendto+0x28>
 800b5a0:	4b23      	ldr	r3, [pc, #140]	; (800b630 <udp_sendto+0xa4>)
 800b5a2:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b5a6:	4923      	ldr	r1, [pc, #140]	; (800b634 <udp_sendto+0xa8>)
 800b5a8:	4823      	ldr	r0, [pc, #140]	; (800b638 <udp_sendto+0xac>)
 800b5aa:	f002 fe6d 	bl	800e288 <iprintf>
 800b5ae:	f06f 030f 	mvn.w	r3, #15
 800b5b2:	e038      	b.n	800b626 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d109      	bne.n	800b5ce <udp_sendto+0x42>
 800b5ba:	4b1d      	ldr	r3, [pc, #116]	; (800b630 <udp_sendto+0xa4>)
 800b5bc:	f240 2219 	movw	r2, #537	; 0x219
 800b5c0:	491e      	ldr	r1, [pc, #120]	; (800b63c <udp_sendto+0xb0>)
 800b5c2:	481d      	ldr	r0, [pc, #116]	; (800b638 <udp_sendto+0xac>)
 800b5c4:	f002 fe60 	bl	800e288 <iprintf>
 800b5c8:	f06f 030f 	mvn.w	r3, #15
 800b5cc:	e02b      	b.n	800b626 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d109      	bne.n	800b5e8 <udp_sendto+0x5c>
 800b5d4:	4b16      	ldr	r3, [pc, #88]	; (800b630 <udp_sendto+0xa4>)
 800b5d6:	f240 221a 	movw	r2, #538	; 0x21a
 800b5da:	4919      	ldr	r1, [pc, #100]	; (800b640 <udp_sendto+0xb4>)
 800b5dc:	4816      	ldr	r0, [pc, #88]	; (800b638 <udp_sendto+0xac>)
 800b5de:	f002 fe53 	bl	800e288 <iprintf>
 800b5e2:	f06f 030f 	mvn.w	r3, #15
 800b5e6:	e01e      	b.n	800b626 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	7a1b      	ldrb	r3, [r3, #8]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d006      	beq.n	800b5fe <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	7a1b      	ldrb	r3, [r3, #8]
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f7f8 fe3d 	bl	8004274 <netif_get_by_index>
 800b5fa:	6178      	str	r0, [r7, #20]
 800b5fc:	e003      	b.n	800b606 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f001 fc1c 	bl	800ce3c <ip4_route>
 800b604:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800b606:	697b      	ldr	r3, [r7, #20]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d102      	bne.n	800b612 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800b60c:	f06f 0303 	mvn.w	r3, #3
 800b610:	e009      	b.n	800b626 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800b612:	887a      	ldrh	r2, [r7, #2]
 800b614:	697b      	ldr	r3, [r7, #20]
 800b616:	9300      	str	r3, [sp, #0]
 800b618:	4613      	mov	r3, r2
 800b61a:	687a      	ldr	r2, [r7, #4]
 800b61c:	68b9      	ldr	r1, [r7, #8]
 800b61e:	68f8      	ldr	r0, [r7, #12]
 800b620:	f000 f810 	bl	800b644 <udp_sendto_if>
 800b624:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800b626:	4618      	mov	r0, r3
 800b628:	3718      	adds	r7, #24
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}
 800b62e:	bf00      	nop
 800b630:	080110f8 	.word	0x080110f8
 800b634:	0801121c 	.word	0x0801121c
 800b638:	0801114c 	.word	0x0801114c
 800b63c:	08011234 	.word	0x08011234
 800b640:	08011250 	.word	0x08011250

0800b644 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b088      	sub	sp, #32
 800b648:	af02      	add	r7, sp, #8
 800b64a:	60f8      	str	r0, [r7, #12]
 800b64c:	60b9      	str	r1, [r7, #8]
 800b64e:	607a      	str	r2, [r7, #4]
 800b650:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d109      	bne.n	800b66c <udp_sendto_if+0x28>
 800b658:	4b2e      	ldr	r3, [pc, #184]	; (800b714 <udp_sendto_if+0xd0>)
 800b65a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b65e:	492e      	ldr	r1, [pc, #184]	; (800b718 <udp_sendto_if+0xd4>)
 800b660:	482e      	ldr	r0, [pc, #184]	; (800b71c <udp_sendto_if+0xd8>)
 800b662:	f002 fe11 	bl	800e288 <iprintf>
 800b666:	f06f 030f 	mvn.w	r3, #15
 800b66a:	e04f      	b.n	800b70c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d109      	bne.n	800b686 <udp_sendto_if+0x42>
 800b672:	4b28      	ldr	r3, [pc, #160]	; (800b714 <udp_sendto_if+0xd0>)
 800b674:	f240 2281 	movw	r2, #641	; 0x281
 800b678:	4929      	ldr	r1, [pc, #164]	; (800b720 <udp_sendto_if+0xdc>)
 800b67a:	4828      	ldr	r0, [pc, #160]	; (800b71c <udp_sendto_if+0xd8>)
 800b67c:	f002 fe04 	bl	800e288 <iprintf>
 800b680:	f06f 030f 	mvn.w	r3, #15
 800b684:	e042      	b.n	800b70c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d109      	bne.n	800b6a0 <udp_sendto_if+0x5c>
 800b68c:	4b21      	ldr	r3, [pc, #132]	; (800b714 <udp_sendto_if+0xd0>)
 800b68e:	f240 2282 	movw	r2, #642	; 0x282
 800b692:	4924      	ldr	r1, [pc, #144]	; (800b724 <udp_sendto_if+0xe0>)
 800b694:	4821      	ldr	r0, [pc, #132]	; (800b71c <udp_sendto_if+0xd8>)
 800b696:	f002 fdf7 	bl	800e288 <iprintf>
 800b69a:	f06f 030f 	mvn.w	r3, #15
 800b69e:	e035      	b.n	800b70c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800b6a0:	6a3b      	ldr	r3, [r7, #32]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d109      	bne.n	800b6ba <udp_sendto_if+0x76>
 800b6a6:	4b1b      	ldr	r3, [pc, #108]	; (800b714 <udp_sendto_if+0xd0>)
 800b6a8:	f240 2283 	movw	r2, #643	; 0x283
 800b6ac:	491e      	ldr	r1, [pc, #120]	; (800b728 <udp_sendto_if+0xe4>)
 800b6ae:	481b      	ldr	r0, [pc, #108]	; (800b71c <udp_sendto_if+0xd8>)
 800b6b0:	f002 fdea 	bl	800e288 <iprintf>
 800b6b4:	f06f 030f 	mvn.w	r3, #15
 800b6b8:	e028      	b.n	800b70c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d009      	beq.n	800b6d4 <udp_sendto_if+0x90>
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d005      	beq.n	800b6d4 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b6d0:	2be0      	cmp	r3, #224	; 0xe0
 800b6d2:	d103      	bne.n	800b6dc <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800b6d4:	6a3b      	ldr	r3, [r7, #32]
 800b6d6:	3304      	adds	r3, #4
 800b6d8:	617b      	str	r3, [r7, #20]
 800b6da:	e00b      	b.n	800b6f4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	681a      	ldr	r2, [r3, #0]
 800b6e0:	6a3b      	ldr	r3, [r7, #32]
 800b6e2:	3304      	adds	r3, #4
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	429a      	cmp	r2, r3
 800b6e8:	d002      	beq.n	800b6f0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800b6ea:	f06f 0303 	mvn.w	r3, #3
 800b6ee:	e00d      	b.n	800b70c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800b6f4:	887a      	ldrh	r2, [r7, #2]
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	9301      	str	r3, [sp, #4]
 800b6fa:	6a3b      	ldr	r3, [r7, #32]
 800b6fc:	9300      	str	r3, [sp, #0]
 800b6fe:	4613      	mov	r3, r2
 800b700:	687a      	ldr	r2, [r7, #4]
 800b702:	68b9      	ldr	r1, [r7, #8]
 800b704:	68f8      	ldr	r0, [r7, #12]
 800b706:	f000 f811 	bl	800b72c <udp_sendto_if_src>
 800b70a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3718      	adds	r7, #24
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}
 800b714:	080110f8 	.word	0x080110f8
 800b718:	0801126c 	.word	0x0801126c
 800b71c:	0801114c 	.word	0x0801114c
 800b720:	08011288 	.word	0x08011288
 800b724:	080112a4 	.word	0x080112a4
 800b728:	080112c4 	.word	0x080112c4

0800b72c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b08c      	sub	sp, #48	; 0x30
 800b730:	af04      	add	r7, sp, #16
 800b732:	60f8      	str	r0, [r7, #12]
 800b734:	60b9      	str	r1, [r7, #8]
 800b736:	607a      	str	r2, [r7, #4]
 800b738:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d109      	bne.n	800b754 <udp_sendto_if_src+0x28>
 800b740:	4b65      	ldr	r3, [pc, #404]	; (800b8d8 <udp_sendto_if_src+0x1ac>)
 800b742:	f240 22d1 	movw	r2, #721	; 0x2d1
 800b746:	4965      	ldr	r1, [pc, #404]	; (800b8dc <udp_sendto_if_src+0x1b0>)
 800b748:	4865      	ldr	r0, [pc, #404]	; (800b8e0 <udp_sendto_if_src+0x1b4>)
 800b74a:	f002 fd9d 	bl	800e288 <iprintf>
 800b74e:	f06f 030f 	mvn.w	r3, #15
 800b752:	e0bc      	b.n	800b8ce <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d109      	bne.n	800b76e <udp_sendto_if_src+0x42>
 800b75a:	4b5f      	ldr	r3, [pc, #380]	; (800b8d8 <udp_sendto_if_src+0x1ac>)
 800b75c:	f240 22d2 	movw	r2, #722	; 0x2d2
 800b760:	4960      	ldr	r1, [pc, #384]	; (800b8e4 <udp_sendto_if_src+0x1b8>)
 800b762:	485f      	ldr	r0, [pc, #380]	; (800b8e0 <udp_sendto_if_src+0x1b4>)
 800b764:	f002 fd90 	bl	800e288 <iprintf>
 800b768:	f06f 030f 	mvn.w	r3, #15
 800b76c:	e0af      	b.n	800b8ce <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d109      	bne.n	800b788 <udp_sendto_if_src+0x5c>
 800b774:	4b58      	ldr	r3, [pc, #352]	; (800b8d8 <udp_sendto_if_src+0x1ac>)
 800b776:	f240 22d3 	movw	r2, #723	; 0x2d3
 800b77a:	495b      	ldr	r1, [pc, #364]	; (800b8e8 <udp_sendto_if_src+0x1bc>)
 800b77c:	4858      	ldr	r0, [pc, #352]	; (800b8e0 <udp_sendto_if_src+0x1b4>)
 800b77e:	f002 fd83 	bl	800e288 <iprintf>
 800b782:	f06f 030f 	mvn.w	r3, #15
 800b786:	e0a2      	b.n	800b8ce <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800b788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d109      	bne.n	800b7a2 <udp_sendto_if_src+0x76>
 800b78e:	4b52      	ldr	r3, [pc, #328]	; (800b8d8 <udp_sendto_if_src+0x1ac>)
 800b790:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800b794:	4955      	ldr	r1, [pc, #340]	; (800b8ec <udp_sendto_if_src+0x1c0>)
 800b796:	4852      	ldr	r0, [pc, #328]	; (800b8e0 <udp_sendto_if_src+0x1b4>)
 800b798:	f002 fd76 	bl	800e288 <iprintf>
 800b79c:	f06f 030f 	mvn.w	r3, #15
 800b7a0:	e095      	b.n	800b8ce <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800b7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d109      	bne.n	800b7bc <udp_sendto_if_src+0x90>
 800b7a8:	4b4b      	ldr	r3, [pc, #300]	; (800b8d8 <udp_sendto_if_src+0x1ac>)
 800b7aa:	f240 22d5 	movw	r2, #725	; 0x2d5
 800b7ae:	4950      	ldr	r1, [pc, #320]	; (800b8f0 <udp_sendto_if_src+0x1c4>)
 800b7b0:	484b      	ldr	r0, [pc, #300]	; (800b8e0 <udp_sendto_if_src+0x1b4>)
 800b7b2:	f002 fd69 	bl	800e288 <iprintf>
 800b7b6:	f06f 030f 	mvn.w	r3, #15
 800b7ba:	e088      	b.n	800b8ce <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	8a5b      	ldrh	r3, [r3, #18]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d10f      	bne.n	800b7e4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800b7c4:	68f9      	ldr	r1, [r7, #12]
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	8a5b      	ldrh	r3, [r3, #18]
 800b7ca:	461a      	mov	r2, r3
 800b7cc:	68f8      	ldr	r0, [r7, #12]
 800b7ce:	f000 f893 	bl	800b8f8 <udp_bind>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800b7d6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d002      	beq.n	800b7e4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800b7de:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b7e2:	e074      	b.n	800b8ce <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	891b      	ldrh	r3, [r3, #8]
 800b7e8:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800b7ec:	4293      	cmp	r3, r2
 800b7ee:	d902      	bls.n	800b7f6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800b7f0:	f04f 33ff 	mov.w	r3, #4294967295
 800b7f4:	e06b      	b.n	800b8ce <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800b7f6:	2108      	movs	r1, #8
 800b7f8:	68b8      	ldr	r0, [r7, #8]
 800b7fa:	f7f9 f801 	bl	8004800 <pbuf_add_header>
 800b7fe:	4603      	mov	r3, r0
 800b800:	2b00      	cmp	r3, #0
 800b802:	d015      	beq.n	800b830 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800b804:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b808:	2108      	movs	r1, #8
 800b80a:	2022      	movs	r0, #34	; 0x22
 800b80c:	f7f8 fdae 	bl	800436c <pbuf_alloc>
 800b810:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800b812:	69fb      	ldr	r3, [r7, #28]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d102      	bne.n	800b81e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800b818:	f04f 33ff 	mov.w	r3, #4294967295
 800b81c:	e057      	b.n	800b8ce <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	891b      	ldrh	r3, [r3, #8]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d006      	beq.n	800b834 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800b826:	68b9      	ldr	r1, [r7, #8]
 800b828:	69f8      	ldr	r0, [r7, #28]
 800b82a:	f7f9 f997 	bl	8004b5c <pbuf_chain>
 800b82e:	e001      	b.n	800b834 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800b834:	69fb      	ldr	r3, [r7, #28]
 800b836:	895b      	ldrh	r3, [r3, #10]
 800b838:	2b07      	cmp	r3, #7
 800b83a:	d806      	bhi.n	800b84a <udp_sendto_if_src+0x11e>
 800b83c:	4b26      	ldr	r3, [pc, #152]	; (800b8d8 <udp_sendto_if_src+0x1ac>)
 800b83e:	f240 320e 	movw	r2, #782	; 0x30e
 800b842:	492c      	ldr	r1, [pc, #176]	; (800b8f4 <udp_sendto_if_src+0x1c8>)
 800b844:	4826      	ldr	r0, [pc, #152]	; (800b8e0 <udp_sendto_if_src+0x1b4>)
 800b846:	f002 fd1f 	bl	800e288 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800b84a:	69fb      	ldr	r3, [r7, #28]
 800b84c:	685b      	ldr	r3, [r3, #4]
 800b84e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	8a5b      	ldrh	r3, [r3, #18]
 800b854:	4618      	mov	r0, r3
 800b856:	f7f7 fdce 	bl	80033f6 <lwip_htons>
 800b85a:	4603      	mov	r3, r0
 800b85c:	461a      	mov	r2, r3
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800b862:	887b      	ldrh	r3, [r7, #2]
 800b864:	4618      	mov	r0, r3
 800b866:	f7f7 fdc6 	bl	80033f6 <lwip_htons>
 800b86a:	4603      	mov	r3, r0
 800b86c:	461a      	mov	r2, r3
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	2200      	movs	r2, #0
 800b876:	719a      	strb	r2, [r3, #6]
 800b878:	2200      	movs	r2, #0
 800b87a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800b87c:	69fb      	ldr	r3, [r7, #28]
 800b87e:	891b      	ldrh	r3, [r3, #8]
 800b880:	4618      	mov	r0, r3
 800b882:	f7f7 fdb8 	bl	80033f6 <lwip_htons>
 800b886:	4603      	mov	r3, r0
 800b888:	461a      	mov	r2, r3
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800b88e:	2311      	movs	r3, #17
 800b890:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	7adb      	ldrb	r3, [r3, #11]
 800b896:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	7a9b      	ldrb	r3, [r3, #10]
 800b89c:	7cb9      	ldrb	r1, [r7, #18]
 800b89e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8a0:	9202      	str	r2, [sp, #8]
 800b8a2:	7cfa      	ldrb	r2, [r7, #19]
 800b8a4:	9201      	str	r2, [sp, #4]
 800b8a6:	9300      	str	r3, [sp, #0]
 800b8a8:	460b      	mov	r3, r1
 800b8aa:	687a      	ldr	r2, [r7, #4]
 800b8ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b8ae:	69f8      	ldr	r0, [r7, #28]
 800b8b0:	f001 fcaa 	bl	800d208 <ip4_output_if_src>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800b8b8:	69fa      	ldr	r2, [r7, #28]
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	429a      	cmp	r2, r3
 800b8be:	d004      	beq.n	800b8ca <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800b8c0:	69f8      	ldr	r0, [r7, #28]
 800b8c2:	f7f9 f833 	bl	800492c <pbuf_free>
    q = NULL;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800b8ca:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3720      	adds	r7, #32
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	080110f8 	.word	0x080110f8
 800b8dc:	080112e4 	.word	0x080112e4
 800b8e0:	0801114c 	.word	0x0801114c
 800b8e4:	08011304 	.word	0x08011304
 800b8e8:	08011324 	.word	0x08011324
 800b8ec:	08011348 	.word	0x08011348
 800b8f0:	0801136c 	.word	0x0801136c
 800b8f4:	08011390 	.word	0x08011390

0800b8f8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b086      	sub	sp, #24
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	60f8      	str	r0, [r7, #12]
 800b900:	60b9      	str	r1, [r7, #8]
 800b902:	4613      	mov	r3, r2
 800b904:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d101      	bne.n	800b910 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800b90c:	4b39      	ldr	r3, [pc, #228]	; (800b9f4 <udp_bind+0xfc>)
 800b90e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d109      	bne.n	800b92a <udp_bind+0x32>
 800b916:	4b38      	ldr	r3, [pc, #224]	; (800b9f8 <udp_bind+0x100>)
 800b918:	f240 32b7 	movw	r2, #951	; 0x3b7
 800b91c:	4937      	ldr	r1, [pc, #220]	; (800b9fc <udp_bind+0x104>)
 800b91e:	4838      	ldr	r0, [pc, #224]	; (800ba00 <udp_bind+0x108>)
 800b920:	f002 fcb2 	bl	800e288 <iprintf>
 800b924:	f06f 030f 	mvn.w	r3, #15
 800b928:	e060      	b.n	800b9ec <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800b92a:	2300      	movs	r3, #0
 800b92c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b92e:	4b35      	ldr	r3, [pc, #212]	; (800ba04 <udp_bind+0x10c>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	617b      	str	r3, [r7, #20]
 800b934:	e009      	b.n	800b94a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800b936:	68fa      	ldr	r2, [r7, #12]
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	429a      	cmp	r2, r3
 800b93c:	d102      	bne.n	800b944 <udp_bind+0x4c>
      rebind = 1;
 800b93e:	2301      	movs	r3, #1
 800b940:	74fb      	strb	r3, [r7, #19]
      break;
 800b942:	e005      	b.n	800b950 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b944:	697b      	ldr	r3, [r7, #20]
 800b946:	68db      	ldr	r3, [r3, #12]
 800b948:	617b      	str	r3, [r7, #20]
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d1f2      	bne.n	800b936 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800b950:	88fb      	ldrh	r3, [r7, #6]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d109      	bne.n	800b96a <udp_bind+0x72>
    port = udp_new_port();
 800b956:	f7ff fc35 	bl	800b1c4 <udp_new_port>
 800b95a:	4603      	mov	r3, r0
 800b95c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800b95e:	88fb      	ldrh	r3, [r7, #6]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d12c      	bne.n	800b9be <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800b964:	f06f 0307 	mvn.w	r3, #7
 800b968:	e040      	b.n	800b9ec <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b96a:	4b26      	ldr	r3, [pc, #152]	; (800ba04 <udp_bind+0x10c>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	617b      	str	r3, [r7, #20]
 800b970:	e022      	b.n	800b9b8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800b972:	68fa      	ldr	r2, [r7, #12]
 800b974:	697b      	ldr	r3, [r7, #20]
 800b976:	429a      	cmp	r2, r3
 800b978:	d01b      	beq.n	800b9b2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	8a5b      	ldrh	r3, [r3, #18]
 800b97e:	88fa      	ldrh	r2, [r7, #6]
 800b980:	429a      	cmp	r2, r3
 800b982:	d116      	bne.n	800b9b2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	681a      	ldr	r2, [r3, #0]
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800b98c:	429a      	cmp	r2, r3
 800b98e:	d00d      	beq.n	800b9ac <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d00a      	beq.n	800b9ac <udp_bind+0xb4>
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d006      	beq.n	800b9ac <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800b99e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d003      	beq.n	800b9ac <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d102      	bne.n	800b9b2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800b9ac:	f06f 0307 	mvn.w	r3, #7
 800b9b0:	e01c      	b.n	800b9ec <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	68db      	ldr	r3, [r3, #12]
 800b9b6:	617b      	str	r3, [r7, #20]
 800b9b8:	697b      	ldr	r3, [r7, #20]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d1d9      	bne.n	800b972 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d002      	beq.n	800b9ca <udp_bind+0xd2>
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	e000      	b.n	800b9cc <udp_bind+0xd4>
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	68fa      	ldr	r2, [r7, #12]
 800b9ce:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	88fa      	ldrh	r2, [r7, #6]
 800b9d4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800b9d6:	7cfb      	ldrb	r3, [r7, #19]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d106      	bne.n	800b9ea <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800b9dc:	4b09      	ldr	r3, [pc, #36]	; (800ba04 <udp_bind+0x10c>)
 800b9de:	681a      	ldr	r2, [r3, #0]
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800b9e4:	4a07      	ldr	r2, [pc, #28]	; (800ba04 <udp_bind+0x10c>)
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800b9ea:	2300      	movs	r3, #0
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3718      	adds	r7, #24
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}
 800b9f4:	08011c00 	.word	0x08011c00
 800b9f8:	080110f8 	.word	0x080110f8
 800b9fc:	080113c0 	.word	0x080113c0
 800ba00:	0801114c 	.word	0x0801114c
 800ba04:	200068a4 	.word	0x200068a4

0800ba08 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b086      	sub	sp, #24
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	60f8      	str	r0, [r7, #12]
 800ba10:	60b9      	str	r1, [r7, #8]
 800ba12:	4613      	mov	r3, r2
 800ba14:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d109      	bne.n	800ba30 <udp_connect+0x28>
 800ba1c:	4b2c      	ldr	r3, [pc, #176]	; (800bad0 <udp_connect+0xc8>)
 800ba1e:	f240 4235 	movw	r2, #1077	; 0x435
 800ba22:	492c      	ldr	r1, [pc, #176]	; (800bad4 <udp_connect+0xcc>)
 800ba24:	482c      	ldr	r0, [pc, #176]	; (800bad8 <udp_connect+0xd0>)
 800ba26:	f002 fc2f 	bl	800e288 <iprintf>
 800ba2a:	f06f 030f 	mvn.w	r3, #15
 800ba2e:	e04b      	b.n	800bac8 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d109      	bne.n	800ba4a <udp_connect+0x42>
 800ba36:	4b26      	ldr	r3, [pc, #152]	; (800bad0 <udp_connect+0xc8>)
 800ba38:	f240 4236 	movw	r2, #1078	; 0x436
 800ba3c:	4927      	ldr	r1, [pc, #156]	; (800badc <udp_connect+0xd4>)
 800ba3e:	4826      	ldr	r0, [pc, #152]	; (800bad8 <udp_connect+0xd0>)
 800ba40:	f002 fc22 	bl	800e288 <iprintf>
 800ba44:	f06f 030f 	mvn.w	r3, #15
 800ba48:	e03e      	b.n	800bac8 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	8a5b      	ldrh	r3, [r3, #18]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d10f      	bne.n	800ba72 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800ba52:	68f9      	ldr	r1, [r7, #12]
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	8a5b      	ldrh	r3, [r3, #18]
 800ba58:	461a      	mov	r2, r3
 800ba5a:	68f8      	ldr	r0, [r7, #12]
 800ba5c:	f7ff ff4c 	bl	800b8f8 <udp_bind>
 800ba60:	4603      	mov	r3, r0
 800ba62:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800ba64:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d002      	beq.n	800ba72 <udp_connect+0x6a>
      return err;
 800ba6c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ba70:	e02a      	b.n	800bac8 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d002      	beq.n	800ba7e <udp_connect+0x76>
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	e000      	b.n	800ba80 <udp_connect+0x78>
 800ba7e:	2300      	movs	r3, #0
 800ba80:	68fa      	ldr	r2, [r7, #12]
 800ba82:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	88fa      	ldrh	r2, [r7, #6]
 800ba88:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	7c1b      	ldrb	r3, [r3, #16]
 800ba8e:	f043 0304 	orr.w	r3, r3, #4
 800ba92:	b2da      	uxtb	r2, r3
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ba98:	4b11      	ldr	r3, [pc, #68]	; (800bae0 <udp_connect+0xd8>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	617b      	str	r3, [r7, #20]
 800ba9e:	e008      	b.n	800bab2 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800baa0:	68fa      	ldr	r2, [r7, #12]
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d101      	bne.n	800baac <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800baa8:	2300      	movs	r3, #0
 800baaa:	e00d      	b.n	800bac8 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800baac:	697b      	ldr	r3, [r7, #20]
 800baae:	68db      	ldr	r3, [r3, #12]
 800bab0:	617b      	str	r3, [r7, #20]
 800bab2:	697b      	ldr	r3, [r7, #20]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d1f3      	bne.n	800baa0 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800bab8:	4b09      	ldr	r3, [pc, #36]	; (800bae0 <udp_connect+0xd8>)
 800baba:	681a      	ldr	r2, [r3, #0]
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800bac0:	4a07      	ldr	r2, [pc, #28]	; (800bae0 <udp_connect+0xd8>)
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800bac6:	2300      	movs	r3, #0
}
 800bac8:	4618      	mov	r0, r3
 800baca:	3718      	adds	r7, #24
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}
 800bad0:	080110f8 	.word	0x080110f8
 800bad4:	080113d8 	.word	0x080113d8
 800bad8:	0801114c 	.word	0x0801114c
 800badc:	080113f4 	.word	0x080113f4
 800bae0:	200068a4 	.word	0x200068a4

0800bae4 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b082      	sub	sp, #8
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d107      	bne.n	800bb02 <udp_disconnect+0x1e>
 800baf2:	4b0d      	ldr	r3, [pc, #52]	; (800bb28 <udp_disconnect+0x44>)
 800baf4:	f240 426a 	movw	r2, #1130	; 0x46a
 800baf8:	490c      	ldr	r1, [pc, #48]	; (800bb2c <udp_disconnect+0x48>)
 800bafa:	480d      	ldr	r0, [pc, #52]	; (800bb30 <udp_disconnect+0x4c>)
 800bafc:	f002 fbc4 	bl	800e288 <iprintf>
 800bb00:	e00f      	b.n	800bb22 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2200      	movs	r2, #0
 800bb06:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2200      	movs	r2, #0
 800bb12:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	7c1b      	ldrb	r3, [r3, #16]
 800bb18:	f023 0304 	bic.w	r3, r3, #4
 800bb1c:	b2da      	uxtb	r2, r3
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	741a      	strb	r2, [r3, #16]
}
 800bb22:	3708      	adds	r7, #8
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bd80      	pop	{r7, pc}
 800bb28:	080110f8 	.word	0x080110f8
 800bb2c:	08011410 	.word	0x08011410
 800bb30:	0801114c 	.word	0x0801114c

0800bb34 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b084      	sub	sp, #16
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	60f8      	str	r0, [r7, #12]
 800bb3c:	60b9      	str	r1, [r7, #8]
 800bb3e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d107      	bne.n	800bb56 <udp_recv+0x22>
 800bb46:	4b08      	ldr	r3, [pc, #32]	; (800bb68 <udp_recv+0x34>)
 800bb48:	f240 428a 	movw	r2, #1162	; 0x48a
 800bb4c:	4907      	ldr	r1, [pc, #28]	; (800bb6c <udp_recv+0x38>)
 800bb4e:	4808      	ldr	r0, [pc, #32]	; (800bb70 <udp_recv+0x3c>)
 800bb50:	f002 fb9a 	bl	800e288 <iprintf>
 800bb54:	e005      	b.n	800bb62 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	68ba      	ldr	r2, [r7, #8]
 800bb5a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	687a      	ldr	r2, [r7, #4]
 800bb60:	61da      	str	r2, [r3, #28]
}
 800bb62:	3710      	adds	r7, #16
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}
 800bb68:	080110f8 	.word	0x080110f8
 800bb6c:	0801142c 	.word	0x0801142c
 800bb70:	0801114c 	.word	0x0801114c

0800bb74 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b084      	sub	sp, #16
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d107      	bne.n	800bb92 <udp_remove+0x1e>
 800bb82:	4b19      	ldr	r3, [pc, #100]	; (800bbe8 <udp_remove+0x74>)
 800bb84:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800bb88:	4918      	ldr	r1, [pc, #96]	; (800bbec <udp_remove+0x78>)
 800bb8a:	4819      	ldr	r0, [pc, #100]	; (800bbf0 <udp_remove+0x7c>)
 800bb8c:	f002 fb7c 	bl	800e288 <iprintf>
 800bb90:	e026      	b.n	800bbe0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800bb92:	4b18      	ldr	r3, [pc, #96]	; (800bbf4 <udp_remove+0x80>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	687a      	ldr	r2, [r7, #4]
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d105      	bne.n	800bba8 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800bb9c:	4b15      	ldr	r3, [pc, #84]	; (800bbf4 <udp_remove+0x80>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	68db      	ldr	r3, [r3, #12]
 800bba2:	4a14      	ldr	r2, [pc, #80]	; (800bbf4 <udp_remove+0x80>)
 800bba4:	6013      	str	r3, [r2, #0]
 800bba6:	e017      	b.n	800bbd8 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800bba8:	4b12      	ldr	r3, [pc, #72]	; (800bbf4 <udp_remove+0x80>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	60fb      	str	r3, [r7, #12]
 800bbae:	e010      	b.n	800bbd2 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	68db      	ldr	r3, [r3, #12]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d009      	beq.n	800bbcc <udp_remove+0x58>
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	68db      	ldr	r3, [r3, #12]
 800bbbc:	687a      	ldr	r2, [r7, #4]
 800bbbe:	429a      	cmp	r2, r3
 800bbc0:	d104      	bne.n	800bbcc <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	68da      	ldr	r2, [r3, #12]
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	60da      	str	r2, [r3, #12]
        break;
 800bbca:	e005      	b.n	800bbd8 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	68db      	ldr	r3, [r3, #12]
 800bbd0:	60fb      	str	r3, [r7, #12]
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d1eb      	bne.n	800bbb0 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800bbd8:	6879      	ldr	r1, [r7, #4]
 800bbda:	2000      	movs	r0, #0
 800bbdc:	f7f8 f8ac 	bl	8003d38 <memp_free>
}
 800bbe0:	3710      	adds	r7, #16
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}
 800bbe6:	bf00      	nop
 800bbe8:	080110f8 	.word	0x080110f8
 800bbec:	08011444 	.word	0x08011444
 800bbf0:	0801114c 	.word	0x0801114c
 800bbf4:	200068a4 	.word	0x200068a4

0800bbf8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b082      	sub	sp, #8
 800bbfc:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800bbfe:	2000      	movs	r0, #0
 800bc00:	f7f8 f84e 	bl	8003ca0 <memp_malloc>
 800bc04:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d007      	beq.n	800bc1c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800bc0c:	2220      	movs	r2, #32
 800bc0e:	2100      	movs	r1, #0
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f002 fb31 	bl	800e278 <memset>
    pcb->ttl = UDP_TTL;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	22ff      	movs	r2, #255	; 0xff
 800bc1a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800bc1c:	687b      	ldr	r3, [r7, #4]
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	3708      	adds	r7, #8
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}
	...

0800bc28 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b085      	sub	sp, #20
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
 800bc30:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d01e      	beq.n	800bc76 <udp_netif_ip_addr_changed+0x4e>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d01a      	beq.n	800bc76 <udp_netif_ip_addr_changed+0x4e>
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d017      	beq.n	800bc76 <udp_netif_ip_addr_changed+0x4e>
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d013      	beq.n	800bc76 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800bc4e:	4b0d      	ldr	r3, [pc, #52]	; (800bc84 <udp_netif_ip_addr_changed+0x5c>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	60fb      	str	r3, [r7, #12]
 800bc54:	e00c      	b.n	800bc70 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681a      	ldr	r2, [r3, #0]
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	d103      	bne.n	800bc6a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	681a      	ldr	r2, [r3, #0]
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	68db      	ldr	r3, [r3, #12]
 800bc6e:	60fb      	str	r3, [r7, #12]
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d1ef      	bne.n	800bc56 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800bc76:	bf00      	nop
 800bc78:	3714      	adds	r7, #20
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc80:	4770      	bx	lr
 800bc82:	bf00      	nop
 800bc84:	200068a4 	.word	0x200068a4

0800bc88 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b082      	sub	sp, #8
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800bc90:	4915      	ldr	r1, [pc, #84]	; (800bce8 <etharp_free_entry+0x60>)
 800bc92:	687a      	ldr	r2, [r7, #4]
 800bc94:	4613      	mov	r3, r2
 800bc96:	005b      	lsls	r3, r3, #1
 800bc98:	4413      	add	r3, r2
 800bc9a:	00db      	lsls	r3, r3, #3
 800bc9c:	440b      	add	r3, r1
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d013      	beq.n	800bccc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800bca4:	4910      	ldr	r1, [pc, #64]	; (800bce8 <etharp_free_entry+0x60>)
 800bca6:	687a      	ldr	r2, [r7, #4]
 800bca8:	4613      	mov	r3, r2
 800bcaa:	005b      	lsls	r3, r3, #1
 800bcac:	4413      	add	r3, r2
 800bcae:	00db      	lsls	r3, r3, #3
 800bcb0:	440b      	add	r3, r1
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f7f8 fe39 	bl	800492c <pbuf_free>
    arp_table[i].q = NULL;
 800bcba:	490b      	ldr	r1, [pc, #44]	; (800bce8 <etharp_free_entry+0x60>)
 800bcbc:	687a      	ldr	r2, [r7, #4]
 800bcbe:	4613      	mov	r3, r2
 800bcc0:	005b      	lsls	r3, r3, #1
 800bcc2:	4413      	add	r3, r2
 800bcc4:	00db      	lsls	r3, r3, #3
 800bcc6:	440b      	add	r3, r1
 800bcc8:	2200      	movs	r2, #0
 800bcca:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800bccc:	4906      	ldr	r1, [pc, #24]	; (800bce8 <etharp_free_entry+0x60>)
 800bcce:	687a      	ldr	r2, [r7, #4]
 800bcd0:	4613      	mov	r3, r2
 800bcd2:	005b      	lsls	r3, r3, #1
 800bcd4:	4413      	add	r3, r2
 800bcd6:	00db      	lsls	r3, r3, #3
 800bcd8:	440b      	add	r3, r1
 800bcda:	3314      	adds	r3, #20
 800bcdc:	2200      	movs	r2, #0
 800bcde:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800bce0:	bf00      	nop
 800bce2:	3708      	adds	r7, #8
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}
 800bce8:	20000110 	.word	0x20000110

0800bcec <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b082      	sub	sp, #8
 800bcf0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	607b      	str	r3, [r7, #4]
 800bcf6:	e096      	b.n	800be26 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800bcf8:	494f      	ldr	r1, [pc, #316]	; (800be38 <etharp_tmr+0x14c>)
 800bcfa:	687a      	ldr	r2, [r7, #4]
 800bcfc:	4613      	mov	r3, r2
 800bcfe:	005b      	lsls	r3, r3, #1
 800bd00:	4413      	add	r3, r2
 800bd02:	00db      	lsls	r3, r3, #3
 800bd04:	440b      	add	r3, r1
 800bd06:	3314      	adds	r3, #20
 800bd08:	781b      	ldrb	r3, [r3, #0]
 800bd0a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800bd0c:	78fb      	ldrb	r3, [r7, #3]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	f000 8086 	beq.w	800be20 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800bd14:	4948      	ldr	r1, [pc, #288]	; (800be38 <etharp_tmr+0x14c>)
 800bd16:	687a      	ldr	r2, [r7, #4]
 800bd18:	4613      	mov	r3, r2
 800bd1a:	005b      	lsls	r3, r3, #1
 800bd1c:	4413      	add	r3, r2
 800bd1e:	00db      	lsls	r3, r3, #3
 800bd20:	440b      	add	r3, r1
 800bd22:	3312      	adds	r3, #18
 800bd24:	881b      	ldrh	r3, [r3, #0]
 800bd26:	3301      	adds	r3, #1
 800bd28:	b298      	uxth	r0, r3
 800bd2a:	4943      	ldr	r1, [pc, #268]	; (800be38 <etharp_tmr+0x14c>)
 800bd2c:	687a      	ldr	r2, [r7, #4]
 800bd2e:	4613      	mov	r3, r2
 800bd30:	005b      	lsls	r3, r3, #1
 800bd32:	4413      	add	r3, r2
 800bd34:	00db      	lsls	r3, r3, #3
 800bd36:	440b      	add	r3, r1
 800bd38:	3312      	adds	r3, #18
 800bd3a:	4602      	mov	r2, r0
 800bd3c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800bd3e:	493e      	ldr	r1, [pc, #248]	; (800be38 <etharp_tmr+0x14c>)
 800bd40:	687a      	ldr	r2, [r7, #4]
 800bd42:	4613      	mov	r3, r2
 800bd44:	005b      	lsls	r3, r3, #1
 800bd46:	4413      	add	r3, r2
 800bd48:	00db      	lsls	r3, r3, #3
 800bd4a:	440b      	add	r3, r1
 800bd4c:	3312      	adds	r3, #18
 800bd4e:	881b      	ldrh	r3, [r3, #0]
 800bd50:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800bd54:	d215      	bcs.n	800bd82 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800bd56:	4938      	ldr	r1, [pc, #224]	; (800be38 <etharp_tmr+0x14c>)
 800bd58:	687a      	ldr	r2, [r7, #4]
 800bd5a:	4613      	mov	r3, r2
 800bd5c:	005b      	lsls	r3, r3, #1
 800bd5e:	4413      	add	r3, r2
 800bd60:	00db      	lsls	r3, r3, #3
 800bd62:	440b      	add	r3, r1
 800bd64:	3314      	adds	r3, #20
 800bd66:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800bd68:	2b01      	cmp	r3, #1
 800bd6a:	d10e      	bne.n	800bd8a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800bd6c:	4932      	ldr	r1, [pc, #200]	; (800be38 <etharp_tmr+0x14c>)
 800bd6e:	687a      	ldr	r2, [r7, #4]
 800bd70:	4613      	mov	r3, r2
 800bd72:	005b      	lsls	r3, r3, #1
 800bd74:	4413      	add	r3, r2
 800bd76:	00db      	lsls	r3, r3, #3
 800bd78:	440b      	add	r3, r1
 800bd7a:	3312      	adds	r3, #18
 800bd7c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800bd7e:	2b04      	cmp	r3, #4
 800bd80:	d903      	bls.n	800bd8a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	f7ff ff80 	bl	800bc88 <etharp_free_entry>
 800bd88:	e04a      	b.n	800be20 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800bd8a:	492b      	ldr	r1, [pc, #172]	; (800be38 <etharp_tmr+0x14c>)
 800bd8c:	687a      	ldr	r2, [r7, #4]
 800bd8e:	4613      	mov	r3, r2
 800bd90:	005b      	lsls	r3, r3, #1
 800bd92:	4413      	add	r3, r2
 800bd94:	00db      	lsls	r3, r3, #3
 800bd96:	440b      	add	r3, r1
 800bd98:	3314      	adds	r3, #20
 800bd9a:	781b      	ldrb	r3, [r3, #0]
 800bd9c:	2b03      	cmp	r3, #3
 800bd9e:	d10a      	bne.n	800bdb6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800bda0:	4925      	ldr	r1, [pc, #148]	; (800be38 <etharp_tmr+0x14c>)
 800bda2:	687a      	ldr	r2, [r7, #4]
 800bda4:	4613      	mov	r3, r2
 800bda6:	005b      	lsls	r3, r3, #1
 800bda8:	4413      	add	r3, r2
 800bdaa:	00db      	lsls	r3, r3, #3
 800bdac:	440b      	add	r3, r1
 800bdae:	3314      	adds	r3, #20
 800bdb0:	2204      	movs	r2, #4
 800bdb2:	701a      	strb	r2, [r3, #0]
 800bdb4:	e034      	b.n	800be20 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800bdb6:	4920      	ldr	r1, [pc, #128]	; (800be38 <etharp_tmr+0x14c>)
 800bdb8:	687a      	ldr	r2, [r7, #4]
 800bdba:	4613      	mov	r3, r2
 800bdbc:	005b      	lsls	r3, r3, #1
 800bdbe:	4413      	add	r3, r2
 800bdc0:	00db      	lsls	r3, r3, #3
 800bdc2:	440b      	add	r3, r1
 800bdc4:	3314      	adds	r3, #20
 800bdc6:	781b      	ldrb	r3, [r3, #0]
 800bdc8:	2b04      	cmp	r3, #4
 800bdca:	d10a      	bne.n	800bde2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800bdcc:	491a      	ldr	r1, [pc, #104]	; (800be38 <etharp_tmr+0x14c>)
 800bdce:	687a      	ldr	r2, [r7, #4]
 800bdd0:	4613      	mov	r3, r2
 800bdd2:	005b      	lsls	r3, r3, #1
 800bdd4:	4413      	add	r3, r2
 800bdd6:	00db      	lsls	r3, r3, #3
 800bdd8:	440b      	add	r3, r1
 800bdda:	3314      	adds	r3, #20
 800bddc:	2202      	movs	r2, #2
 800bdde:	701a      	strb	r2, [r3, #0]
 800bde0:	e01e      	b.n	800be20 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800bde2:	4915      	ldr	r1, [pc, #84]	; (800be38 <etharp_tmr+0x14c>)
 800bde4:	687a      	ldr	r2, [r7, #4]
 800bde6:	4613      	mov	r3, r2
 800bde8:	005b      	lsls	r3, r3, #1
 800bdea:	4413      	add	r3, r2
 800bdec:	00db      	lsls	r3, r3, #3
 800bdee:	440b      	add	r3, r1
 800bdf0:	3314      	adds	r3, #20
 800bdf2:	781b      	ldrb	r3, [r3, #0]
 800bdf4:	2b01      	cmp	r3, #1
 800bdf6:	d113      	bne.n	800be20 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800bdf8:	490f      	ldr	r1, [pc, #60]	; (800be38 <etharp_tmr+0x14c>)
 800bdfa:	687a      	ldr	r2, [r7, #4]
 800bdfc:	4613      	mov	r3, r2
 800bdfe:	005b      	lsls	r3, r3, #1
 800be00:	4413      	add	r3, r2
 800be02:	00db      	lsls	r3, r3, #3
 800be04:	440b      	add	r3, r1
 800be06:	3308      	adds	r3, #8
 800be08:	6818      	ldr	r0, [r3, #0]
 800be0a:	687a      	ldr	r2, [r7, #4]
 800be0c:	4613      	mov	r3, r2
 800be0e:	005b      	lsls	r3, r3, #1
 800be10:	4413      	add	r3, r2
 800be12:	00db      	lsls	r3, r3, #3
 800be14:	4a08      	ldr	r2, [pc, #32]	; (800be38 <etharp_tmr+0x14c>)
 800be16:	4413      	add	r3, r2
 800be18:	3304      	adds	r3, #4
 800be1a:	4619      	mov	r1, r3
 800be1c:	f000 fe6e 	bl	800cafc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	3301      	adds	r3, #1
 800be24:	607b      	str	r3, [r7, #4]
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2b09      	cmp	r3, #9
 800be2a:	f77f af65 	ble.w	800bcf8 <etharp_tmr+0xc>
      }
    }
  }
}
 800be2e:	bf00      	nop
 800be30:	3708      	adds	r7, #8
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}
 800be36:	bf00      	nop
 800be38:	20000110 	.word	0x20000110

0800be3c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b08a      	sub	sp, #40	; 0x28
 800be40:	af00      	add	r7, sp, #0
 800be42:	60f8      	str	r0, [r7, #12]
 800be44:	460b      	mov	r3, r1
 800be46:	607a      	str	r2, [r7, #4]
 800be48:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800be4a:	230a      	movs	r3, #10
 800be4c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800be4e:	230a      	movs	r3, #10
 800be50:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800be52:	230a      	movs	r3, #10
 800be54:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800be56:	2300      	movs	r3, #0
 800be58:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800be5a:	230a      	movs	r3, #10
 800be5c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800be5e:	2300      	movs	r3, #0
 800be60:	83bb      	strh	r3, [r7, #28]
 800be62:	2300      	movs	r3, #0
 800be64:	837b      	strh	r3, [r7, #26]
 800be66:	2300      	movs	r3, #0
 800be68:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800be6a:	2300      	movs	r3, #0
 800be6c:	843b      	strh	r3, [r7, #32]
 800be6e:	e0ae      	b.n	800bfce <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800be70:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800be74:	49a6      	ldr	r1, [pc, #664]	; (800c110 <etharp_find_entry+0x2d4>)
 800be76:	4613      	mov	r3, r2
 800be78:	005b      	lsls	r3, r3, #1
 800be7a:	4413      	add	r3, r2
 800be7c:	00db      	lsls	r3, r3, #3
 800be7e:	440b      	add	r3, r1
 800be80:	3314      	adds	r3, #20
 800be82:	781b      	ldrb	r3, [r3, #0]
 800be84:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800be86:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800be8a:	2b0a      	cmp	r3, #10
 800be8c:	d105      	bne.n	800be9a <etharp_find_entry+0x5e>
 800be8e:	7dfb      	ldrb	r3, [r7, #23]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d102      	bne.n	800be9a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800be94:	8c3b      	ldrh	r3, [r7, #32]
 800be96:	847b      	strh	r3, [r7, #34]	; 0x22
 800be98:	e095      	b.n	800bfc6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800be9a:	7dfb      	ldrb	r3, [r7, #23]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	f000 8092 	beq.w	800bfc6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800bea2:	7dfb      	ldrb	r3, [r7, #23]
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	d009      	beq.n	800bebc <etharp_find_entry+0x80>
 800bea8:	7dfb      	ldrb	r3, [r7, #23]
 800beaa:	2b01      	cmp	r3, #1
 800beac:	d806      	bhi.n	800bebc <etharp_find_entry+0x80>
 800beae:	4b99      	ldr	r3, [pc, #612]	; (800c114 <etharp_find_entry+0x2d8>)
 800beb0:	f44f 7292 	mov.w	r2, #292	; 0x124
 800beb4:	4998      	ldr	r1, [pc, #608]	; (800c118 <etharp_find_entry+0x2dc>)
 800beb6:	4899      	ldr	r0, [pc, #612]	; (800c11c <etharp_find_entry+0x2e0>)
 800beb8:	f002 f9e6 	bl	800e288 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d020      	beq.n	800bf04 <etharp_find_entry+0xc8>
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	6819      	ldr	r1, [r3, #0]
 800bec6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800beca:	4891      	ldr	r0, [pc, #580]	; (800c110 <etharp_find_entry+0x2d4>)
 800becc:	4613      	mov	r3, r2
 800bece:	005b      	lsls	r3, r3, #1
 800bed0:	4413      	add	r3, r2
 800bed2:	00db      	lsls	r3, r3, #3
 800bed4:	4403      	add	r3, r0
 800bed6:	3304      	adds	r3, #4
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	4299      	cmp	r1, r3
 800bedc:	d112      	bne.n	800bf04 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d00c      	beq.n	800befe <etharp_find_entry+0xc2>
 800bee4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bee8:	4989      	ldr	r1, [pc, #548]	; (800c110 <etharp_find_entry+0x2d4>)
 800beea:	4613      	mov	r3, r2
 800beec:	005b      	lsls	r3, r3, #1
 800beee:	4413      	add	r3, r2
 800bef0:	00db      	lsls	r3, r3, #3
 800bef2:	440b      	add	r3, r1
 800bef4:	3308      	adds	r3, #8
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	687a      	ldr	r2, [r7, #4]
 800befa:	429a      	cmp	r2, r3
 800befc:	d102      	bne.n	800bf04 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800befe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bf02:	e100      	b.n	800c106 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800bf04:	7dfb      	ldrb	r3, [r7, #23]
 800bf06:	2b01      	cmp	r3, #1
 800bf08:	d140      	bne.n	800bf8c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800bf0a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bf0e:	4980      	ldr	r1, [pc, #512]	; (800c110 <etharp_find_entry+0x2d4>)
 800bf10:	4613      	mov	r3, r2
 800bf12:	005b      	lsls	r3, r3, #1
 800bf14:	4413      	add	r3, r2
 800bf16:	00db      	lsls	r3, r3, #3
 800bf18:	440b      	add	r3, r1
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d01a      	beq.n	800bf56 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800bf20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bf24:	497a      	ldr	r1, [pc, #488]	; (800c110 <etharp_find_entry+0x2d4>)
 800bf26:	4613      	mov	r3, r2
 800bf28:	005b      	lsls	r3, r3, #1
 800bf2a:	4413      	add	r3, r2
 800bf2c:	00db      	lsls	r3, r3, #3
 800bf2e:	440b      	add	r3, r1
 800bf30:	3312      	adds	r3, #18
 800bf32:	881b      	ldrh	r3, [r3, #0]
 800bf34:	8bba      	ldrh	r2, [r7, #28]
 800bf36:	429a      	cmp	r2, r3
 800bf38:	d845      	bhi.n	800bfc6 <etharp_find_entry+0x18a>
            old_queue = i;
 800bf3a:	8c3b      	ldrh	r3, [r7, #32]
 800bf3c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800bf3e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bf42:	4973      	ldr	r1, [pc, #460]	; (800c110 <etharp_find_entry+0x2d4>)
 800bf44:	4613      	mov	r3, r2
 800bf46:	005b      	lsls	r3, r3, #1
 800bf48:	4413      	add	r3, r2
 800bf4a:	00db      	lsls	r3, r3, #3
 800bf4c:	440b      	add	r3, r1
 800bf4e:	3312      	adds	r3, #18
 800bf50:	881b      	ldrh	r3, [r3, #0]
 800bf52:	83bb      	strh	r3, [r7, #28]
 800bf54:	e037      	b.n	800bfc6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800bf56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bf5a:	496d      	ldr	r1, [pc, #436]	; (800c110 <etharp_find_entry+0x2d4>)
 800bf5c:	4613      	mov	r3, r2
 800bf5e:	005b      	lsls	r3, r3, #1
 800bf60:	4413      	add	r3, r2
 800bf62:	00db      	lsls	r3, r3, #3
 800bf64:	440b      	add	r3, r1
 800bf66:	3312      	adds	r3, #18
 800bf68:	881b      	ldrh	r3, [r3, #0]
 800bf6a:	8b7a      	ldrh	r2, [r7, #26]
 800bf6c:	429a      	cmp	r2, r3
 800bf6e:	d82a      	bhi.n	800bfc6 <etharp_find_entry+0x18a>
            old_pending = i;
 800bf70:	8c3b      	ldrh	r3, [r7, #32]
 800bf72:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800bf74:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bf78:	4965      	ldr	r1, [pc, #404]	; (800c110 <etharp_find_entry+0x2d4>)
 800bf7a:	4613      	mov	r3, r2
 800bf7c:	005b      	lsls	r3, r3, #1
 800bf7e:	4413      	add	r3, r2
 800bf80:	00db      	lsls	r3, r3, #3
 800bf82:	440b      	add	r3, r1
 800bf84:	3312      	adds	r3, #18
 800bf86:	881b      	ldrh	r3, [r3, #0]
 800bf88:	837b      	strh	r3, [r7, #26]
 800bf8a:	e01c      	b.n	800bfc6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800bf8c:	7dfb      	ldrb	r3, [r7, #23]
 800bf8e:	2b01      	cmp	r3, #1
 800bf90:	d919      	bls.n	800bfc6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800bf92:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bf96:	495e      	ldr	r1, [pc, #376]	; (800c110 <etharp_find_entry+0x2d4>)
 800bf98:	4613      	mov	r3, r2
 800bf9a:	005b      	lsls	r3, r3, #1
 800bf9c:	4413      	add	r3, r2
 800bf9e:	00db      	lsls	r3, r3, #3
 800bfa0:	440b      	add	r3, r1
 800bfa2:	3312      	adds	r3, #18
 800bfa4:	881b      	ldrh	r3, [r3, #0]
 800bfa6:	8b3a      	ldrh	r2, [r7, #24]
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	d80c      	bhi.n	800bfc6 <etharp_find_entry+0x18a>
            old_stable = i;
 800bfac:	8c3b      	ldrh	r3, [r7, #32]
 800bfae:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800bfb0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bfb4:	4956      	ldr	r1, [pc, #344]	; (800c110 <etharp_find_entry+0x2d4>)
 800bfb6:	4613      	mov	r3, r2
 800bfb8:	005b      	lsls	r3, r3, #1
 800bfba:	4413      	add	r3, r2
 800bfbc:	00db      	lsls	r3, r3, #3
 800bfbe:	440b      	add	r3, r1
 800bfc0:	3312      	adds	r3, #18
 800bfc2:	881b      	ldrh	r3, [r3, #0]
 800bfc4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bfc6:	8c3b      	ldrh	r3, [r7, #32]
 800bfc8:	3301      	adds	r3, #1
 800bfca:	b29b      	uxth	r3, r3
 800bfcc:	843b      	strh	r3, [r7, #32]
 800bfce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bfd2:	2b09      	cmp	r3, #9
 800bfd4:	f77f af4c 	ble.w	800be70 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800bfd8:	7afb      	ldrb	r3, [r7, #11]
 800bfda:	f003 0302 	and.w	r3, r3, #2
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d108      	bne.n	800bff4 <etharp_find_entry+0x1b8>
 800bfe2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800bfe6:	2b0a      	cmp	r3, #10
 800bfe8:	d107      	bne.n	800bffa <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800bfea:	7afb      	ldrb	r3, [r7, #11]
 800bfec:	f003 0301 	and.w	r3, r3, #1
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d102      	bne.n	800bffa <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800bff4:	f04f 33ff 	mov.w	r3, #4294967295
 800bff8:	e085      	b.n	800c106 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800bffa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800bffe:	2b09      	cmp	r3, #9
 800c000:	dc02      	bgt.n	800c008 <etharp_find_entry+0x1cc>
    i = empty;
 800c002:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c004:	843b      	strh	r3, [r7, #32]
 800c006:	e039      	b.n	800c07c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800c008:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c00c:	2b09      	cmp	r3, #9
 800c00e:	dc14      	bgt.n	800c03a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800c010:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c012:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c014:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c018:	493d      	ldr	r1, [pc, #244]	; (800c110 <etharp_find_entry+0x2d4>)
 800c01a:	4613      	mov	r3, r2
 800c01c:	005b      	lsls	r3, r3, #1
 800c01e:	4413      	add	r3, r2
 800c020:	00db      	lsls	r3, r3, #3
 800c022:	440b      	add	r3, r1
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d018      	beq.n	800c05c <etharp_find_entry+0x220>
 800c02a:	4b3a      	ldr	r3, [pc, #232]	; (800c114 <etharp_find_entry+0x2d8>)
 800c02c:	f240 126d 	movw	r2, #365	; 0x16d
 800c030:	493b      	ldr	r1, [pc, #236]	; (800c120 <etharp_find_entry+0x2e4>)
 800c032:	483a      	ldr	r0, [pc, #232]	; (800c11c <etharp_find_entry+0x2e0>)
 800c034:	f002 f928 	bl	800e288 <iprintf>
 800c038:	e010      	b.n	800c05c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800c03a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c03e:	2b09      	cmp	r3, #9
 800c040:	dc02      	bgt.n	800c048 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800c042:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c044:	843b      	strh	r3, [r7, #32]
 800c046:	e009      	b.n	800c05c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c048:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c04c:	2b09      	cmp	r3, #9
 800c04e:	dc02      	bgt.n	800c056 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800c050:	8bfb      	ldrh	r3, [r7, #30]
 800c052:	843b      	strh	r3, [r7, #32]
 800c054:	e002      	b.n	800c05c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800c056:	f04f 33ff 	mov.w	r3, #4294967295
 800c05a:	e054      	b.n	800c106 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c05c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c060:	2b09      	cmp	r3, #9
 800c062:	dd06      	ble.n	800c072 <etharp_find_entry+0x236>
 800c064:	4b2b      	ldr	r3, [pc, #172]	; (800c114 <etharp_find_entry+0x2d8>)
 800c066:	f240 127f 	movw	r2, #383	; 0x17f
 800c06a:	492e      	ldr	r1, [pc, #184]	; (800c124 <etharp_find_entry+0x2e8>)
 800c06c:	482b      	ldr	r0, [pc, #172]	; (800c11c <etharp_find_entry+0x2e0>)
 800c06e:	f002 f90b 	bl	800e288 <iprintf>
    etharp_free_entry(i);
 800c072:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c076:	4618      	mov	r0, r3
 800c078:	f7ff fe06 	bl	800bc88 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c07c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c080:	2b09      	cmp	r3, #9
 800c082:	dd06      	ble.n	800c092 <etharp_find_entry+0x256>
 800c084:	4b23      	ldr	r3, [pc, #140]	; (800c114 <etharp_find_entry+0x2d8>)
 800c086:	f240 1283 	movw	r2, #387	; 0x183
 800c08a:	4926      	ldr	r1, [pc, #152]	; (800c124 <etharp_find_entry+0x2e8>)
 800c08c:	4823      	ldr	r0, [pc, #140]	; (800c11c <etharp_find_entry+0x2e0>)
 800c08e:	f002 f8fb 	bl	800e288 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c092:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c096:	491e      	ldr	r1, [pc, #120]	; (800c110 <etharp_find_entry+0x2d4>)
 800c098:	4613      	mov	r3, r2
 800c09a:	005b      	lsls	r3, r3, #1
 800c09c:	4413      	add	r3, r2
 800c09e:	00db      	lsls	r3, r3, #3
 800c0a0:	440b      	add	r3, r1
 800c0a2:	3314      	adds	r3, #20
 800c0a4:	781b      	ldrb	r3, [r3, #0]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d006      	beq.n	800c0b8 <etharp_find_entry+0x27c>
 800c0aa:	4b1a      	ldr	r3, [pc, #104]	; (800c114 <etharp_find_entry+0x2d8>)
 800c0ac:	f240 1285 	movw	r2, #389	; 0x185
 800c0b0:	491d      	ldr	r1, [pc, #116]	; (800c128 <etharp_find_entry+0x2ec>)
 800c0b2:	481a      	ldr	r0, [pc, #104]	; (800c11c <etharp_find_entry+0x2e0>)
 800c0b4:	f002 f8e8 	bl	800e288 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d00b      	beq.n	800c0d6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c0be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	6819      	ldr	r1, [r3, #0]
 800c0c6:	4812      	ldr	r0, [pc, #72]	; (800c110 <etharp_find_entry+0x2d4>)
 800c0c8:	4613      	mov	r3, r2
 800c0ca:	005b      	lsls	r3, r3, #1
 800c0cc:	4413      	add	r3, r2
 800c0ce:	00db      	lsls	r3, r3, #3
 800c0d0:	4403      	add	r3, r0
 800c0d2:	3304      	adds	r3, #4
 800c0d4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800c0d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c0da:	490d      	ldr	r1, [pc, #52]	; (800c110 <etharp_find_entry+0x2d4>)
 800c0dc:	4613      	mov	r3, r2
 800c0de:	005b      	lsls	r3, r3, #1
 800c0e0:	4413      	add	r3, r2
 800c0e2:	00db      	lsls	r3, r3, #3
 800c0e4:	440b      	add	r3, r1
 800c0e6:	3312      	adds	r3, #18
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800c0ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c0f0:	4907      	ldr	r1, [pc, #28]	; (800c110 <etharp_find_entry+0x2d4>)
 800c0f2:	4613      	mov	r3, r2
 800c0f4:	005b      	lsls	r3, r3, #1
 800c0f6:	4413      	add	r3, r2
 800c0f8:	00db      	lsls	r3, r3, #3
 800c0fa:	440b      	add	r3, r1
 800c0fc:	3308      	adds	r3, #8
 800c0fe:	687a      	ldr	r2, [r7, #4]
 800c100:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800c102:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800c106:	4618      	mov	r0, r3
 800c108:	3728      	adds	r7, #40	; 0x28
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}
 800c10e:	bf00      	nop
 800c110:	20000110 	.word	0x20000110
 800c114:	0801145c 	.word	0x0801145c
 800c118:	08011494 	.word	0x08011494
 800c11c:	080114d4 	.word	0x080114d4
 800c120:	080114fc 	.word	0x080114fc
 800c124:	08011514 	.word	0x08011514
 800c128:	08011528 	.word	0x08011528

0800c12c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b088      	sub	sp, #32
 800c130:	af02      	add	r7, sp, #8
 800c132:	60f8      	str	r0, [r7, #12]
 800c134:	60b9      	str	r1, [r7, #8]
 800c136:	607a      	str	r2, [r7, #4]
 800c138:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c140:	2b06      	cmp	r3, #6
 800c142:	d006      	beq.n	800c152 <etharp_update_arp_entry+0x26>
 800c144:	4b48      	ldr	r3, [pc, #288]	; (800c268 <etharp_update_arp_entry+0x13c>)
 800c146:	f240 12a9 	movw	r2, #425	; 0x1a9
 800c14a:	4948      	ldr	r1, [pc, #288]	; (800c26c <etharp_update_arp_entry+0x140>)
 800c14c:	4848      	ldr	r0, [pc, #288]	; (800c270 <etharp_update_arp_entry+0x144>)
 800c14e:	f002 f89b 	bl	800e288 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d012      	beq.n	800c17e <etharp_update_arp_entry+0x52>
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d00e      	beq.n	800c17e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	68f9      	ldr	r1, [r7, #12]
 800c166:	4618      	mov	r0, r3
 800c168:	f001 f8fc 	bl	800d364 <ip4_addr_isbroadcast_u32>
 800c16c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d105      	bne.n	800c17e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c17a:	2be0      	cmp	r3, #224	; 0xe0
 800c17c:	d102      	bne.n	800c184 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c17e:	f06f 030f 	mvn.w	r3, #15
 800c182:	e06c      	b.n	800c25e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800c184:	78fb      	ldrb	r3, [r7, #3]
 800c186:	68fa      	ldr	r2, [r7, #12]
 800c188:	4619      	mov	r1, r3
 800c18a:	68b8      	ldr	r0, [r7, #8]
 800c18c:	f7ff fe56 	bl	800be3c <etharp_find_entry>
 800c190:	4603      	mov	r3, r0
 800c192:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800c194:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	da02      	bge.n	800c1a2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800c19c:	8afb      	ldrh	r3, [r7, #22]
 800c19e:	b25b      	sxtb	r3, r3
 800c1a0:	e05d      	b.n	800c25e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c1a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c1a6:	4933      	ldr	r1, [pc, #204]	; (800c274 <etharp_update_arp_entry+0x148>)
 800c1a8:	4613      	mov	r3, r2
 800c1aa:	005b      	lsls	r3, r3, #1
 800c1ac:	4413      	add	r3, r2
 800c1ae:	00db      	lsls	r3, r3, #3
 800c1b0:	440b      	add	r3, r1
 800c1b2:	3314      	adds	r3, #20
 800c1b4:	2202      	movs	r2, #2
 800c1b6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800c1b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c1bc:	492d      	ldr	r1, [pc, #180]	; (800c274 <etharp_update_arp_entry+0x148>)
 800c1be:	4613      	mov	r3, r2
 800c1c0:	005b      	lsls	r3, r3, #1
 800c1c2:	4413      	add	r3, r2
 800c1c4:	00db      	lsls	r3, r3, #3
 800c1c6:	440b      	add	r3, r1
 800c1c8:	3308      	adds	r3, #8
 800c1ca:	68fa      	ldr	r2, [r7, #12]
 800c1cc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800c1ce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c1d2:	4613      	mov	r3, r2
 800c1d4:	005b      	lsls	r3, r3, #1
 800c1d6:	4413      	add	r3, r2
 800c1d8:	00db      	lsls	r3, r3, #3
 800c1da:	3308      	adds	r3, #8
 800c1dc:	4a25      	ldr	r2, [pc, #148]	; (800c274 <etharp_update_arp_entry+0x148>)
 800c1de:	4413      	add	r3, r2
 800c1e0:	3304      	adds	r3, #4
 800c1e2:	2206      	movs	r2, #6
 800c1e4:	6879      	ldr	r1, [r7, #4]
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f002 f83b 	bl	800e262 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800c1ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c1f0:	4920      	ldr	r1, [pc, #128]	; (800c274 <etharp_update_arp_entry+0x148>)
 800c1f2:	4613      	mov	r3, r2
 800c1f4:	005b      	lsls	r3, r3, #1
 800c1f6:	4413      	add	r3, r2
 800c1f8:	00db      	lsls	r3, r3, #3
 800c1fa:	440b      	add	r3, r1
 800c1fc:	3312      	adds	r3, #18
 800c1fe:	2200      	movs	r2, #0
 800c200:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800c202:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c206:	491b      	ldr	r1, [pc, #108]	; (800c274 <etharp_update_arp_entry+0x148>)
 800c208:	4613      	mov	r3, r2
 800c20a:	005b      	lsls	r3, r3, #1
 800c20c:	4413      	add	r3, r2
 800c20e:	00db      	lsls	r3, r3, #3
 800c210:	440b      	add	r3, r1
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d021      	beq.n	800c25c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800c218:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c21c:	4915      	ldr	r1, [pc, #84]	; (800c274 <etharp_update_arp_entry+0x148>)
 800c21e:	4613      	mov	r3, r2
 800c220:	005b      	lsls	r3, r3, #1
 800c222:	4413      	add	r3, r2
 800c224:	00db      	lsls	r3, r3, #3
 800c226:	440b      	add	r3, r1
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800c22c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c230:	4910      	ldr	r1, [pc, #64]	; (800c274 <etharp_update_arp_entry+0x148>)
 800c232:	4613      	mov	r3, r2
 800c234:	005b      	lsls	r3, r3, #1
 800c236:	4413      	add	r3, r2
 800c238:	00db      	lsls	r3, r3, #3
 800c23a:	440b      	add	r3, r1
 800c23c:	2200      	movs	r2, #0
 800c23e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	f103 0222 	add.w	r2, r3, #34	; 0x22
 800c246:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c24a:	9300      	str	r3, [sp, #0]
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6939      	ldr	r1, [r7, #16]
 800c250:	68f8      	ldr	r0, [r7, #12]
 800c252:	f001 ff8b 	bl	800e16c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800c256:	6938      	ldr	r0, [r7, #16]
 800c258:	f7f8 fb68 	bl	800492c <pbuf_free>
  }
  return ERR_OK;
 800c25c:	2300      	movs	r3, #0
}
 800c25e:	4618      	mov	r0, r3
 800c260:	3718      	adds	r7, #24
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
 800c266:	bf00      	nop
 800c268:	0801145c 	.word	0x0801145c
 800c26c:	08011554 	.word	0x08011554
 800c270:	080114d4 	.word	0x080114d4
 800c274:	20000110 	.word	0x20000110

0800c278 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b084      	sub	sp, #16
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c280:	2300      	movs	r3, #0
 800c282:	60fb      	str	r3, [r7, #12]
 800c284:	e01e      	b.n	800c2c4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800c286:	4913      	ldr	r1, [pc, #76]	; (800c2d4 <etharp_cleanup_netif+0x5c>)
 800c288:	68fa      	ldr	r2, [r7, #12]
 800c28a:	4613      	mov	r3, r2
 800c28c:	005b      	lsls	r3, r3, #1
 800c28e:	4413      	add	r3, r2
 800c290:	00db      	lsls	r3, r3, #3
 800c292:	440b      	add	r3, r1
 800c294:	3314      	adds	r3, #20
 800c296:	781b      	ldrb	r3, [r3, #0]
 800c298:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c29a:	7afb      	ldrb	r3, [r7, #11]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d00e      	beq.n	800c2be <etharp_cleanup_netif+0x46>
 800c2a0:	490c      	ldr	r1, [pc, #48]	; (800c2d4 <etharp_cleanup_netif+0x5c>)
 800c2a2:	68fa      	ldr	r2, [r7, #12]
 800c2a4:	4613      	mov	r3, r2
 800c2a6:	005b      	lsls	r3, r3, #1
 800c2a8:	4413      	add	r3, r2
 800c2aa:	00db      	lsls	r3, r3, #3
 800c2ac:	440b      	add	r3, r1
 800c2ae:	3308      	adds	r3, #8
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	687a      	ldr	r2, [r7, #4]
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	d102      	bne.n	800c2be <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800c2b8:	68f8      	ldr	r0, [r7, #12]
 800c2ba:	f7ff fce5 	bl	800bc88 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	3301      	adds	r3, #1
 800c2c2:	60fb      	str	r3, [r7, #12]
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	2b09      	cmp	r3, #9
 800c2c8:	dddd      	ble.n	800c286 <etharp_cleanup_netif+0xe>
    }
  }
}
 800c2ca:	bf00      	nop
 800c2cc:	3710      	adds	r7, #16
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}
 800c2d2:	bf00      	nop
 800c2d4:	20000110 	.word	0x20000110

0800c2d8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800c2d8:	b5b0      	push	{r4, r5, r7, lr}
 800c2da:	b08a      	sub	sp, #40	; 0x28
 800c2dc:	af04      	add	r7, sp, #16
 800c2de:	6078      	str	r0, [r7, #4]
 800c2e0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d107      	bne.n	800c2f8 <etharp_input+0x20>
 800c2e8:	4b3d      	ldr	r3, [pc, #244]	; (800c3e0 <etharp_input+0x108>)
 800c2ea:	f240 228a 	movw	r2, #650	; 0x28a
 800c2ee:	493d      	ldr	r1, [pc, #244]	; (800c3e4 <etharp_input+0x10c>)
 800c2f0:	483d      	ldr	r0, [pc, #244]	; (800c3e8 <etharp_input+0x110>)
 800c2f2:	f001 ffc9 	bl	800e288 <iprintf>
 800c2f6:	e06f      	b.n	800c3d8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	685b      	ldr	r3, [r3, #4]
 800c2fc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c2fe:	693b      	ldr	r3, [r7, #16]
 800c300:	881b      	ldrh	r3, [r3, #0]
 800c302:	b29b      	uxth	r3, r3
 800c304:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c308:	d10c      	bne.n	800c324 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c30a:	693b      	ldr	r3, [r7, #16]
 800c30c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c30e:	2b06      	cmp	r3, #6
 800c310:	d108      	bne.n	800c324 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c316:	2b04      	cmp	r3, #4
 800c318:	d104      	bne.n	800c324 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	885b      	ldrh	r3, [r3, #2]
 800c31e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c320:	2b08      	cmp	r3, #8
 800c322:	d003      	beq.n	800c32c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800c324:	6878      	ldr	r0, [r7, #4]
 800c326:	f7f8 fb01 	bl	800492c <pbuf_free>
    return;
 800c32a:	e055      	b.n	800c3d8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	330e      	adds	r3, #14
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800c334:	693b      	ldr	r3, [r7, #16]
 800c336:	3318      	adds	r3, #24
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	3304      	adds	r3, #4
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d102      	bne.n	800c34c <etharp_input+0x74>
    for_us = 0;
 800c346:	2300      	movs	r3, #0
 800c348:	75fb      	strb	r3, [r7, #23]
 800c34a:	e009      	b.n	800c360 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800c34c:	68ba      	ldr	r2, [r7, #8]
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	3304      	adds	r3, #4
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	429a      	cmp	r2, r3
 800c356:	bf0c      	ite	eq
 800c358:	2301      	moveq	r3, #1
 800c35a:	2300      	movne	r3, #0
 800c35c:	b2db      	uxtb	r3, r3
 800c35e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c360:	693b      	ldr	r3, [r7, #16]
 800c362:	f103 0208 	add.w	r2, r3, #8
 800c366:	7dfb      	ldrb	r3, [r7, #23]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d001      	beq.n	800c370 <etharp_input+0x98>
 800c36c:	2301      	movs	r3, #1
 800c36e:	e000      	b.n	800c372 <etharp_input+0x9a>
 800c370:	2302      	movs	r3, #2
 800c372:	f107 010c 	add.w	r1, r7, #12
 800c376:	6838      	ldr	r0, [r7, #0]
 800c378:	f7ff fed8 	bl	800c12c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800c37c:	693b      	ldr	r3, [r7, #16]
 800c37e:	88db      	ldrh	r3, [r3, #6]
 800c380:	b29b      	uxth	r3, r3
 800c382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c386:	d003      	beq.n	800c390 <etharp_input+0xb8>
 800c388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c38c:	d01e      	beq.n	800c3cc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800c38e:	e020      	b.n	800c3d2 <etharp_input+0xfa>
      if (for_us) {
 800c390:	7dfb      	ldrb	r3, [r7, #23]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d01c      	beq.n	800c3d0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	f103 0022 	add.w	r0, r3, #34	; 0x22
 800c39c:	693b      	ldr	r3, [r7, #16]
 800c39e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	f103 0522 	add.w	r5, r3, #34	; 0x22
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800c3ac:	693a      	ldr	r2, [r7, #16]
 800c3ae:	3208      	adds	r2, #8
        etharp_raw(netif,
 800c3b0:	2102      	movs	r1, #2
 800c3b2:	9103      	str	r1, [sp, #12]
 800c3b4:	f107 010c 	add.w	r1, r7, #12
 800c3b8:	9102      	str	r1, [sp, #8]
 800c3ba:	9201      	str	r2, [sp, #4]
 800c3bc:	9300      	str	r3, [sp, #0]
 800c3be:	462b      	mov	r3, r5
 800c3c0:	4622      	mov	r2, r4
 800c3c2:	4601      	mov	r1, r0
 800c3c4:	6838      	ldr	r0, [r7, #0]
 800c3c6:	f000 faeb 	bl	800c9a0 <etharp_raw>
      break;
 800c3ca:	e001      	b.n	800c3d0 <etharp_input+0xf8>
      break;
 800c3cc:	bf00      	nop
 800c3ce:	e000      	b.n	800c3d2 <etharp_input+0xfa>
      break;
 800c3d0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f7f8 faaa 	bl	800492c <pbuf_free>
}
 800c3d8:	3718      	adds	r7, #24
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bdb0      	pop	{r4, r5, r7, pc}
 800c3de:	bf00      	nop
 800c3e0:	0801145c 	.word	0x0801145c
 800c3e4:	080115ac 	.word	0x080115ac
 800c3e8:	080114d4 	.word	0x080114d4

0800c3ec <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b086      	sub	sp, #24
 800c3f0:	af02      	add	r7, sp, #8
 800c3f2:	60f8      	str	r0, [r7, #12]
 800c3f4:	60b9      	str	r1, [r7, #8]
 800c3f6:	4613      	mov	r3, r2
 800c3f8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c3fa:	79fa      	ldrb	r2, [r7, #7]
 800c3fc:	4944      	ldr	r1, [pc, #272]	; (800c510 <etharp_output_to_arp_index+0x124>)
 800c3fe:	4613      	mov	r3, r2
 800c400:	005b      	lsls	r3, r3, #1
 800c402:	4413      	add	r3, r2
 800c404:	00db      	lsls	r3, r3, #3
 800c406:	440b      	add	r3, r1
 800c408:	3314      	adds	r3, #20
 800c40a:	781b      	ldrb	r3, [r3, #0]
 800c40c:	2b01      	cmp	r3, #1
 800c40e:	d806      	bhi.n	800c41e <etharp_output_to_arp_index+0x32>
 800c410:	4b40      	ldr	r3, [pc, #256]	; (800c514 <etharp_output_to_arp_index+0x128>)
 800c412:	f240 22ef 	movw	r2, #751	; 0x2ef
 800c416:	4940      	ldr	r1, [pc, #256]	; (800c518 <etharp_output_to_arp_index+0x12c>)
 800c418:	4840      	ldr	r0, [pc, #256]	; (800c51c <etharp_output_to_arp_index+0x130>)
 800c41a:	f001 ff35 	bl	800e288 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c41e:	79fa      	ldrb	r2, [r7, #7]
 800c420:	493b      	ldr	r1, [pc, #236]	; (800c510 <etharp_output_to_arp_index+0x124>)
 800c422:	4613      	mov	r3, r2
 800c424:	005b      	lsls	r3, r3, #1
 800c426:	4413      	add	r3, r2
 800c428:	00db      	lsls	r3, r3, #3
 800c42a:	440b      	add	r3, r1
 800c42c:	3314      	adds	r3, #20
 800c42e:	781b      	ldrb	r3, [r3, #0]
 800c430:	2b02      	cmp	r3, #2
 800c432:	d153      	bne.n	800c4dc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800c434:	79fa      	ldrb	r2, [r7, #7]
 800c436:	4936      	ldr	r1, [pc, #216]	; (800c510 <etharp_output_to_arp_index+0x124>)
 800c438:	4613      	mov	r3, r2
 800c43a:	005b      	lsls	r3, r3, #1
 800c43c:	4413      	add	r3, r2
 800c43e:	00db      	lsls	r3, r3, #3
 800c440:	440b      	add	r3, r1
 800c442:	3312      	adds	r3, #18
 800c444:	881b      	ldrh	r3, [r3, #0]
 800c446:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800c44a:	d919      	bls.n	800c480 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c44c:	79fa      	ldrb	r2, [r7, #7]
 800c44e:	4613      	mov	r3, r2
 800c450:	005b      	lsls	r3, r3, #1
 800c452:	4413      	add	r3, r2
 800c454:	00db      	lsls	r3, r3, #3
 800c456:	4a2e      	ldr	r2, [pc, #184]	; (800c510 <etharp_output_to_arp_index+0x124>)
 800c458:	4413      	add	r3, r2
 800c45a:	3304      	adds	r3, #4
 800c45c:	4619      	mov	r1, r3
 800c45e:	68f8      	ldr	r0, [r7, #12]
 800c460:	f000 fb4c 	bl	800cafc <etharp_request>
 800c464:	4603      	mov	r3, r0
 800c466:	2b00      	cmp	r3, #0
 800c468:	d138      	bne.n	800c4dc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c46a:	79fa      	ldrb	r2, [r7, #7]
 800c46c:	4928      	ldr	r1, [pc, #160]	; (800c510 <etharp_output_to_arp_index+0x124>)
 800c46e:	4613      	mov	r3, r2
 800c470:	005b      	lsls	r3, r3, #1
 800c472:	4413      	add	r3, r2
 800c474:	00db      	lsls	r3, r3, #3
 800c476:	440b      	add	r3, r1
 800c478:	3314      	adds	r3, #20
 800c47a:	2203      	movs	r2, #3
 800c47c:	701a      	strb	r2, [r3, #0]
 800c47e:	e02d      	b.n	800c4dc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800c480:	79fa      	ldrb	r2, [r7, #7]
 800c482:	4923      	ldr	r1, [pc, #140]	; (800c510 <etharp_output_to_arp_index+0x124>)
 800c484:	4613      	mov	r3, r2
 800c486:	005b      	lsls	r3, r3, #1
 800c488:	4413      	add	r3, r2
 800c48a:	00db      	lsls	r3, r3, #3
 800c48c:	440b      	add	r3, r1
 800c48e:	3312      	adds	r3, #18
 800c490:	881b      	ldrh	r3, [r3, #0]
 800c492:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c496:	d321      	bcc.n	800c4dc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c498:	79fa      	ldrb	r2, [r7, #7]
 800c49a:	4613      	mov	r3, r2
 800c49c:	005b      	lsls	r3, r3, #1
 800c49e:	4413      	add	r3, r2
 800c4a0:	00db      	lsls	r3, r3, #3
 800c4a2:	4a1b      	ldr	r2, [pc, #108]	; (800c510 <etharp_output_to_arp_index+0x124>)
 800c4a4:	4413      	add	r3, r2
 800c4a6:	1d19      	adds	r1, r3, #4
 800c4a8:	79fa      	ldrb	r2, [r7, #7]
 800c4aa:	4613      	mov	r3, r2
 800c4ac:	005b      	lsls	r3, r3, #1
 800c4ae:	4413      	add	r3, r2
 800c4b0:	00db      	lsls	r3, r3, #3
 800c4b2:	3308      	adds	r3, #8
 800c4b4:	4a16      	ldr	r2, [pc, #88]	; (800c510 <etharp_output_to_arp_index+0x124>)
 800c4b6:	4413      	add	r3, r2
 800c4b8:	3304      	adds	r3, #4
 800c4ba:	461a      	mov	r2, r3
 800c4bc:	68f8      	ldr	r0, [r7, #12]
 800c4be:	f000 fafb 	bl	800cab8 <etharp_request_dst>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d109      	bne.n	800c4dc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c4c8:	79fa      	ldrb	r2, [r7, #7]
 800c4ca:	4911      	ldr	r1, [pc, #68]	; (800c510 <etharp_output_to_arp_index+0x124>)
 800c4cc:	4613      	mov	r3, r2
 800c4ce:	005b      	lsls	r3, r3, #1
 800c4d0:	4413      	add	r3, r2
 800c4d2:	00db      	lsls	r3, r3, #3
 800c4d4:	440b      	add	r3, r1
 800c4d6:	3314      	adds	r3, #20
 800c4d8:	2203      	movs	r2, #3
 800c4da:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	f103 0122 	add.w	r1, r3, #34	; 0x22
 800c4e2:	79fa      	ldrb	r2, [r7, #7]
 800c4e4:	4613      	mov	r3, r2
 800c4e6:	005b      	lsls	r3, r3, #1
 800c4e8:	4413      	add	r3, r2
 800c4ea:	00db      	lsls	r3, r3, #3
 800c4ec:	3308      	adds	r3, #8
 800c4ee:	4a08      	ldr	r2, [pc, #32]	; (800c510 <etharp_output_to_arp_index+0x124>)
 800c4f0:	4413      	add	r3, r2
 800c4f2:	1d1a      	adds	r2, r3, #4
 800c4f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c4f8:	9300      	str	r3, [sp, #0]
 800c4fa:	4613      	mov	r3, r2
 800c4fc:	460a      	mov	r2, r1
 800c4fe:	68b9      	ldr	r1, [r7, #8]
 800c500:	68f8      	ldr	r0, [r7, #12]
 800c502:	f001 fe33 	bl	800e16c <ethernet_output>
 800c506:	4603      	mov	r3, r0
}
 800c508:	4618      	mov	r0, r3
 800c50a:	3710      	adds	r7, #16
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}
 800c510:	20000110 	.word	0x20000110
 800c514:	0801145c 	.word	0x0801145c
 800c518:	080115cc 	.word	0x080115cc
 800c51c:	080114d4 	.word	0x080114d4

0800c520 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b08a      	sub	sp, #40	; 0x28
 800c524:	af02      	add	r7, sp, #8
 800c526:	60f8      	str	r0, [r7, #12]
 800c528:	60b9      	str	r1, [r7, #8]
 800c52a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d106      	bne.n	800c544 <etharp_output+0x24>
 800c536:	4b73      	ldr	r3, [pc, #460]	; (800c704 <etharp_output+0x1e4>)
 800c538:	f240 321e 	movw	r2, #798	; 0x31e
 800c53c:	4972      	ldr	r1, [pc, #456]	; (800c708 <etharp_output+0x1e8>)
 800c53e:	4873      	ldr	r0, [pc, #460]	; (800c70c <etharp_output+0x1ec>)
 800c540:	f001 fea2 	bl	800e288 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d106      	bne.n	800c558 <etharp_output+0x38>
 800c54a:	4b6e      	ldr	r3, [pc, #440]	; (800c704 <etharp_output+0x1e4>)
 800c54c:	f240 321f 	movw	r2, #799	; 0x31f
 800c550:	496f      	ldr	r1, [pc, #444]	; (800c710 <etharp_output+0x1f0>)
 800c552:	486e      	ldr	r0, [pc, #440]	; (800c70c <etharp_output+0x1ec>)
 800c554:	f001 fe98 	bl	800e288 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d106      	bne.n	800c56c <etharp_output+0x4c>
 800c55e:	4b69      	ldr	r3, [pc, #420]	; (800c704 <etharp_output+0x1e4>)
 800c560:	f44f 7248 	mov.w	r2, #800	; 0x320
 800c564:	496b      	ldr	r1, [pc, #428]	; (800c714 <etharp_output+0x1f4>)
 800c566:	4869      	ldr	r0, [pc, #420]	; (800c70c <etharp_output+0x1ec>)
 800c568:	f001 fe8e 	bl	800e288 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	68f9      	ldr	r1, [r7, #12]
 800c572:	4618      	mov	r0, r3
 800c574:	f000 fef6 	bl	800d364 <ip4_addr_isbroadcast_u32>
 800c578:	4603      	mov	r3, r0
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d002      	beq.n	800c584 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800c57e:	4b66      	ldr	r3, [pc, #408]	; (800c718 <etharp_output+0x1f8>)
 800c580:	61fb      	str	r3, [r7, #28]
 800c582:	e0af      	b.n	800c6e4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c58c:	2be0      	cmp	r3, #224	; 0xe0
 800c58e:	d118      	bne.n	800c5c2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800c590:	2301      	movs	r3, #1
 800c592:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800c594:	2300      	movs	r3, #0
 800c596:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800c598:	235e      	movs	r3, #94	; 0x5e
 800c59a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	3301      	adds	r3, #1
 800c5a0:	781b      	ldrb	r3, [r3, #0]
 800c5a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5a6:	b2db      	uxtb	r3, r3
 800c5a8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	3302      	adds	r3, #2
 800c5ae:	781b      	ldrb	r3, [r3, #0]
 800c5b0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	3303      	adds	r3, #3
 800c5b6:	781b      	ldrb	r3, [r3, #0]
 800c5b8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800c5ba:	f107 0310 	add.w	r3, r7, #16
 800c5be:	61fb      	str	r3, [r7, #28]
 800c5c0:	e090      	b.n	800c6e4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681a      	ldr	r2, [r3, #0]
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	3304      	adds	r3, #4
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	405a      	eors	r2, r3
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	3308      	adds	r3, #8
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	4013      	ands	r3, r2
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d012      	beq.n	800c600 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c5e0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	d00b      	beq.n	800c600 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	330c      	adds	r3, #12
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d003      	beq.n	800c5fa <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	330c      	adds	r3, #12
 800c5f6:	61bb      	str	r3, [r7, #24]
 800c5f8:	e002      	b.n	800c600 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800c5fa:	f06f 0303 	mvn.w	r3, #3
 800c5fe:	e07d      	b.n	800c6fc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c600:	4b46      	ldr	r3, [pc, #280]	; (800c71c <etharp_output+0x1fc>)
 800c602:	781b      	ldrb	r3, [r3, #0]
 800c604:	4619      	mov	r1, r3
 800c606:	4a46      	ldr	r2, [pc, #280]	; (800c720 <etharp_output+0x200>)
 800c608:	460b      	mov	r3, r1
 800c60a:	005b      	lsls	r3, r3, #1
 800c60c:	440b      	add	r3, r1
 800c60e:	00db      	lsls	r3, r3, #3
 800c610:	4413      	add	r3, r2
 800c612:	3314      	adds	r3, #20
 800c614:	781b      	ldrb	r3, [r3, #0]
 800c616:	2b01      	cmp	r3, #1
 800c618:	d925      	bls.n	800c666 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c61a:	4b40      	ldr	r3, [pc, #256]	; (800c71c <etharp_output+0x1fc>)
 800c61c:	781b      	ldrb	r3, [r3, #0]
 800c61e:	4619      	mov	r1, r3
 800c620:	4a3f      	ldr	r2, [pc, #252]	; (800c720 <etharp_output+0x200>)
 800c622:	460b      	mov	r3, r1
 800c624:	005b      	lsls	r3, r3, #1
 800c626:	440b      	add	r3, r1
 800c628:	00db      	lsls	r3, r3, #3
 800c62a:	4413      	add	r3, r2
 800c62c:	3308      	adds	r3, #8
 800c62e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c630:	68fa      	ldr	r2, [r7, #12]
 800c632:	429a      	cmp	r2, r3
 800c634:	d117      	bne.n	800c666 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800c636:	69bb      	ldr	r3, [r7, #24]
 800c638:	681a      	ldr	r2, [r3, #0]
 800c63a:	4b38      	ldr	r3, [pc, #224]	; (800c71c <etharp_output+0x1fc>)
 800c63c:	781b      	ldrb	r3, [r3, #0]
 800c63e:	4618      	mov	r0, r3
 800c640:	4937      	ldr	r1, [pc, #220]	; (800c720 <etharp_output+0x200>)
 800c642:	4603      	mov	r3, r0
 800c644:	005b      	lsls	r3, r3, #1
 800c646:	4403      	add	r3, r0
 800c648:	00db      	lsls	r3, r3, #3
 800c64a:	440b      	add	r3, r1
 800c64c:	3304      	adds	r3, #4
 800c64e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c650:	429a      	cmp	r2, r3
 800c652:	d108      	bne.n	800c666 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800c654:	4b31      	ldr	r3, [pc, #196]	; (800c71c <etharp_output+0x1fc>)
 800c656:	781b      	ldrb	r3, [r3, #0]
 800c658:	461a      	mov	r2, r3
 800c65a:	68b9      	ldr	r1, [r7, #8]
 800c65c:	68f8      	ldr	r0, [r7, #12]
 800c65e:	f7ff fec5 	bl	800c3ec <etharp_output_to_arp_index>
 800c662:	4603      	mov	r3, r0
 800c664:	e04a      	b.n	800c6fc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c666:	2300      	movs	r3, #0
 800c668:	75fb      	strb	r3, [r7, #23]
 800c66a:	e031      	b.n	800c6d0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c66c:	7dfa      	ldrb	r2, [r7, #23]
 800c66e:	492c      	ldr	r1, [pc, #176]	; (800c720 <etharp_output+0x200>)
 800c670:	4613      	mov	r3, r2
 800c672:	005b      	lsls	r3, r3, #1
 800c674:	4413      	add	r3, r2
 800c676:	00db      	lsls	r3, r3, #3
 800c678:	440b      	add	r3, r1
 800c67a:	3314      	adds	r3, #20
 800c67c:	781b      	ldrb	r3, [r3, #0]
 800c67e:	2b01      	cmp	r3, #1
 800c680:	d923      	bls.n	800c6ca <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800c682:	7dfa      	ldrb	r2, [r7, #23]
 800c684:	4926      	ldr	r1, [pc, #152]	; (800c720 <etharp_output+0x200>)
 800c686:	4613      	mov	r3, r2
 800c688:	005b      	lsls	r3, r3, #1
 800c68a:	4413      	add	r3, r2
 800c68c:	00db      	lsls	r3, r3, #3
 800c68e:	440b      	add	r3, r1
 800c690:	3308      	adds	r3, #8
 800c692:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c694:	68fa      	ldr	r2, [r7, #12]
 800c696:	429a      	cmp	r2, r3
 800c698:	d117      	bne.n	800c6ca <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800c69a:	69bb      	ldr	r3, [r7, #24]
 800c69c:	6819      	ldr	r1, [r3, #0]
 800c69e:	7dfa      	ldrb	r2, [r7, #23]
 800c6a0:	481f      	ldr	r0, [pc, #124]	; (800c720 <etharp_output+0x200>)
 800c6a2:	4613      	mov	r3, r2
 800c6a4:	005b      	lsls	r3, r3, #1
 800c6a6:	4413      	add	r3, r2
 800c6a8:	00db      	lsls	r3, r3, #3
 800c6aa:	4403      	add	r3, r0
 800c6ac:	3304      	adds	r3, #4
 800c6ae:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800c6b0:	4299      	cmp	r1, r3
 800c6b2:	d10a      	bne.n	800c6ca <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800c6b4:	4a19      	ldr	r2, [pc, #100]	; (800c71c <etharp_output+0x1fc>)
 800c6b6:	7dfb      	ldrb	r3, [r7, #23]
 800c6b8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800c6ba:	7dfb      	ldrb	r3, [r7, #23]
 800c6bc:	461a      	mov	r2, r3
 800c6be:	68b9      	ldr	r1, [r7, #8]
 800c6c0:	68f8      	ldr	r0, [r7, #12]
 800c6c2:	f7ff fe93 	bl	800c3ec <etharp_output_to_arp_index>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	e018      	b.n	800c6fc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c6ca:	7dfb      	ldrb	r3, [r7, #23]
 800c6cc:	3301      	adds	r3, #1
 800c6ce:	75fb      	strb	r3, [r7, #23]
 800c6d0:	7dfb      	ldrb	r3, [r7, #23]
 800c6d2:	2b09      	cmp	r3, #9
 800c6d4:	d9ca      	bls.n	800c66c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800c6d6:	68ba      	ldr	r2, [r7, #8]
 800c6d8:	69b9      	ldr	r1, [r7, #24]
 800c6da:	68f8      	ldr	r0, [r7, #12]
 800c6dc:	f000 f822 	bl	800c724 <etharp_query>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	e00b      	b.n	800c6fc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	f103 0222 	add.w	r2, r3, #34	; 0x22
 800c6ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c6ee:	9300      	str	r3, [sp, #0]
 800c6f0:	69fb      	ldr	r3, [r7, #28]
 800c6f2:	68b9      	ldr	r1, [r7, #8]
 800c6f4:	68f8      	ldr	r0, [r7, #12]
 800c6f6:	f001 fd39 	bl	800e16c <ethernet_output>
 800c6fa:	4603      	mov	r3, r0
}
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	3720      	adds	r7, #32
 800c700:	46bd      	mov	sp, r7
 800c702:	bd80      	pop	{r7, pc}
 800c704:	0801145c 	.word	0x0801145c
 800c708:	080115ac 	.word	0x080115ac
 800c70c:	080114d4 	.word	0x080114d4
 800c710:	080115fc 	.word	0x080115fc
 800c714:	0801159c 	.word	0x0801159c
 800c718:	08011c04 	.word	0x08011c04
 800c71c:	20000200 	.word	0x20000200
 800c720:	20000110 	.word	0x20000110

0800c724 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b08c      	sub	sp, #48	; 0x30
 800c728:	af02      	add	r7, sp, #8
 800c72a:	60f8      	str	r0, [r7, #12]
 800c72c:	60b9      	str	r1, [r7, #8]
 800c72e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	3322      	adds	r3, #34	; 0x22
 800c734:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800c736:	23ff      	movs	r3, #255	; 0xff
 800c738:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800c73c:	2300      	movs	r3, #0
 800c73e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	68f9      	ldr	r1, [r7, #12]
 800c746:	4618      	mov	r0, r3
 800c748:	f000 fe0c 	bl	800d364 <ip4_addr_isbroadcast_u32>
 800c74c:	4603      	mov	r3, r0
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d10c      	bne.n	800c76c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c752:	68bb      	ldr	r3, [r7, #8]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c75a:	2be0      	cmp	r3, #224	; 0xe0
 800c75c:	d006      	beq.n	800c76c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c75e:	68bb      	ldr	r3, [r7, #8]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d003      	beq.n	800c76c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d102      	bne.n	800c772 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c76c:	f06f 030f 	mvn.w	r3, #15
 800c770:	e102      	b.n	800c978 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800c772:	68fa      	ldr	r2, [r7, #12]
 800c774:	2101      	movs	r1, #1
 800c776:	68b8      	ldr	r0, [r7, #8]
 800c778:	f7ff fb60 	bl	800be3c <etharp_find_entry>
 800c77c:	4603      	mov	r3, r0
 800c77e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800c780:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c784:	2b00      	cmp	r3, #0
 800c786:	da02      	bge.n	800c78e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800c788:	8a7b      	ldrh	r3, [r7, #18]
 800c78a:	b25b      	sxtb	r3, r3
 800c78c:	e0f4      	b.n	800c978 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800c78e:	8a7b      	ldrh	r3, [r7, #18]
 800c790:	2b7e      	cmp	r3, #126	; 0x7e
 800c792:	d906      	bls.n	800c7a2 <etharp_query+0x7e>
 800c794:	4b7a      	ldr	r3, [pc, #488]	; (800c980 <etharp_query+0x25c>)
 800c796:	f240 32c1 	movw	r2, #961	; 0x3c1
 800c79a:	497a      	ldr	r1, [pc, #488]	; (800c984 <etharp_query+0x260>)
 800c79c:	487a      	ldr	r0, [pc, #488]	; (800c988 <etharp_query+0x264>)
 800c79e:	f001 fd73 	bl	800e288 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800c7a2:	8a7b      	ldrh	r3, [r7, #18]
 800c7a4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800c7a6:	7c7a      	ldrb	r2, [r7, #17]
 800c7a8:	4978      	ldr	r1, [pc, #480]	; (800c98c <etharp_query+0x268>)
 800c7aa:	4613      	mov	r3, r2
 800c7ac:	005b      	lsls	r3, r3, #1
 800c7ae:	4413      	add	r3, r2
 800c7b0:	00db      	lsls	r3, r3, #3
 800c7b2:	440b      	add	r3, r1
 800c7b4:	3314      	adds	r3, #20
 800c7b6:	781b      	ldrb	r3, [r3, #0]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d115      	bne.n	800c7e8 <etharp_query+0xc4>
    is_new_entry = 1;
 800c7bc:	2301      	movs	r3, #1
 800c7be:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800c7c0:	7c7a      	ldrb	r2, [r7, #17]
 800c7c2:	4972      	ldr	r1, [pc, #456]	; (800c98c <etharp_query+0x268>)
 800c7c4:	4613      	mov	r3, r2
 800c7c6:	005b      	lsls	r3, r3, #1
 800c7c8:	4413      	add	r3, r2
 800c7ca:	00db      	lsls	r3, r3, #3
 800c7cc:	440b      	add	r3, r1
 800c7ce:	3314      	adds	r3, #20
 800c7d0:	2201      	movs	r2, #1
 800c7d2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800c7d4:	7c7a      	ldrb	r2, [r7, #17]
 800c7d6:	496d      	ldr	r1, [pc, #436]	; (800c98c <etharp_query+0x268>)
 800c7d8:	4613      	mov	r3, r2
 800c7da:	005b      	lsls	r3, r3, #1
 800c7dc:	4413      	add	r3, r2
 800c7de:	00db      	lsls	r3, r3, #3
 800c7e0:	440b      	add	r3, r1
 800c7e2:	3308      	adds	r3, #8
 800c7e4:	68fa      	ldr	r2, [r7, #12]
 800c7e6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800c7e8:	7c7a      	ldrb	r2, [r7, #17]
 800c7ea:	4968      	ldr	r1, [pc, #416]	; (800c98c <etharp_query+0x268>)
 800c7ec:	4613      	mov	r3, r2
 800c7ee:	005b      	lsls	r3, r3, #1
 800c7f0:	4413      	add	r3, r2
 800c7f2:	00db      	lsls	r3, r3, #3
 800c7f4:	440b      	add	r3, r1
 800c7f6:	3314      	adds	r3, #20
 800c7f8:	781b      	ldrb	r3, [r3, #0]
 800c7fa:	2b01      	cmp	r3, #1
 800c7fc:	d011      	beq.n	800c822 <etharp_query+0xfe>
 800c7fe:	7c7a      	ldrb	r2, [r7, #17]
 800c800:	4962      	ldr	r1, [pc, #392]	; (800c98c <etharp_query+0x268>)
 800c802:	4613      	mov	r3, r2
 800c804:	005b      	lsls	r3, r3, #1
 800c806:	4413      	add	r3, r2
 800c808:	00db      	lsls	r3, r3, #3
 800c80a:	440b      	add	r3, r1
 800c80c:	3314      	adds	r3, #20
 800c80e:	781b      	ldrb	r3, [r3, #0]
 800c810:	2b01      	cmp	r3, #1
 800c812:	d806      	bhi.n	800c822 <etharp_query+0xfe>
 800c814:	4b5a      	ldr	r3, [pc, #360]	; (800c980 <etharp_query+0x25c>)
 800c816:	f240 32cf 	movw	r2, #975	; 0x3cf
 800c81a:	495d      	ldr	r1, [pc, #372]	; (800c990 <etharp_query+0x26c>)
 800c81c:	485a      	ldr	r0, [pc, #360]	; (800c988 <etharp_query+0x264>)
 800c81e:	f001 fd33 	bl	800e288 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800c822:	6a3b      	ldr	r3, [r7, #32]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d102      	bne.n	800c82e <etharp_query+0x10a>
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d10c      	bne.n	800c848 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800c82e:	68b9      	ldr	r1, [r7, #8]
 800c830:	68f8      	ldr	r0, [r7, #12]
 800c832:	f000 f963 	bl	800cafc <etharp_request>
 800c836:	4603      	mov	r3, r0
 800c838:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d102      	bne.n	800c848 <etharp_query+0x124>
      return result;
 800c842:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c846:	e097      	b.n	800c978 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d106      	bne.n	800c85c <etharp_query+0x138>
 800c84e:	4b4c      	ldr	r3, [pc, #304]	; (800c980 <etharp_query+0x25c>)
 800c850:	f240 32e1 	movw	r2, #993	; 0x3e1
 800c854:	494f      	ldr	r1, [pc, #316]	; (800c994 <etharp_query+0x270>)
 800c856:	484c      	ldr	r0, [pc, #304]	; (800c988 <etharp_query+0x264>)
 800c858:	f001 fd16 	bl	800e288 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800c85c:	7c7a      	ldrb	r2, [r7, #17]
 800c85e:	494b      	ldr	r1, [pc, #300]	; (800c98c <etharp_query+0x268>)
 800c860:	4613      	mov	r3, r2
 800c862:	005b      	lsls	r3, r3, #1
 800c864:	4413      	add	r3, r2
 800c866:	00db      	lsls	r3, r3, #3
 800c868:	440b      	add	r3, r1
 800c86a:	3314      	adds	r3, #20
 800c86c:	781b      	ldrb	r3, [r3, #0]
 800c86e:	2b01      	cmp	r3, #1
 800c870:	d918      	bls.n	800c8a4 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800c872:	4a49      	ldr	r2, [pc, #292]	; (800c998 <etharp_query+0x274>)
 800c874:	7c7b      	ldrb	r3, [r7, #17]
 800c876:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800c878:	7c7a      	ldrb	r2, [r7, #17]
 800c87a:	4613      	mov	r3, r2
 800c87c:	005b      	lsls	r3, r3, #1
 800c87e:	4413      	add	r3, r2
 800c880:	00db      	lsls	r3, r3, #3
 800c882:	3308      	adds	r3, #8
 800c884:	4a41      	ldr	r2, [pc, #260]	; (800c98c <etharp_query+0x268>)
 800c886:	4413      	add	r3, r2
 800c888:	1d1a      	adds	r2, r3, #4
 800c88a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c88e:	9300      	str	r3, [sp, #0]
 800c890:	4613      	mov	r3, r2
 800c892:	697a      	ldr	r2, [r7, #20]
 800c894:	6879      	ldr	r1, [r7, #4]
 800c896:	68f8      	ldr	r0, [r7, #12]
 800c898:	f001 fc68 	bl	800e16c <ethernet_output>
 800c89c:	4603      	mov	r3, r0
 800c89e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c8a2:	e067      	b.n	800c974 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c8a4:	7c7a      	ldrb	r2, [r7, #17]
 800c8a6:	4939      	ldr	r1, [pc, #228]	; (800c98c <etharp_query+0x268>)
 800c8a8:	4613      	mov	r3, r2
 800c8aa:	005b      	lsls	r3, r3, #1
 800c8ac:	4413      	add	r3, r2
 800c8ae:	00db      	lsls	r3, r3, #3
 800c8b0:	440b      	add	r3, r1
 800c8b2:	3314      	adds	r3, #20
 800c8b4:	781b      	ldrb	r3, [r3, #0]
 800c8b6:	2b01      	cmp	r3, #1
 800c8b8:	d15c      	bne.n	800c974 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c8c2:	e01c      	b.n	800c8fe <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800c8c4:	69fb      	ldr	r3, [r7, #28]
 800c8c6:	895a      	ldrh	r2, [r3, #10]
 800c8c8:	69fb      	ldr	r3, [r7, #28]
 800c8ca:	891b      	ldrh	r3, [r3, #8]
 800c8cc:	429a      	cmp	r2, r3
 800c8ce:	d10a      	bne.n	800c8e6 <etharp_query+0x1c2>
 800c8d0:	69fb      	ldr	r3, [r7, #28]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d006      	beq.n	800c8e6 <etharp_query+0x1c2>
 800c8d8:	4b29      	ldr	r3, [pc, #164]	; (800c980 <etharp_query+0x25c>)
 800c8da:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800c8de:	492f      	ldr	r1, [pc, #188]	; (800c99c <etharp_query+0x278>)
 800c8e0:	4829      	ldr	r0, [pc, #164]	; (800c988 <etharp_query+0x264>)
 800c8e2:	f001 fcd1 	bl	800e288 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800c8e6:	69fb      	ldr	r3, [r7, #28]
 800c8e8:	7b1b      	ldrb	r3, [r3, #12]
 800c8ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d002      	beq.n	800c8f8 <etharp_query+0x1d4>
        copy_needed = 1;
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	61bb      	str	r3, [r7, #24]
        break;
 800c8f6:	e005      	b.n	800c904 <etharp_query+0x1e0>
      }
      p = p->next;
 800c8f8:	69fb      	ldr	r3, [r7, #28]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c8fe:	69fb      	ldr	r3, [r7, #28]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d1df      	bne.n	800c8c4 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 800c904:	69bb      	ldr	r3, [r7, #24]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d007      	beq.n	800c91a <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800c90a:	687a      	ldr	r2, [r7, #4]
 800c90c:	f44f 7120 	mov.w	r1, #640	; 0x280
 800c910:	200e      	movs	r0, #14
 800c912:	f7f8 fa77 	bl	8004e04 <pbuf_clone>
 800c916:	61f8      	str	r0, [r7, #28]
 800c918:	e004      	b.n	800c924 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800c91e:	69f8      	ldr	r0, [r7, #28]
 800c920:	f7f8 f8a4 	bl	8004a6c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800c924:	69fb      	ldr	r3, [r7, #28]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d021      	beq.n	800c96e <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800c92a:	7c7a      	ldrb	r2, [r7, #17]
 800c92c:	4917      	ldr	r1, [pc, #92]	; (800c98c <etharp_query+0x268>)
 800c92e:	4613      	mov	r3, r2
 800c930:	005b      	lsls	r3, r3, #1
 800c932:	4413      	add	r3, r2
 800c934:	00db      	lsls	r3, r3, #3
 800c936:	440b      	add	r3, r1
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d00a      	beq.n	800c954 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800c93e:	7c7a      	ldrb	r2, [r7, #17]
 800c940:	4912      	ldr	r1, [pc, #72]	; (800c98c <etharp_query+0x268>)
 800c942:	4613      	mov	r3, r2
 800c944:	005b      	lsls	r3, r3, #1
 800c946:	4413      	add	r3, r2
 800c948:	00db      	lsls	r3, r3, #3
 800c94a:	440b      	add	r3, r1
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	4618      	mov	r0, r3
 800c950:	f7f7 ffec 	bl	800492c <pbuf_free>
      }
      arp_table[i].q = p;
 800c954:	7c7a      	ldrb	r2, [r7, #17]
 800c956:	490d      	ldr	r1, [pc, #52]	; (800c98c <etharp_query+0x268>)
 800c958:	4613      	mov	r3, r2
 800c95a:	005b      	lsls	r3, r3, #1
 800c95c:	4413      	add	r3, r2
 800c95e:	00db      	lsls	r3, r3, #3
 800c960:	440b      	add	r3, r1
 800c962:	69fa      	ldr	r2, [r7, #28]
 800c964:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800c966:	2300      	movs	r3, #0
 800c968:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c96c:	e002      	b.n	800c974 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800c96e:	23ff      	movs	r3, #255	; 0xff
 800c970:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800c974:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c978:	4618      	mov	r0, r3
 800c97a:	3728      	adds	r7, #40	; 0x28
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}
 800c980:	0801145c 	.word	0x0801145c
 800c984:	08011608 	.word	0x08011608
 800c988:	080114d4 	.word	0x080114d4
 800c98c:	20000110 	.word	0x20000110
 800c990:	08011618 	.word	0x08011618
 800c994:	080115fc 	.word	0x080115fc
 800c998:	20000200 	.word	0x20000200
 800c99c:	08011640 	.word	0x08011640

0800c9a0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b08a      	sub	sp, #40	; 0x28
 800c9a4:	af02      	add	r7, sp, #8
 800c9a6:	60f8      	str	r0, [r7, #12]
 800c9a8:	60b9      	str	r1, [r7, #8]
 800c9aa:	607a      	str	r2, [r7, #4]
 800c9ac:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d106      	bne.n	800c9c6 <etharp_raw+0x26>
 800c9b8:	4b3a      	ldr	r3, [pc, #232]	; (800caa4 <etharp_raw+0x104>)
 800c9ba:	f240 4257 	movw	r2, #1111	; 0x457
 800c9be:	493a      	ldr	r1, [pc, #232]	; (800caa8 <etharp_raw+0x108>)
 800c9c0:	483a      	ldr	r0, [pc, #232]	; (800caac <etharp_raw+0x10c>)
 800c9c2:	f001 fc61 	bl	800e288 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800c9c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c9ca:	211c      	movs	r1, #28
 800c9cc:	200e      	movs	r0, #14
 800c9ce:	f7f7 fccd 	bl	800436c <pbuf_alloc>
 800c9d2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800c9d4:	69bb      	ldr	r3, [r7, #24]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d102      	bne.n	800c9e0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800c9da:	f04f 33ff 	mov.w	r3, #4294967295
 800c9de:	e05d      	b.n	800ca9c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800c9e0:	69bb      	ldr	r3, [r7, #24]
 800c9e2:	895b      	ldrh	r3, [r3, #10]
 800c9e4:	2b1b      	cmp	r3, #27
 800c9e6:	d806      	bhi.n	800c9f6 <etharp_raw+0x56>
 800c9e8:	4b2e      	ldr	r3, [pc, #184]	; (800caa4 <etharp_raw+0x104>)
 800c9ea:	f240 4263 	movw	r2, #1123	; 0x463
 800c9ee:	4930      	ldr	r1, [pc, #192]	; (800cab0 <etharp_raw+0x110>)
 800c9f0:	482e      	ldr	r0, [pc, #184]	; (800caac <etharp_raw+0x10c>)
 800c9f2:	f001 fc49 	bl	800e288 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800c9f6:	69bb      	ldr	r3, [r7, #24]
 800c9f8:	685b      	ldr	r3, [r3, #4]
 800c9fa:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800c9fc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f7f6 fcf9 	bl	80033f6 <lwip_htons>
 800ca04:	4603      	mov	r3, r0
 800ca06:	461a      	mov	r2, r3
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca12:	2b06      	cmp	r3, #6
 800ca14:	d006      	beq.n	800ca24 <etharp_raw+0x84>
 800ca16:	4b23      	ldr	r3, [pc, #140]	; (800caa4 <etharp_raw+0x104>)
 800ca18:	f240 426a 	movw	r2, #1130	; 0x46a
 800ca1c:	4925      	ldr	r1, [pc, #148]	; (800cab4 <etharp_raw+0x114>)
 800ca1e:	4823      	ldr	r0, [pc, #140]	; (800caac <etharp_raw+0x10c>)
 800ca20:	f001 fc32 	bl	800e288 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800ca24:	697b      	ldr	r3, [r7, #20]
 800ca26:	3308      	adds	r3, #8
 800ca28:	2206      	movs	r2, #6
 800ca2a:	6839      	ldr	r1, [r7, #0]
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	f001 fc18 	bl	800e262 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	3312      	adds	r3, #18
 800ca36:	2206      	movs	r2, #6
 800ca38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	f001 fc11 	bl	800e262 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800ca40:	697b      	ldr	r3, [r7, #20]
 800ca42:	330e      	adds	r3, #14
 800ca44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca46:	6812      	ldr	r2, [r2, #0]
 800ca48:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800ca4a:	697b      	ldr	r3, [r7, #20]
 800ca4c:	3318      	adds	r3, #24
 800ca4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca50:	6812      	ldr	r2, [r2, #0]
 800ca52:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800ca54:	697b      	ldr	r3, [r7, #20]
 800ca56:	2200      	movs	r2, #0
 800ca58:	701a      	strb	r2, [r3, #0]
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	f042 0201 	orr.w	r2, r2, #1
 800ca60:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800ca62:	697b      	ldr	r3, [r7, #20]
 800ca64:	2200      	movs	r2, #0
 800ca66:	f042 0208 	orr.w	r2, r2, #8
 800ca6a:	709a      	strb	r2, [r3, #2]
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	2206      	movs	r2, #6
 800ca74:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	2204      	movs	r2, #4
 800ca7a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800ca7c:	f640 0306 	movw	r3, #2054	; 0x806
 800ca80:	9300      	str	r3, [sp, #0]
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	68ba      	ldr	r2, [r7, #8]
 800ca86:	69b9      	ldr	r1, [r7, #24]
 800ca88:	68f8      	ldr	r0, [r7, #12]
 800ca8a:	f001 fb6f 	bl	800e16c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800ca8e:	69b8      	ldr	r0, [r7, #24]
 800ca90:	f7f7 ff4c 	bl	800492c <pbuf_free>
  p = NULL;
 800ca94:	2300      	movs	r3, #0
 800ca96:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800ca98:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3720      	adds	r7, #32
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}
 800caa4:	0801145c 	.word	0x0801145c
 800caa8:	080115ac 	.word	0x080115ac
 800caac:	080114d4 	.word	0x080114d4
 800cab0:	0801165c 	.word	0x0801165c
 800cab4:	08011690 	.word	0x08011690

0800cab8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b088      	sub	sp, #32
 800cabc:	af04      	add	r7, sp, #16
 800cabe:	60f8      	str	r0, [r7, #12]
 800cac0:	60b9      	str	r1, [r7, #8]
 800cac2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	f103 0122 	add.w	r1, r3, #34	; 0x22
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	f103 0022 	add.w	r0, r3, #34	; 0x22
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cad4:	2201      	movs	r2, #1
 800cad6:	9203      	str	r2, [sp, #12]
 800cad8:	68ba      	ldr	r2, [r7, #8]
 800cada:	9202      	str	r2, [sp, #8]
 800cadc:	4a06      	ldr	r2, [pc, #24]	; (800caf8 <etharp_request_dst+0x40>)
 800cade:	9201      	str	r2, [sp, #4]
 800cae0:	9300      	str	r3, [sp, #0]
 800cae2:	4603      	mov	r3, r0
 800cae4:	687a      	ldr	r2, [r7, #4]
 800cae6:	68f8      	ldr	r0, [r7, #12]
 800cae8:	f7ff ff5a 	bl	800c9a0 <etharp_raw>
 800caec:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800caee:	4618      	mov	r0, r3
 800caf0:	3710      	adds	r7, #16
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}
 800caf6:	bf00      	nop
 800caf8:	08011c0c 	.word	0x08011c0c

0800cafc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b082      	sub	sp, #8
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
 800cb04:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800cb06:	4a05      	ldr	r2, [pc, #20]	; (800cb1c <etharp_request+0x20>)
 800cb08:	6839      	ldr	r1, [r7, #0]
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f7ff ffd4 	bl	800cab8 <etharp_request_dst>
 800cb10:	4603      	mov	r3, r0
}
 800cb12:	4618      	mov	r0, r3
 800cb14:	3708      	adds	r7, #8
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}
 800cb1a:	bf00      	nop
 800cb1c:	08011c04 	.word	0x08011c04

0800cb20 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b08e      	sub	sp, #56	; 0x38
 800cb24:	af04      	add	r7, sp, #16
 800cb26:	6078      	str	r0, [r7, #4]
 800cb28:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800cb2a:	4b79      	ldr	r3, [pc, #484]	; (800cd10 <icmp_input+0x1f0>)
 800cb2c:	689b      	ldr	r3, [r3, #8]
 800cb2e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800cb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb32:	781b      	ldrb	r3, [r3, #0]
 800cb34:	f003 030f 	and.w	r3, r3, #15
 800cb38:	b2db      	uxtb	r3, r3
 800cb3a:	009b      	lsls	r3, r3, #2
 800cb3c:	b2db      	uxtb	r3, r3
 800cb3e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800cb40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cb42:	2b13      	cmp	r3, #19
 800cb44:	f240 80cd 	bls.w	800cce2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	895b      	ldrh	r3, [r3, #10]
 800cb4c:	2b03      	cmp	r3, #3
 800cb4e:	f240 80ca 	bls.w	800cce6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	685b      	ldr	r3, [r3, #4]
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800cb5c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	f000 80b7 	beq.w	800ccd4 <icmp_input+0x1b4>
 800cb66:	2b08      	cmp	r3, #8
 800cb68:	f040 80b7 	bne.w	800ccda <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800cb6c:	4b69      	ldr	r3, [pc, #420]	; (800cd14 <icmp_input+0x1f4>)
 800cb6e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cb70:	4b67      	ldr	r3, [pc, #412]	; (800cd10 <icmp_input+0x1f0>)
 800cb72:	695b      	ldr	r3, [r3, #20]
 800cb74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cb78:	2be0      	cmp	r3, #224	; 0xe0
 800cb7a:	f000 80bb 	beq.w	800ccf4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800cb7e:	4b64      	ldr	r3, [pc, #400]	; (800cd10 <icmp_input+0x1f0>)
 800cb80:	695a      	ldr	r2, [r3, #20]
 800cb82:	4b63      	ldr	r3, [pc, #396]	; (800cd10 <icmp_input+0x1f0>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	4619      	mov	r1, r3
 800cb88:	4610      	mov	r0, r2
 800cb8a:	f000 fbeb 	bl	800d364 <ip4_addr_isbroadcast_u32>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	f040 80b1 	bne.w	800ccf8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	891b      	ldrh	r3, [r3, #8]
 800cb9a:	2b07      	cmp	r3, #7
 800cb9c:	f240 80a5 	bls.w	800ccea <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800cba0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cba2:	330e      	adds	r3, #14
 800cba4:	4619      	mov	r1, r3
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f7f7 fe2a 	bl	8004800 <pbuf_add_header>
 800cbac:	4603      	mov	r3, r0
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d04b      	beq.n	800cc4a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	891a      	ldrh	r2, [r3, #8]
 800cbb6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cbb8:	4413      	add	r3, r2
 800cbba:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	891b      	ldrh	r3, [r3, #8]
 800cbc0:	8b7a      	ldrh	r2, [r7, #26]
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	f0c0 809a 	bcc.w	800ccfc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800cbc8:	8b7b      	ldrh	r3, [r7, #26]
 800cbca:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cbce:	4619      	mov	r1, r3
 800cbd0:	200e      	movs	r0, #14
 800cbd2:	f7f7 fbcb 	bl	800436c <pbuf_alloc>
 800cbd6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	f000 8090 	beq.w	800cd00 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800cbe0:	697b      	ldr	r3, [r7, #20]
 800cbe2:	895b      	ldrh	r3, [r3, #10]
 800cbe4:	461a      	mov	r2, r3
 800cbe6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cbe8:	3308      	adds	r3, #8
 800cbea:	429a      	cmp	r2, r3
 800cbec:	d203      	bcs.n	800cbf6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800cbee:	6978      	ldr	r0, [r7, #20]
 800cbf0:	f7f7 fe9c 	bl	800492c <pbuf_free>
          goto icmperr;
 800cbf4:	e085      	b.n	800cd02 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800cbf6:	697b      	ldr	r3, [r7, #20]
 800cbf8:	685b      	ldr	r3, [r3, #4]
 800cbfa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cbfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f001 fb2f 	bl	800e262 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800cc04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cc06:	4619      	mov	r1, r3
 800cc08:	6978      	ldr	r0, [r7, #20]
 800cc0a:	f7f7 fe09 	bl	8004820 <pbuf_remove_header>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d009      	beq.n	800cc28 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800cc14:	4b40      	ldr	r3, [pc, #256]	; (800cd18 <icmp_input+0x1f8>)
 800cc16:	22b6      	movs	r2, #182	; 0xb6
 800cc18:	4940      	ldr	r1, [pc, #256]	; (800cd1c <icmp_input+0x1fc>)
 800cc1a:	4841      	ldr	r0, [pc, #260]	; (800cd20 <icmp_input+0x200>)
 800cc1c:	f001 fb34 	bl	800e288 <iprintf>
          pbuf_free(r);
 800cc20:	6978      	ldr	r0, [r7, #20]
 800cc22:	f7f7 fe83 	bl	800492c <pbuf_free>
          goto icmperr;
 800cc26:	e06c      	b.n	800cd02 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800cc28:	6879      	ldr	r1, [r7, #4]
 800cc2a:	6978      	ldr	r0, [r7, #20]
 800cc2c:	f7f7 ffa6 	bl	8004b7c <pbuf_copy>
 800cc30:	4603      	mov	r3, r0
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d003      	beq.n	800cc3e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800cc36:	6978      	ldr	r0, [r7, #20]
 800cc38:	f7f7 fe78 	bl	800492c <pbuf_free>
          goto icmperr;
 800cc3c:	e061      	b.n	800cd02 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f7f7 fe74 	bl	800492c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800cc44:	697b      	ldr	r3, [r7, #20]
 800cc46:	607b      	str	r3, [r7, #4]
 800cc48:	e00f      	b.n	800cc6a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800cc4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cc4c:	330e      	adds	r3, #14
 800cc4e:	4619      	mov	r1, r3
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f7f7 fde5 	bl	8004820 <pbuf_remove_header>
 800cc56:	4603      	mov	r3, r0
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d006      	beq.n	800cc6a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800cc5c:	4b2e      	ldr	r3, [pc, #184]	; (800cd18 <icmp_input+0x1f8>)
 800cc5e:	22c7      	movs	r2, #199	; 0xc7
 800cc60:	4930      	ldr	r1, [pc, #192]	; (800cd24 <icmp_input+0x204>)
 800cc62:	482f      	ldr	r0, [pc, #188]	; (800cd20 <icmp_input+0x200>)
 800cc64:	f001 fb10 	bl	800e288 <iprintf>
          goto icmperr;
 800cc68:	e04b      	b.n	800cd02 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	685b      	ldr	r3, [r3, #4]
 800cc6e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800cc70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cc72:	4619      	mov	r1, r3
 800cc74:	6878      	ldr	r0, [r7, #4]
 800cc76:	f7f7 fdc3 	bl	8004800 <pbuf_add_header>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d12b      	bne.n	800ccd8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	685b      	ldr	r3, [r3, #4]
 800cc84:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800cc86:	69fb      	ldr	r3, [r7, #28]
 800cc88:	681a      	ldr	r2, [r3, #0]
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800cc8e:	4b20      	ldr	r3, [pc, #128]	; (800cd10 <icmp_input+0x1f0>)
 800cc90:	691a      	ldr	r2, [r3, #16]
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800cc96:	693b      	ldr	r3, [r7, #16]
 800cc98:	2200      	movs	r2, #0
 800cc9a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800cc9c:	693b      	ldr	r3, [r7, #16]
 800cc9e:	2200      	movs	r2, #0
 800cca0:	709a      	strb	r2, [r3, #2]
 800cca2:	2200      	movs	r2, #0
 800cca4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	22ff      	movs	r2, #255	; 0xff
 800ccaa:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	729a      	strb	r2, [r3, #10]
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	9302      	str	r3, [sp, #8]
 800ccba:	2301      	movs	r3, #1
 800ccbc:	9301      	str	r3, [sp, #4]
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	9300      	str	r3, [sp, #0]
 800ccc2:	23ff      	movs	r3, #255	; 0xff
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	69f9      	ldr	r1, [r7, #28]
 800ccc8:	6878      	ldr	r0, [r7, #4]
 800ccca:	f000 fa73 	bl	800d1b4 <ip4_output_if>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800ccd2:	e001      	b.n	800ccd8 <icmp_input+0x1b8>
      break;
 800ccd4:	bf00      	nop
 800ccd6:	e000      	b.n	800ccda <icmp_input+0x1ba>
      break;
 800ccd8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	f7f7 fe26 	bl	800492c <pbuf_free>
  return;
 800cce0:	e013      	b.n	800cd0a <icmp_input+0x1ea>
    goto lenerr;
 800cce2:	bf00      	nop
 800cce4:	e002      	b.n	800ccec <icmp_input+0x1cc>
    goto lenerr;
 800cce6:	bf00      	nop
 800cce8:	e000      	b.n	800ccec <icmp_input+0x1cc>
        goto lenerr;
 800ccea:	bf00      	nop
lenerr:
  pbuf_free(p);
 800ccec:	6878      	ldr	r0, [r7, #4]
 800ccee:	f7f7 fe1d 	bl	800492c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ccf2:	e00a      	b.n	800cd0a <icmp_input+0x1ea>
        goto icmperr;
 800ccf4:	bf00      	nop
 800ccf6:	e004      	b.n	800cd02 <icmp_input+0x1e2>
        goto icmperr;
 800ccf8:	bf00      	nop
 800ccfa:	e002      	b.n	800cd02 <icmp_input+0x1e2>
          goto icmperr;
 800ccfc:	bf00      	nop
 800ccfe:	e000      	b.n	800cd02 <icmp_input+0x1e2>
          goto icmperr;
 800cd00:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800cd02:	6878      	ldr	r0, [r7, #4]
 800cd04:	f7f7 fe12 	bl	800492c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800cd08:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800cd0a:	3728      	adds	r7, #40	; 0x28
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}
 800cd10:	20003348 	.word	0x20003348
 800cd14:	2000335c 	.word	0x2000335c
 800cd18:	080116d4 	.word	0x080116d4
 800cd1c:	0801170c 	.word	0x0801170c
 800cd20:	08011744 	.word	0x08011744
 800cd24:	0801176c 	.word	0x0801176c

0800cd28 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b082      	sub	sp, #8
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
 800cd30:	460b      	mov	r3, r1
 800cd32:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800cd34:	78fb      	ldrb	r3, [r7, #3]
 800cd36:	461a      	mov	r2, r3
 800cd38:	2103      	movs	r1, #3
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	f000 f814 	bl	800cd68 <icmp_send_response>
}
 800cd40:	bf00      	nop
 800cd42:	3708      	adds	r7, #8
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}

0800cd48 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b082      	sub	sp, #8
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
 800cd50:	460b      	mov	r3, r1
 800cd52:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800cd54:	78fb      	ldrb	r3, [r7, #3]
 800cd56:	461a      	mov	r2, r3
 800cd58:	210b      	movs	r1, #11
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f000 f804 	bl	800cd68 <icmp_send_response>
}
 800cd60:	bf00      	nop
 800cd62:	3708      	adds	r7, #8
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd80      	pop	{r7, pc}

0800cd68 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b08c      	sub	sp, #48	; 0x30
 800cd6c:	af04      	add	r7, sp, #16
 800cd6e:	6078      	str	r0, [r7, #4]
 800cd70:	460b      	mov	r3, r1
 800cd72:	70fb      	strb	r3, [r7, #3]
 800cd74:	4613      	mov	r3, r2
 800cd76:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800cd78:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cd7c:	2124      	movs	r1, #36	; 0x24
 800cd7e:	2022      	movs	r0, #34	; 0x22
 800cd80:	f7f7 faf4 	bl	800436c <pbuf_alloc>
 800cd84:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800cd86:	69fb      	ldr	r3, [r7, #28]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d04c      	beq.n	800ce26 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800cd8c:	69fb      	ldr	r3, [r7, #28]
 800cd8e:	895b      	ldrh	r3, [r3, #10]
 800cd90:	2b23      	cmp	r3, #35	; 0x23
 800cd92:	d806      	bhi.n	800cda2 <icmp_send_response+0x3a>
 800cd94:	4b26      	ldr	r3, [pc, #152]	; (800ce30 <icmp_send_response+0xc8>)
 800cd96:	f240 1269 	movw	r2, #361	; 0x169
 800cd9a:	4926      	ldr	r1, [pc, #152]	; (800ce34 <icmp_send_response+0xcc>)
 800cd9c:	4826      	ldr	r0, [pc, #152]	; (800ce38 <icmp_send_response+0xd0>)
 800cd9e:	f001 fa73 	bl	800e288 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	685b      	ldr	r3, [r3, #4]
 800cda6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800cda8:	69fb      	ldr	r3, [r7, #28]
 800cdaa:	685b      	ldr	r3, [r3, #4]
 800cdac:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800cdae:	697b      	ldr	r3, [r7, #20]
 800cdb0:	78fa      	ldrb	r2, [r7, #3]
 800cdb2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800cdb4:	697b      	ldr	r3, [r7, #20]
 800cdb6:	78ba      	ldrb	r2, [r7, #2]
 800cdb8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800cdba:	697b      	ldr	r3, [r7, #20]
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	711a      	strb	r2, [r3, #4]
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800cdc4:	697b      	ldr	r3, [r7, #20]
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	719a      	strb	r2, [r3, #6]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800cdce:	69fb      	ldr	r3, [r7, #28]
 800cdd0:	685b      	ldr	r3, [r3, #4]
 800cdd2:	f103 0008 	add.w	r0, r3, #8
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	685b      	ldr	r3, [r3, #4]
 800cdda:	221c      	movs	r2, #28
 800cddc:	4619      	mov	r1, r3
 800cdde:	f001 fa40 	bl	800e262 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800cde2:	69bb      	ldr	r3, [r7, #24]
 800cde4:	68db      	ldr	r3, [r3, #12]
 800cde6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800cde8:	f107 030c 	add.w	r3, r7, #12
 800cdec:	4618      	mov	r0, r3
 800cdee:	f000 f825 	bl	800ce3c <ip4_route>
 800cdf2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800cdf4:	693b      	ldr	r3, [r7, #16]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d011      	beq.n	800ce1e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800cdfa:	697b      	ldr	r3, [r7, #20]
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	709a      	strb	r2, [r3, #2]
 800ce00:	2200      	movs	r2, #0
 800ce02:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800ce04:	f107 020c 	add.w	r2, r7, #12
 800ce08:	693b      	ldr	r3, [r7, #16]
 800ce0a:	9302      	str	r3, [sp, #8]
 800ce0c:	2301      	movs	r3, #1
 800ce0e:	9301      	str	r3, [sp, #4]
 800ce10:	2300      	movs	r3, #0
 800ce12:	9300      	str	r3, [sp, #0]
 800ce14:	23ff      	movs	r3, #255	; 0xff
 800ce16:	2100      	movs	r1, #0
 800ce18:	69f8      	ldr	r0, [r7, #28]
 800ce1a:	f000 f9cb 	bl	800d1b4 <ip4_output_if>
  }
  pbuf_free(q);
 800ce1e:	69f8      	ldr	r0, [r7, #28]
 800ce20:	f7f7 fd84 	bl	800492c <pbuf_free>
 800ce24:	e000      	b.n	800ce28 <icmp_send_response+0xc0>
    return;
 800ce26:	bf00      	nop
}
 800ce28:	3720      	adds	r7, #32
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}
 800ce2e:	bf00      	nop
 800ce30:	080116d4 	.word	0x080116d4
 800ce34:	080117a0 	.word	0x080117a0
 800ce38:	08011744 	.word	0x08011744

0800ce3c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800ce3c:	b480      	push	{r7}
 800ce3e:	b085      	sub	sp, #20
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800ce44:	4b33      	ldr	r3, [pc, #204]	; (800cf14 <ip4_route+0xd8>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	60fb      	str	r3, [r7, #12]
 800ce4a:	e036      	b.n	800ceba <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800ce52:	f003 0301 	and.w	r3, r3, #1
 800ce56:	b2db      	uxtb	r3, r3
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d02b      	beq.n	800ceb4 <ip4_route+0x78>
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800ce62:	089b      	lsrs	r3, r3, #2
 800ce64:	f003 0301 	and.w	r3, r3, #1
 800ce68:	b2db      	uxtb	r3, r3
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d022      	beq.n	800ceb4 <ip4_route+0x78>
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	3304      	adds	r3, #4
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d01d      	beq.n	800ceb4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681a      	ldr	r2, [r3, #0]
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	3304      	adds	r3, #4
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	405a      	eors	r2, r3
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	3308      	adds	r3, #8
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	4013      	ands	r3, r2
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d101      	bne.n	800ce94 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	e038      	b.n	800cf06 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800ce9a:	f003 0302 	and.w	r3, r3, #2
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d108      	bne.n	800ceb4 <ip4_route+0x78>
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681a      	ldr	r2, [r3, #0]
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	330c      	adds	r3, #12
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	429a      	cmp	r2, r3
 800ceae:	d101      	bne.n	800ceb4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	e028      	b.n	800cf06 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	60fb      	str	r3, [r7, #12]
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d1c5      	bne.n	800ce4c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800cec0:	4b15      	ldr	r3, [pc, #84]	; (800cf18 <ip4_route+0xdc>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d01a      	beq.n	800cefe <ip4_route+0xc2>
 800cec8:	4b13      	ldr	r3, [pc, #76]	; (800cf18 <ip4_route+0xdc>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800ced0:	f003 0301 	and.w	r3, r3, #1
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d012      	beq.n	800cefe <ip4_route+0xc2>
 800ced8:	4b0f      	ldr	r3, [pc, #60]	; (800cf18 <ip4_route+0xdc>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800cee0:	f003 0304 	and.w	r3, r3, #4
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d00a      	beq.n	800cefe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800cee8:	4b0b      	ldr	r3, [pc, #44]	; (800cf18 <ip4_route+0xdc>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	3304      	adds	r3, #4
 800ceee:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d004      	beq.n	800cefe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	b2db      	uxtb	r3, r3
 800cefa:	2b7f      	cmp	r3, #127	; 0x7f
 800cefc:	d101      	bne.n	800cf02 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800cefe:	2300      	movs	r3, #0
 800cf00:	e001      	b.n	800cf06 <ip4_route+0xca>
  }

  return netif_default;
 800cf02:	4b05      	ldr	r3, [pc, #20]	; (800cf18 <ip4_route+0xdc>)
 800cf04:	681b      	ldr	r3, [r3, #0]
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3714      	adds	r7, #20
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf10:	4770      	bx	lr
 800cf12:	bf00      	nop
 800cf14:	2000687c 	.word	0x2000687c
 800cf18:	20006880 	.word	0x20006880

0800cf1c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b082      	sub	sp, #8
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800cf2a:	f003 0301 	and.w	r3, r3, #1
 800cf2e:	b2db      	uxtb	r3, r3
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d016      	beq.n	800cf62 <ip4_input_accept+0x46>
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	3304      	adds	r3, #4
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d011      	beq.n	800cf62 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800cf3e:	4b0b      	ldr	r3, [pc, #44]	; (800cf6c <ip4_input_accept+0x50>)
 800cf40:	695a      	ldr	r2, [r3, #20]
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	3304      	adds	r3, #4
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	d008      	beq.n	800cf5e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800cf4c:	4b07      	ldr	r3, [pc, #28]	; (800cf6c <ip4_input_accept+0x50>)
 800cf4e:	695b      	ldr	r3, [r3, #20]
 800cf50:	6879      	ldr	r1, [r7, #4]
 800cf52:	4618      	mov	r0, r3
 800cf54:	f000 fa06 	bl	800d364 <ip4_addr_isbroadcast_u32>
 800cf58:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d001      	beq.n	800cf62 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800cf5e:	2301      	movs	r3, #1
 800cf60:	e000      	b.n	800cf64 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800cf62:	2300      	movs	r3, #0
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3708      	adds	r7, #8
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}
 800cf6c:	20003348 	.word	0x20003348

0800cf70 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b086      	sub	sp, #24
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
 800cf78:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	685b      	ldr	r3, [r3, #4]
 800cf7e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800cf80:	697b      	ldr	r3, [r7, #20]
 800cf82:	781b      	ldrb	r3, [r3, #0]
 800cf84:	091b      	lsrs	r3, r3, #4
 800cf86:	b2db      	uxtb	r3, r3
 800cf88:	2b04      	cmp	r3, #4
 800cf8a:	d004      	beq.n	800cf96 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800cf8c:	6878      	ldr	r0, [r7, #4]
 800cf8e:	f7f7 fccd 	bl	800492c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800cf92:	2300      	movs	r3, #0
 800cf94:	e105      	b.n	800d1a2 <ip4_input+0x232>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800cf96:	697b      	ldr	r3, [r7, #20]
 800cf98:	781b      	ldrb	r3, [r3, #0]
 800cf9a:	f003 030f 	and.w	r3, r3, #15
 800cf9e:	b2db      	uxtb	r3, r3
 800cfa0:	009b      	lsls	r3, r3, #2
 800cfa2:	b2db      	uxtb	r3, r3
 800cfa4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	885b      	ldrh	r3, [r3, #2]
 800cfaa:	b29b      	uxth	r3, r3
 800cfac:	4618      	mov	r0, r3
 800cfae:	f7f6 fa22 	bl	80033f6 <lwip_htons>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	891b      	ldrh	r3, [r3, #8]
 800cfba:	89ba      	ldrh	r2, [r7, #12]
 800cfbc:	429a      	cmp	r2, r3
 800cfbe:	d204      	bcs.n	800cfca <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800cfc0:	89bb      	ldrh	r3, [r7, #12]
 800cfc2:	4619      	mov	r1, r3
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	f7f7 fb2b 	bl	8004620 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	895b      	ldrh	r3, [r3, #10]
 800cfce:	89fa      	ldrh	r2, [r7, #14]
 800cfd0:	429a      	cmp	r2, r3
 800cfd2:	d807      	bhi.n	800cfe4 <ip4_input+0x74>
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	891b      	ldrh	r3, [r3, #8]
 800cfd8:	89ba      	ldrh	r2, [r7, #12]
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	d802      	bhi.n	800cfe4 <ip4_input+0x74>
 800cfde:	89fb      	ldrh	r3, [r7, #14]
 800cfe0:	2b13      	cmp	r3, #19
 800cfe2:	d804      	bhi.n	800cfee <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f7f7 fca1 	bl	800492c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800cfea:	2300      	movs	r3, #0
 800cfec:	e0d9      	b.n	800d1a2 <ip4_input+0x232>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800cfee:	697b      	ldr	r3, [r7, #20]
 800cff0:	691b      	ldr	r3, [r3, #16]
 800cff2:	4a6e      	ldr	r2, [pc, #440]	; (800d1ac <ip4_input+0x23c>)
 800cff4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800cff6:	697b      	ldr	r3, [r7, #20]
 800cff8:	68db      	ldr	r3, [r3, #12]
 800cffa:	4a6c      	ldr	r2, [pc, #432]	; (800d1ac <ip4_input+0x23c>)
 800cffc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cffe:	4b6b      	ldr	r3, [pc, #428]	; (800d1ac <ip4_input+0x23c>)
 800d000:	695b      	ldr	r3, [r3, #20]
 800d002:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d006:	2be0      	cmp	r3, #224	; 0xe0
 800d008:	d112      	bne.n	800d030 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800d010:	f003 0301 	and.w	r3, r3, #1
 800d014:	b2db      	uxtb	r3, r3
 800d016:	2b00      	cmp	r3, #0
 800d018:	d007      	beq.n	800d02a <ip4_input+0xba>
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	3304      	adds	r3, #4
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d002      	beq.n	800d02a <ip4_input+0xba>
      netif = inp;
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	613b      	str	r3, [r7, #16]
 800d028:	e02a      	b.n	800d080 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d02a:	2300      	movs	r3, #0
 800d02c:	613b      	str	r3, [r7, #16]
 800d02e:	e027      	b.n	800d080 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800d030:	6838      	ldr	r0, [r7, #0]
 800d032:	f7ff ff73 	bl	800cf1c <ip4_input_accept>
 800d036:	4603      	mov	r3, r0
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d002      	beq.n	800d042 <ip4_input+0xd2>
      netif = inp;
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	613b      	str	r3, [r7, #16]
 800d040:	e01e      	b.n	800d080 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d042:	2300      	movs	r3, #0
 800d044:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800d046:	4b59      	ldr	r3, [pc, #356]	; (800d1ac <ip4_input+0x23c>)
 800d048:	695b      	ldr	r3, [r3, #20]
 800d04a:	b2db      	uxtb	r3, r3
 800d04c:	2b7f      	cmp	r3, #127	; 0x7f
 800d04e:	d017      	beq.n	800d080 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800d050:	4b57      	ldr	r3, [pc, #348]	; (800d1b0 <ip4_input+0x240>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	613b      	str	r3, [r7, #16]
 800d056:	e00e      	b.n	800d076 <ip4_input+0x106>
          if (netif == inp) {
 800d058:	693a      	ldr	r2, [r7, #16]
 800d05a:	683b      	ldr	r3, [r7, #0]
 800d05c:	429a      	cmp	r2, r3
 800d05e:	d006      	beq.n	800d06e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800d060:	6938      	ldr	r0, [r7, #16]
 800d062:	f7ff ff5b 	bl	800cf1c <ip4_input_accept>
 800d066:	4603      	mov	r3, r0
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d108      	bne.n	800d07e <ip4_input+0x10e>
 800d06c:	e000      	b.n	800d070 <ip4_input+0x100>
            continue;
 800d06e:	bf00      	nop
        NETIF_FOREACH(netif) {
 800d070:	693b      	ldr	r3, [r7, #16]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	613b      	str	r3, [r7, #16]
 800d076:	693b      	ldr	r3, [r7, #16]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d1ed      	bne.n	800d058 <ip4_input+0xe8>
 800d07c:	e000      	b.n	800d080 <ip4_input+0x110>
            break;
 800d07e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d080:	4b4a      	ldr	r3, [pc, #296]	; (800d1ac <ip4_input+0x23c>)
 800d082:	691b      	ldr	r3, [r3, #16]
 800d084:	6839      	ldr	r1, [r7, #0]
 800d086:	4618      	mov	r0, r3
 800d088:	f000 f96c 	bl	800d364 <ip4_addr_isbroadcast_u32>
 800d08c:	4603      	mov	r3, r0
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d105      	bne.n	800d09e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800d092:	4b46      	ldr	r3, [pc, #280]	; (800d1ac <ip4_input+0x23c>)
 800d094:	691b      	ldr	r3, [r3, #16]
 800d096:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d09a:	2be0      	cmp	r3, #224	; 0xe0
 800d09c:	d104      	bne.n	800d0a8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800d09e:	6878      	ldr	r0, [r7, #4]
 800d0a0:	f7f7 fc44 	bl	800492c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	e07c      	b.n	800d1a2 <ip4_input+0x232>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800d0a8:	693b      	ldr	r3, [r7, #16]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d104      	bne.n	800d0b8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f7f7 fc3c 	bl	800492c <pbuf_free>
    return ERR_OK;
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	e074      	b.n	800d1a2 <ip4_input+0x232>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800d0b8:	697b      	ldr	r3, [r7, #20]
 800d0ba:	88db      	ldrh	r3, [r3, #6]
 800d0bc:	b29b      	uxth	r3, r3
 800d0be:	461a      	mov	r2, r3
 800d0c0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800d0c4:	4013      	ands	r3, r2
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d00b      	beq.n	800d0e2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	f000 fc90 	bl	800d9f0 <ip4_reass>
 800d0d0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d101      	bne.n	800d0dc <ip4_input+0x16c>
      return ERR_OK;
 800d0d8:	2300      	movs	r3, #0
 800d0da:	e062      	b.n	800d1a2 <ip4_input+0x232>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	685b      	ldr	r3, [r3, #4]
 800d0e0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800d0e2:	4a32      	ldr	r2, [pc, #200]	; (800d1ac <ip4_input+0x23c>)
 800d0e4:	693b      	ldr	r3, [r7, #16]
 800d0e6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800d0e8:	4a30      	ldr	r2, [pc, #192]	; (800d1ac <ip4_input+0x23c>)
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800d0ee:	4a2f      	ldr	r2, [pc, #188]	; (800d1ac <ip4_input+0x23c>)
 800d0f0:	697b      	ldr	r3, [r7, #20]
 800d0f2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800d0f4:	697b      	ldr	r3, [r7, #20]
 800d0f6:	781b      	ldrb	r3, [r3, #0]
 800d0f8:	f003 030f 	and.w	r3, r3, #15
 800d0fc:	b2db      	uxtb	r3, r3
 800d0fe:	009b      	lsls	r3, r3, #2
 800d100:	b2db      	uxtb	r3, r3
 800d102:	b29a      	uxth	r2, r3
 800d104:	4b29      	ldr	r3, [pc, #164]	; (800d1ac <ip4_input+0x23c>)
 800d106:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800d108:	89fb      	ldrh	r3, [r7, #14]
 800d10a:	4619      	mov	r1, r3
 800d10c:	6878      	ldr	r0, [r7, #4]
 800d10e:	f7f7 fb87 	bl	8004820 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	7a5b      	ldrb	r3, [r3, #9]
 800d116:	2b06      	cmp	r3, #6
 800d118:	d009      	beq.n	800d12e <ip4_input+0x1be>
 800d11a:	2b11      	cmp	r3, #17
 800d11c:	d002      	beq.n	800d124 <ip4_input+0x1b4>
 800d11e:	2b01      	cmp	r3, #1
 800d120:	d00a      	beq.n	800d138 <ip4_input+0x1c8>
 800d122:	e00e      	b.n	800d142 <ip4_input+0x1d2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800d124:	6839      	ldr	r1, [r7, #0]
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f7fe f8e8 	bl	800b2fc <udp_input>
        break;
 800d12c:	e026      	b.n	800d17c <ip4_input+0x20c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800d12e:	6839      	ldr	r1, [r7, #0]
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	f7f9 fcc7 	bl	8006ac4 <tcp_input>
        break;
 800d136:	e021      	b.n	800d17c <ip4_input+0x20c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800d138:	6839      	ldr	r1, [r7, #0]
 800d13a:	6878      	ldr	r0, [r7, #4]
 800d13c:	f7ff fcf0 	bl	800cb20 <icmp_input>
        break;
 800d140:	e01c      	b.n	800d17c <ip4_input+0x20c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d142:	4b1a      	ldr	r3, [pc, #104]	; (800d1ac <ip4_input+0x23c>)
 800d144:	695b      	ldr	r3, [r3, #20]
 800d146:	6939      	ldr	r1, [r7, #16]
 800d148:	4618      	mov	r0, r3
 800d14a:	f000 f90b 	bl	800d364 <ip4_addr_isbroadcast_u32>
 800d14e:	4603      	mov	r3, r0
 800d150:	2b00      	cmp	r3, #0
 800d152:	d10f      	bne.n	800d174 <ip4_input+0x204>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d154:	4b15      	ldr	r3, [pc, #84]	; (800d1ac <ip4_input+0x23c>)
 800d156:	695b      	ldr	r3, [r3, #20]
 800d158:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d15c:	2be0      	cmp	r3, #224	; 0xe0
 800d15e:	d009      	beq.n	800d174 <ip4_input+0x204>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800d160:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d164:	4619      	mov	r1, r3
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f7f7 fbcd 	bl	8004906 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800d16c:	2102      	movs	r1, #2
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f7ff fdda 	bl	800cd28 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800d174:	6878      	ldr	r0, [r7, #4]
 800d176:	f7f7 fbd9 	bl	800492c <pbuf_free>
        break;
 800d17a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800d17c:	4b0b      	ldr	r3, [pc, #44]	; (800d1ac <ip4_input+0x23c>)
 800d17e:	2200      	movs	r2, #0
 800d180:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800d182:	4b0a      	ldr	r3, [pc, #40]	; (800d1ac <ip4_input+0x23c>)
 800d184:	2200      	movs	r2, #0
 800d186:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800d188:	4b08      	ldr	r3, [pc, #32]	; (800d1ac <ip4_input+0x23c>)
 800d18a:	2200      	movs	r2, #0
 800d18c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800d18e:	4b07      	ldr	r3, [pc, #28]	; (800d1ac <ip4_input+0x23c>)
 800d190:	2200      	movs	r2, #0
 800d192:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800d194:	4b05      	ldr	r3, [pc, #20]	; (800d1ac <ip4_input+0x23c>)
 800d196:	2200      	movs	r2, #0
 800d198:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800d19a:	4b04      	ldr	r3, [pc, #16]	; (800d1ac <ip4_input+0x23c>)
 800d19c:	2200      	movs	r2, #0
 800d19e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800d1a0:	2300      	movs	r3, #0
}
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	3718      	adds	r7, #24
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd80      	pop	{r7, pc}
 800d1aa:	bf00      	nop
 800d1ac:	20003348 	.word	0x20003348
 800d1b0:	2000687c 	.word	0x2000687c

0800d1b4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b08a      	sub	sp, #40	; 0x28
 800d1b8:	af04      	add	r7, sp, #16
 800d1ba:	60f8      	str	r0, [r7, #12]
 800d1bc:	60b9      	str	r1, [r7, #8]
 800d1be:	607a      	str	r2, [r7, #4]
 800d1c0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800d1c2:	68bb      	ldr	r3, [r7, #8]
 800d1c4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d009      	beq.n	800d1e0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800d1cc:	68bb      	ldr	r3, [r7, #8]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d003      	beq.n	800d1da <ip4_output_if+0x26>
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d102      	bne.n	800d1e0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800d1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1dc:	3304      	adds	r3, #4
 800d1de:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d1e0:	78fa      	ldrb	r2, [r7, #3]
 800d1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1e4:	9302      	str	r3, [sp, #8]
 800d1e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d1ea:	9301      	str	r3, [sp, #4]
 800d1ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d1f0:	9300      	str	r3, [sp, #0]
 800d1f2:	4613      	mov	r3, r2
 800d1f4:	687a      	ldr	r2, [r7, #4]
 800d1f6:	6979      	ldr	r1, [r7, #20]
 800d1f8:	68f8      	ldr	r0, [r7, #12]
 800d1fa:	f000 f805 	bl	800d208 <ip4_output_if_src>
 800d1fe:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800d200:	4618      	mov	r0, r3
 800d202:	3718      	adds	r7, #24
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}

0800d208 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b088      	sub	sp, #32
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	60f8      	str	r0, [r7, #12]
 800d210:	60b9      	str	r1, [r7, #8]
 800d212:	607a      	str	r2, [r7, #4]
 800d214:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	7b9b      	ldrb	r3, [r3, #14]
 800d21a:	2b01      	cmp	r3, #1
 800d21c:	d006      	beq.n	800d22c <ip4_output_if_src+0x24>
 800d21e:	4b4b      	ldr	r3, [pc, #300]	; (800d34c <ip4_output_if_src+0x144>)
 800d220:	f44f 7255 	mov.w	r2, #852	; 0x354
 800d224:	494a      	ldr	r1, [pc, #296]	; (800d350 <ip4_output_if_src+0x148>)
 800d226:	484b      	ldr	r0, [pc, #300]	; (800d354 <ip4_output_if_src+0x14c>)
 800d228:	f001 f82e 	bl	800e288 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d060      	beq.n	800d2f4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800d232:	2314      	movs	r3, #20
 800d234:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800d236:	2114      	movs	r1, #20
 800d238:	68f8      	ldr	r0, [r7, #12]
 800d23a:	f7f7 fae1 	bl	8004800 <pbuf_add_header>
 800d23e:	4603      	mov	r3, r0
 800d240:	2b00      	cmp	r3, #0
 800d242:	d002      	beq.n	800d24a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d244:	f06f 0301 	mvn.w	r3, #1
 800d248:	e07c      	b.n	800d344 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	685b      	ldr	r3, [r3, #4]
 800d24e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	895b      	ldrh	r3, [r3, #10]
 800d254:	2b13      	cmp	r3, #19
 800d256:	d806      	bhi.n	800d266 <ip4_output_if_src+0x5e>
 800d258:	4b3c      	ldr	r3, [pc, #240]	; (800d34c <ip4_output_if_src+0x144>)
 800d25a:	f240 3289 	movw	r2, #905	; 0x389
 800d25e:	493e      	ldr	r1, [pc, #248]	; (800d358 <ip4_output_if_src+0x150>)
 800d260:	483c      	ldr	r0, [pc, #240]	; (800d354 <ip4_output_if_src+0x14c>)
 800d262:	f001 f811 	bl	800e288 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800d266:	69fb      	ldr	r3, [r7, #28]
 800d268:	78fa      	ldrb	r2, [r7, #3]
 800d26a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800d26c:	69fb      	ldr	r3, [r7, #28]
 800d26e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d272:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681a      	ldr	r2, [r3, #0]
 800d278:	69fb      	ldr	r3, [r7, #28]
 800d27a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d27c:	8b7b      	ldrh	r3, [r7, #26]
 800d27e:	089b      	lsrs	r3, r3, #2
 800d280:	b29b      	uxth	r3, r3
 800d282:	b2db      	uxtb	r3, r3
 800d284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d288:	b2da      	uxtb	r2, r3
 800d28a:	69fb      	ldr	r3, [r7, #28]
 800d28c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800d28e:	69fb      	ldr	r3, [r7, #28]
 800d290:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d294:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	891b      	ldrh	r3, [r3, #8]
 800d29a:	4618      	mov	r0, r3
 800d29c:	f7f6 f8ab 	bl	80033f6 <lwip_htons>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	461a      	mov	r2, r3
 800d2a4:	69fb      	ldr	r3, [r7, #28]
 800d2a6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800d2a8:	69fb      	ldr	r3, [r7, #28]
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	719a      	strb	r2, [r3, #6]
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d2b2:	4b2a      	ldr	r3, [pc, #168]	; (800d35c <ip4_output_if_src+0x154>)
 800d2b4:	881b      	ldrh	r3, [r3, #0]
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f7f6 f89d 	bl	80033f6 <lwip_htons>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	461a      	mov	r2, r3
 800d2c0:	69fb      	ldr	r3, [r7, #28]
 800d2c2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d2c4:	4b25      	ldr	r3, [pc, #148]	; (800d35c <ip4_output_if_src+0x154>)
 800d2c6:	881b      	ldrh	r3, [r3, #0]
 800d2c8:	3301      	adds	r3, #1
 800d2ca:	b29a      	uxth	r2, r3
 800d2cc:	4b23      	ldr	r3, [pc, #140]	; (800d35c <ip4_output_if_src+0x154>)
 800d2ce:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800d2d0:	68bb      	ldr	r3, [r7, #8]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d104      	bne.n	800d2e0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d2d6:	4b22      	ldr	r3, [pc, #136]	; (800d360 <ip4_output_if_src+0x158>)
 800d2d8:	681a      	ldr	r2, [r3, #0]
 800d2da:	69fb      	ldr	r3, [r7, #28]
 800d2dc:	60da      	str	r2, [r3, #12]
 800d2de:	e003      	b.n	800d2e8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	681a      	ldr	r2, [r3, #0]
 800d2e4:	69fb      	ldr	r3, [r7, #28]
 800d2e6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800d2e8:	69fb      	ldr	r3, [r7, #28]
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	729a      	strb	r2, [r3, #10]
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	72da      	strb	r2, [r3, #11]
 800d2f2:	e00f      	b.n	800d314 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	895b      	ldrh	r3, [r3, #10]
 800d2f8:	2b13      	cmp	r3, #19
 800d2fa:	d802      	bhi.n	800d302 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d2fc:	f06f 0301 	mvn.w	r3, #1
 800d300:	e020      	b.n	800d344 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	685b      	ldr	r3, [r3, #4]
 800d306:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d308:	69fb      	ldr	r3, [r7, #28]
 800d30a:	691b      	ldr	r3, [r3, #16]
 800d30c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800d30e:	f107 0314 	add.w	r3, r7, #20
 800d312:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d316:	8c1b      	ldrh	r3, [r3, #32]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d00c      	beq.n	800d336 <ip4_output_if_src+0x12e>
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	891a      	ldrh	r2, [r3, #8]
 800d320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d322:	8c1b      	ldrh	r3, [r3, #32]
 800d324:	429a      	cmp	r2, r3
 800d326:	d906      	bls.n	800d336 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800d328:	687a      	ldr	r2, [r7, #4]
 800d32a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d32c:	68f8      	ldr	r0, [r7, #12]
 800d32e:	f000 fd4b 	bl	800ddc8 <ip4_frag>
 800d332:	4603      	mov	r3, r0
 800d334:	e006      	b.n	800d344 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800d336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d338:	695b      	ldr	r3, [r3, #20]
 800d33a:	687a      	ldr	r2, [r7, #4]
 800d33c:	68f9      	ldr	r1, [r7, #12]
 800d33e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d340:	4798      	blx	r3
 800d342:	4603      	mov	r3, r0
}
 800d344:	4618      	mov	r0, r3
 800d346:	3720      	adds	r7, #32
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}
 800d34c:	080117cc 	.word	0x080117cc
 800d350:	08011800 	.word	0x08011800
 800d354:	0801180c 	.word	0x0801180c
 800d358:	08011834 	.word	0x08011834
 800d35c:	20000202 	.word	0x20000202
 800d360:	08011c00 	.word	0x08011c00

0800d364 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800d364:	b480      	push	{r7}
 800d366:	b085      	sub	sp, #20
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
 800d36c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d378:	d002      	beq.n	800d380 <ip4_addr_isbroadcast_u32+0x1c>
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d101      	bne.n	800d384 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800d380:	2301      	movs	r3, #1
 800d382:	e02a      	b.n	800d3da <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800d38a:	f003 0302 	and.w	r3, r3, #2
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d101      	bne.n	800d396 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800d392:	2300      	movs	r3, #0
 800d394:	e021      	b.n	800d3da <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	3304      	adds	r3, #4
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	687a      	ldr	r2, [r7, #4]
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	d101      	bne.n	800d3a6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	e019      	b.n	800d3da <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800d3a6:	68fa      	ldr	r2, [r7, #12]
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	3304      	adds	r3, #4
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	405a      	eors	r2, r3
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	3308      	adds	r3, #8
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	4013      	ands	r3, r2
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d10d      	bne.n	800d3d8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	3308      	adds	r3, #8
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	43da      	mvns	r2, r3
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	3308      	adds	r3, #8
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d3d0:	429a      	cmp	r2, r3
 800d3d2:	d101      	bne.n	800d3d8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	e000      	b.n	800d3da <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800d3d8:	2300      	movs	r3, #0
  }
}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	3714      	adds	r7, #20
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e4:	4770      	bx	lr
	...

0800d3e8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b084      	sub	sp, #16
 800d3ec:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800d3f2:	4b12      	ldr	r3, [pc, #72]	; (800d43c <ip_reass_tmr+0x54>)
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800d3f8:	e018      	b.n	800d42c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	7fdb      	ldrb	r3, [r3, #31]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d00b      	beq.n	800d41a <ip_reass_tmr+0x32>
      r->timer--;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	7fdb      	ldrb	r3, [r3, #31]
 800d406:	3b01      	subs	r3, #1
 800d408:	b2da      	uxtb	r2, r3
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	60fb      	str	r3, [r7, #12]
 800d418:	e008      	b.n	800d42c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800d424:	68b9      	ldr	r1, [r7, #8]
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	f000 f80a 	bl	800d440 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d1e3      	bne.n	800d3fa <ip_reass_tmr+0x12>
    }
  }
}
 800d432:	bf00      	nop
 800d434:	3710      	adds	r7, #16
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}
 800d43a:	bf00      	nop
 800d43c:	20000204 	.word	0x20000204

0800d440 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b088      	sub	sp, #32
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
 800d448:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800d44a:	2300      	movs	r3, #0
 800d44c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d44e:	683a      	ldr	r2, [r7, #0]
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	429a      	cmp	r2, r3
 800d454:	d105      	bne.n	800d462 <ip_reass_free_complete_datagram+0x22>
 800d456:	4b45      	ldr	r3, [pc, #276]	; (800d56c <ip_reass_free_complete_datagram+0x12c>)
 800d458:	22ab      	movs	r2, #171	; 0xab
 800d45a:	4945      	ldr	r1, [pc, #276]	; (800d570 <ip_reass_free_complete_datagram+0x130>)
 800d45c:	4845      	ldr	r0, [pc, #276]	; (800d574 <ip_reass_free_complete_datagram+0x134>)
 800d45e:	f000 ff13 	bl	800e288 <iprintf>
  if (prev != NULL) {
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d00a      	beq.n	800d47e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	687a      	ldr	r2, [r7, #4]
 800d46e:	429a      	cmp	r2, r3
 800d470:	d005      	beq.n	800d47e <ip_reass_free_complete_datagram+0x3e>
 800d472:	4b3e      	ldr	r3, [pc, #248]	; (800d56c <ip_reass_free_complete_datagram+0x12c>)
 800d474:	22ad      	movs	r2, #173	; 0xad
 800d476:	4940      	ldr	r1, [pc, #256]	; (800d578 <ip_reass_free_complete_datagram+0x138>)
 800d478:	483e      	ldr	r0, [pc, #248]	; (800d574 <ip_reass_free_complete_datagram+0x134>)
 800d47a:	f000 ff05 	bl	800e288 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	685b      	ldr	r3, [r3, #4]
 800d482:	685b      	ldr	r3, [r3, #4]
 800d484:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800d486:	697b      	ldr	r3, [r7, #20]
 800d488:	889b      	ldrh	r3, [r3, #4]
 800d48a:	b29b      	uxth	r3, r3
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d12a      	bne.n	800d4e6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	685b      	ldr	r3, [r3, #4]
 800d494:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800d496:	697b      	ldr	r3, [r7, #20]
 800d498:	681a      	ldr	r2, [r3, #0]
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d49e:	69bb      	ldr	r3, [r7, #24]
 800d4a0:	6858      	ldr	r0, [r3, #4]
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	3308      	adds	r3, #8
 800d4a6:	2214      	movs	r2, #20
 800d4a8:	4619      	mov	r1, r3
 800d4aa:	f000 feda 	bl	800e262 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d4ae:	2101      	movs	r1, #1
 800d4b0:	69b8      	ldr	r0, [r7, #24]
 800d4b2:	f7ff fc49 	bl	800cd48 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800d4b6:	69b8      	ldr	r0, [r7, #24]
 800d4b8:	f7f7 fac0 	bl	8004a3c <pbuf_clen>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d4c0:	8bfa      	ldrh	r2, [r7, #30]
 800d4c2:	8a7b      	ldrh	r3, [r7, #18]
 800d4c4:	4413      	add	r3, r2
 800d4c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d4ca:	db05      	blt.n	800d4d8 <ip_reass_free_complete_datagram+0x98>
 800d4cc:	4b27      	ldr	r3, [pc, #156]	; (800d56c <ip_reass_free_complete_datagram+0x12c>)
 800d4ce:	22bc      	movs	r2, #188	; 0xbc
 800d4d0:	492a      	ldr	r1, [pc, #168]	; (800d57c <ip_reass_free_complete_datagram+0x13c>)
 800d4d2:	4828      	ldr	r0, [pc, #160]	; (800d574 <ip_reass_free_complete_datagram+0x134>)
 800d4d4:	f000 fed8 	bl	800e288 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d4d8:	8bfa      	ldrh	r2, [r7, #30]
 800d4da:	8a7b      	ldrh	r3, [r7, #18]
 800d4dc:	4413      	add	r3, r2
 800d4de:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800d4e0:	69b8      	ldr	r0, [r7, #24]
 800d4e2:	f7f7 fa23 	bl	800492c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	685b      	ldr	r3, [r3, #4]
 800d4ea:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800d4ec:	e01f      	b.n	800d52e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800d4ee:	69bb      	ldr	r3, [r7, #24]
 800d4f0:	685b      	ldr	r3, [r3, #4]
 800d4f2:	617b      	str	r3, [r7, #20]
    pcur = p;
 800d4f4:	69bb      	ldr	r3, [r7, #24]
 800d4f6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800d4f8:	697b      	ldr	r3, [r7, #20]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800d4fe:	68f8      	ldr	r0, [r7, #12]
 800d500:	f7f7 fa9c 	bl	8004a3c <pbuf_clen>
 800d504:	4603      	mov	r3, r0
 800d506:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d508:	8bfa      	ldrh	r2, [r7, #30]
 800d50a:	8a7b      	ldrh	r3, [r7, #18]
 800d50c:	4413      	add	r3, r2
 800d50e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d512:	db05      	blt.n	800d520 <ip_reass_free_complete_datagram+0xe0>
 800d514:	4b15      	ldr	r3, [pc, #84]	; (800d56c <ip_reass_free_complete_datagram+0x12c>)
 800d516:	22cc      	movs	r2, #204	; 0xcc
 800d518:	4918      	ldr	r1, [pc, #96]	; (800d57c <ip_reass_free_complete_datagram+0x13c>)
 800d51a:	4816      	ldr	r0, [pc, #88]	; (800d574 <ip_reass_free_complete_datagram+0x134>)
 800d51c:	f000 feb4 	bl	800e288 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d520:	8bfa      	ldrh	r2, [r7, #30]
 800d522:	8a7b      	ldrh	r3, [r7, #18]
 800d524:	4413      	add	r3, r2
 800d526:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800d528:	68f8      	ldr	r0, [r7, #12]
 800d52a:	f7f7 f9ff 	bl	800492c <pbuf_free>
  while (p != NULL) {
 800d52e:	69bb      	ldr	r3, [r7, #24]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d1dc      	bne.n	800d4ee <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800d534:	6839      	ldr	r1, [r7, #0]
 800d536:	6878      	ldr	r0, [r7, #4]
 800d538:	f000 f8c2 	bl	800d6c0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800d53c:	4b10      	ldr	r3, [pc, #64]	; (800d580 <ip_reass_free_complete_datagram+0x140>)
 800d53e:	881b      	ldrh	r3, [r3, #0]
 800d540:	8bfa      	ldrh	r2, [r7, #30]
 800d542:	429a      	cmp	r2, r3
 800d544:	d905      	bls.n	800d552 <ip_reass_free_complete_datagram+0x112>
 800d546:	4b09      	ldr	r3, [pc, #36]	; (800d56c <ip_reass_free_complete_datagram+0x12c>)
 800d548:	22d2      	movs	r2, #210	; 0xd2
 800d54a:	490e      	ldr	r1, [pc, #56]	; (800d584 <ip_reass_free_complete_datagram+0x144>)
 800d54c:	4809      	ldr	r0, [pc, #36]	; (800d574 <ip_reass_free_complete_datagram+0x134>)
 800d54e:	f000 fe9b 	bl	800e288 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800d552:	4b0b      	ldr	r3, [pc, #44]	; (800d580 <ip_reass_free_complete_datagram+0x140>)
 800d554:	881a      	ldrh	r2, [r3, #0]
 800d556:	8bfb      	ldrh	r3, [r7, #30]
 800d558:	1ad3      	subs	r3, r2, r3
 800d55a:	b29a      	uxth	r2, r3
 800d55c:	4b08      	ldr	r3, [pc, #32]	; (800d580 <ip_reass_free_complete_datagram+0x140>)
 800d55e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800d560:	8bfb      	ldrh	r3, [r7, #30]
}
 800d562:	4618      	mov	r0, r3
 800d564:	3720      	adds	r7, #32
 800d566:	46bd      	mov	sp, r7
 800d568:	bd80      	pop	{r7, pc}
 800d56a:	bf00      	nop
 800d56c:	08011864 	.word	0x08011864
 800d570:	080118a0 	.word	0x080118a0
 800d574:	080118ac 	.word	0x080118ac
 800d578:	080118d4 	.word	0x080118d4
 800d57c:	080118e8 	.word	0x080118e8
 800d580:	20000208 	.word	0x20000208
 800d584:	08011908 	.word	0x08011908

0800d588 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b08a      	sub	sp, #40	; 0x28
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
 800d590:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800d592:	2300      	movs	r3, #0
 800d594:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800d596:	2300      	movs	r3, #0
 800d598:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800d59a:	2300      	movs	r3, #0
 800d59c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800d59e:	2300      	movs	r3, #0
 800d5a0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800d5a6:	4b28      	ldr	r3, [pc, #160]	; (800d648 <ip_reass_remove_oldest_datagram+0xc0>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d5ac:	e030      	b.n	800d610 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5b0:	695a      	ldr	r2, [r3, #20]
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	68db      	ldr	r3, [r3, #12]
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	d10c      	bne.n	800d5d4 <ip_reass_remove_oldest_datagram+0x4c>
 800d5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5bc:	699a      	ldr	r2, [r3, #24]
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	691b      	ldr	r3, [r3, #16]
 800d5c2:	429a      	cmp	r2, r3
 800d5c4:	d106      	bne.n	800d5d4 <ip_reass_remove_oldest_datagram+0x4c>
 800d5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5c8:	899a      	ldrh	r2, [r3, #12]
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	889b      	ldrh	r3, [r3, #4]
 800d5ce:	b29b      	uxth	r3, r3
 800d5d0:	429a      	cmp	r2, r3
 800d5d2:	d014      	beq.n	800d5fe <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800d5d4:	693b      	ldr	r3, [r7, #16]
 800d5d6:	3301      	adds	r3, #1
 800d5d8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800d5da:	6a3b      	ldr	r3, [r7, #32]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d104      	bne.n	800d5ea <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800d5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d5e4:	69fb      	ldr	r3, [r7, #28]
 800d5e6:	61bb      	str	r3, [r7, #24]
 800d5e8:	e009      	b.n	800d5fe <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800d5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ec:	7fda      	ldrb	r2, [r3, #31]
 800d5ee:	6a3b      	ldr	r3, [r7, #32]
 800d5f0:	7fdb      	ldrb	r3, [r3, #31]
 800d5f2:	429a      	cmp	r2, r3
 800d5f4:	d803      	bhi.n	800d5fe <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800d5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d5fa:	69fb      	ldr	r3, [r7, #28]
 800d5fc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800d5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d001      	beq.n	800d60a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800d606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d608:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800d60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d612:	2b00      	cmp	r3, #0
 800d614:	d1cb      	bne.n	800d5ae <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800d616:	6a3b      	ldr	r3, [r7, #32]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d008      	beq.n	800d62e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800d61c:	69b9      	ldr	r1, [r7, #24]
 800d61e:	6a38      	ldr	r0, [r7, #32]
 800d620:	f7ff ff0e 	bl	800d440 <ip_reass_free_complete_datagram>
 800d624:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800d626:	697a      	ldr	r2, [r7, #20]
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	4413      	add	r3, r2
 800d62c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800d62e:	697a      	ldr	r2, [r7, #20]
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	429a      	cmp	r2, r3
 800d634:	da02      	bge.n	800d63c <ip_reass_remove_oldest_datagram+0xb4>
 800d636:	693b      	ldr	r3, [r7, #16]
 800d638:	2b01      	cmp	r3, #1
 800d63a:	dcac      	bgt.n	800d596 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800d63c:	697b      	ldr	r3, [r7, #20]
}
 800d63e:	4618      	mov	r0, r3
 800d640:	3728      	adds	r7, #40	; 0x28
 800d642:	46bd      	mov	sp, r7
 800d644:	bd80      	pop	{r7, pc}
 800d646:	bf00      	nop
 800d648:	20000204 	.word	0x20000204

0800d64c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b084      	sub	sp, #16
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
 800d654:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d656:	2004      	movs	r0, #4
 800d658:	f7f6 fb22 	bl	8003ca0 <memp_malloc>
 800d65c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d110      	bne.n	800d686 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800d664:	6839      	ldr	r1, [r7, #0]
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f7ff ff8e 	bl	800d588 <ip_reass_remove_oldest_datagram>
 800d66c:	4602      	mov	r2, r0
 800d66e:	683b      	ldr	r3, [r7, #0]
 800d670:	4293      	cmp	r3, r2
 800d672:	dc03      	bgt.n	800d67c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d674:	2004      	movs	r0, #4
 800d676:	f7f6 fb13 	bl	8003ca0 <memp_malloc>
 800d67a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d101      	bne.n	800d686 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800d682:	2300      	movs	r3, #0
 800d684:	e016      	b.n	800d6b4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800d686:	2220      	movs	r2, #32
 800d688:	2100      	movs	r1, #0
 800d68a:	68f8      	ldr	r0, [r7, #12]
 800d68c:	f000 fdf4 	bl	800e278 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	220f      	movs	r2, #15
 800d694:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800d696:	4b09      	ldr	r3, [pc, #36]	; (800d6bc <ip_reass_enqueue_new_datagram+0x70>)
 800d698:	681a      	ldr	r2, [r3, #0]
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800d69e:	4a07      	ldr	r2, [pc, #28]	; (800d6bc <ip_reass_enqueue_new_datagram+0x70>)
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	3308      	adds	r3, #8
 800d6a8:	2214      	movs	r2, #20
 800d6aa:	6879      	ldr	r1, [r7, #4]
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	f000 fdd8 	bl	800e262 <memcpy>
  return ipr;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	3710      	adds	r7, #16
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}
 800d6bc:	20000204 	.word	0x20000204

0800d6c0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b082      	sub	sp, #8
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
 800d6c8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800d6ca:	4b10      	ldr	r3, [pc, #64]	; (800d70c <ip_reass_dequeue_datagram+0x4c>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	687a      	ldr	r2, [r7, #4]
 800d6d0:	429a      	cmp	r2, r3
 800d6d2:	d104      	bne.n	800d6de <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	4a0c      	ldr	r2, [pc, #48]	; (800d70c <ip_reass_dequeue_datagram+0x4c>)
 800d6da:	6013      	str	r3, [r2, #0]
 800d6dc:	e00d      	b.n	800d6fa <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d106      	bne.n	800d6f2 <ip_reass_dequeue_datagram+0x32>
 800d6e4:	4b0a      	ldr	r3, [pc, #40]	; (800d710 <ip_reass_dequeue_datagram+0x50>)
 800d6e6:	f240 1245 	movw	r2, #325	; 0x145
 800d6ea:	490a      	ldr	r1, [pc, #40]	; (800d714 <ip_reass_dequeue_datagram+0x54>)
 800d6ec:	480a      	ldr	r0, [pc, #40]	; (800d718 <ip_reass_dequeue_datagram+0x58>)
 800d6ee:	f000 fdcb 	bl	800e288 <iprintf>
    prev->next = ipr->next;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681a      	ldr	r2, [r3, #0]
 800d6f6:	683b      	ldr	r3, [r7, #0]
 800d6f8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800d6fa:	6879      	ldr	r1, [r7, #4]
 800d6fc:	2004      	movs	r0, #4
 800d6fe:	f7f6 fb1b 	bl	8003d38 <memp_free>
}
 800d702:	bf00      	nop
 800d704:	3708      	adds	r7, #8
 800d706:	46bd      	mov	sp, r7
 800d708:	bd80      	pop	{r7, pc}
 800d70a:	bf00      	nop
 800d70c:	20000204 	.word	0x20000204
 800d710:	08011864 	.word	0x08011864
 800d714:	0801192c 	.word	0x0801192c
 800d718:	080118ac 	.word	0x080118ac

0800d71c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b08c      	sub	sp, #48	; 0x30
 800d720:	af00      	add	r7, sp, #0
 800d722:	60f8      	str	r0, [r7, #12]
 800d724:	60b9      	str	r1, [r7, #8]
 800d726:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800d728:	2300      	movs	r3, #0
 800d72a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800d72c:	2301      	movs	r3, #1
 800d72e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	685b      	ldr	r3, [r3, #4]
 800d734:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d736:	69fb      	ldr	r3, [r7, #28]
 800d738:	885b      	ldrh	r3, [r3, #2]
 800d73a:	b29b      	uxth	r3, r3
 800d73c:	4618      	mov	r0, r3
 800d73e:	f7f5 fe5a 	bl	80033f6 <lwip_htons>
 800d742:	4603      	mov	r3, r0
 800d744:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800d746:	69fb      	ldr	r3, [r7, #28]
 800d748:	781b      	ldrb	r3, [r3, #0]
 800d74a:	f003 030f 	and.w	r3, r3, #15
 800d74e:	b2db      	uxtb	r3, r3
 800d750:	009b      	lsls	r3, r3, #2
 800d752:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800d754:	7e7b      	ldrb	r3, [r7, #25]
 800d756:	b29b      	uxth	r3, r3
 800d758:	8b7a      	ldrh	r2, [r7, #26]
 800d75a:	429a      	cmp	r2, r3
 800d75c:	d202      	bcs.n	800d764 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d75e:	f04f 33ff 	mov.w	r3, #4294967295
 800d762:	e135      	b.n	800d9d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800d764:	7e7b      	ldrb	r3, [r7, #25]
 800d766:	b29b      	uxth	r3, r3
 800d768:	8b7a      	ldrh	r2, [r7, #26]
 800d76a:	1ad3      	subs	r3, r2, r3
 800d76c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d76e:	69fb      	ldr	r3, [r7, #28]
 800d770:	88db      	ldrh	r3, [r3, #6]
 800d772:	b29b      	uxth	r3, r3
 800d774:	4618      	mov	r0, r3
 800d776:	f7f5 fe3e 	bl	80033f6 <lwip_htons>
 800d77a:	4603      	mov	r3, r0
 800d77c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d780:	b29b      	uxth	r3, r3
 800d782:	00db      	lsls	r3, r3, #3
 800d784:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800d786:	68bb      	ldr	r3, [r7, #8]
 800d788:	685b      	ldr	r3, [r3, #4]
 800d78a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800d78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d78e:	2200      	movs	r2, #0
 800d790:	701a      	strb	r2, [r3, #0]
 800d792:	2200      	movs	r2, #0
 800d794:	705a      	strb	r2, [r3, #1]
 800d796:	2200      	movs	r2, #0
 800d798:	709a      	strb	r2, [r3, #2]
 800d79a:	2200      	movs	r2, #0
 800d79c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800d79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7a0:	8afa      	ldrh	r2, [r7, #22]
 800d7a2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800d7a4:	8afa      	ldrh	r2, [r7, #22]
 800d7a6:	8b7b      	ldrh	r3, [r7, #26]
 800d7a8:	4413      	add	r3, r2
 800d7aa:	b29a      	uxth	r2, r3
 800d7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ae:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800d7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7b2:	88db      	ldrh	r3, [r3, #6]
 800d7b4:	b29b      	uxth	r3, r3
 800d7b6:	8afa      	ldrh	r2, [r7, #22]
 800d7b8:	429a      	cmp	r2, r3
 800d7ba:	d902      	bls.n	800d7c2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d7bc:	f04f 33ff 	mov.w	r3, #4294967295
 800d7c0:	e106      	b.n	800d9d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	685b      	ldr	r3, [r3, #4]
 800d7c6:	627b      	str	r3, [r7, #36]	; 0x24
 800d7c8:	e068      	b.n	800d89c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800d7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7cc:	685b      	ldr	r3, [r3, #4]
 800d7ce:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800d7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7d2:	889b      	ldrh	r3, [r3, #4]
 800d7d4:	b29a      	uxth	r2, r3
 800d7d6:	693b      	ldr	r3, [r7, #16]
 800d7d8:	889b      	ldrh	r3, [r3, #4]
 800d7da:	b29b      	uxth	r3, r3
 800d7dc:	429a      	cmp	r2, r3
 800d7de:	d235      	bcs.n	800d84c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800d7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7e4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800d7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d020      	beq.n	800d82e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800d7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ee:	889b      	ldrh	r3, [r3, #4]
 800d7f0:	b29a      	uxth	r2, r3
 800d7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f4:	88db      	ldrh	r3, [r3, #6]
 800d7f6:	b29b      	uxth	r3, r3
 800d7f8:	429a      	cmp	r2, r3
 800d7fa:	d307      	bcc.n	800d80c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800d7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7fe:	88db      	ldrh	r3, [r3, #6]
 800d800:	b29a      	uxth	r2, r3
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	889b      	ldrh	r3, [r3, #4]
 800d806:	b29b      	uxth	r3, r3
 800d808:	429a      	cmp	r2, r3
 800d80a:	d902      	bls.n	800d812 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d80c:	f04f 33ff 	mov.w	r3, #4294967295
 800d810:	e0de      	b.n	800d9d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800d812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d814:	68ba      	ldr	r2, [r7, #8]
 800d816:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800d818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d81a:	88db      	ldrh	r3, [r3, #6]
 800d81c:	b29a      	uxth	r2, r3
 800d81e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d820:	889b      	ldrh	r3, [r3, #4]
 800d822:	b29b      	uxth	r3, r3
 800d824:	429a      	cmp	r2, r3
 800d826:	d03d      	beq.n	800d8a4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d828:	2300      	movs	r3, #0
 800d82a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800d82c:	e03a      	b.n	800d8a4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800d82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d830:	88db      	ldrh	r3, [r3, #6]
 800d832:	b29a      	uxth	r2, r3
 800d834:	693b      	ldr	r3, [r7, #16]
 800d836:	889b      	ldrh	r3, [r3, #4]
 800d838:	b29b      	uxth	r3, r3
 800d83a:	429a      	cmp	r2, r3
 800d83c:	d902      	bls.n	800d844 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d83e:	f04f 33ff 	mov.w	r3, #4294967295
 800d842:	e0c5      	b.n	800d9d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	68ba      	ldr	r2, [r7, #8]
 800d848:	605a      	str	r2, [r3, #4]
      break;
 800d84a:	e02b      	b.n	800d8a4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800d84c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d84e:	889b      	ldrh	r3, [r3, #4]
 800d850:	b29a      	uxth	r2, r3
 800d852:	693b      	ldr	r3, [r7, #16]
 800d854:	889b      	ldrh	r3, [r3, #4]
 800d856:	b29b      	uxth	r3, r3
 800d858:	429a      	cmp	r2, r3
 800d85a:	d102      	bne.n	800d862 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d85c:	f04f 33ff 	mov.w	r3, #4294967295
 800d860:	e0b6      	b.n	800d9d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800d862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d864:	889b      	ldrh	r3, [r3, #4]
 800d866:	b29a      	uxth	r2, r3
 800d868:	693b      	ldr	r3, [r7, #16]
 800d86a:	88db      	ldrh	r3, [r3, #6]
 800d86c:	b29b      	uxth	r3, r3
 800d86e:	429a      	cmp	r2, r3
 800d870:	d202      	bcs.n	800d878 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d872:	f04f 33ff 	mov.w	r3, #4294967295
 800d876:	e0ab      	b.n	800d9d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800d878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d009      	beq.n	800d892 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800d87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d880:	88db      	ldrh	r3, [r3, #6]
 800d882:	b29a      	uxth	r2, r3
 800d884:	693b      	ldr	r3, [r7, #16]
 800d886:	889b      	ldrh	r3, [r3, #4]
 800d888:	b29b      	uxth	r3, r3
 800d88a:	429a      	cmp	r2, r3
 800d88c:	d001      	beq.n	800d892 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d88e:	2300      	movs	r3, #0
 800d890:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800d892:	693b      	ldr	r3, [r7, #16]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800d898:	693b      	ldr	r3, [r7, #16]
 800d89a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800d89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d193      	bne.n	800d7ca <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800d8a2:	e000      	b.n	800d8a6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800d8a4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800d8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d12d      	bne.n	800d908 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800d8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d01c      	beq.n	800d8ec <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800d8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8b4:	88db      	ldrh	r3, [r3, #6]
 800d8b6:	b29a      	uxth	r2, r3
 800d8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ba:	889b      	ldrh	r3, [r3, #4]
 800d8bc:	b29b      	uxth	r3, r3
 800d8be:	429a      	cmp	r2, r3
 800d8c0:	d906      	bls.n	800d8d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800d8c2:	4b45      	ldr	r3, [pc, #276]	; (800d9d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d8c4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800d8c8:	4944      	ldr	r1, [pc, #272]	; (800d9dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d8ca:	4845      	ldr	r0, [pc, #276]	; (800d9e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d8cc:	f000 fcdc 	bl	800e288 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800d8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8d2:	68ba      	ldr	r2, [r7, #8]
 800d8d4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800d8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8d8:	88db      	ldrh	r3, [r3, #6]
 800d8da:	b29a      	uxth	r2, r3
 800d8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8de:	889b      	ldrh	r3, [r3, #4]
 800d8e0:	b29b      	uxth	r3, r3
 800d8e2:	429a      	cmp	r2, r3
 800d8e4:	d010      	beq.n	800d908 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	623b      	str	r3, [r7, #32]
 800d8ea:	e00d      	b.n	800d908 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	685b      	ldr	r3, [r3, #4]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d006      	beq.n	800d902 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800d8f4:	4b38      	ldr	r3, [pc, #224]	; (800d9d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d8f6:	f240 12bf 	movw	r2, #447	; 0x1bf
 800d8fa:	493a      	ldr	r1, [pc, #232]	; (800d9e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800d8fc:	4838      	ldr	r0, [pc, #224]	; (800d9e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d8fe:	f000 fcc3 	bl	800e288 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	68ba      	ldr	r2, [r7, #8]
 800d906:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d105      	bne.n	800d91a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	7f9b      	ldrb	r3, [r3, #30]
 800d912:	f003 0301 	and.w	r3, r3, #1
 800d916:	2b00      	cmp	r3, #0
 800d918:	d059      	beq.n	800d9ce <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800d91a:	6a3b      	ldr	r3, [r7, #32]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d04f      	beq.n	800d9c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	685b      	ldr	r3, [r3, #4]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d006      	beq.n	800d936 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	685b      	ldr	r3, [r3, #4]
 800d92c:	685b      	ldr	r3, [r3, #4]
 800d92e:	889b      	ldrh	r3, [r3, #4]
 800d930:	b29b      	uxth	r3, r3
 800d932:	2b00      	cmp	r3, #0
 800d934:	d002      	beq.n	800d93c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800d936:	2300      	movs	r3, #0
 800d938:	623b      	str	r3, [r7, #32]
 800d93a:	e041      	b.n	800d9c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800d93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d93e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800d940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800d946:	e012      	b.n	800d96e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800d948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d94a:	685b      	ldr	r3, [r3, #4]
 800d94c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800d94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d950:	88db      	ldrh	r3, [r3, #6]
 800d952:	b29a      	uxth	r2, r3
 800d954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d956:	889b      	ldrh	r3, [r3, #4]
 800d958:	b29b      	uxth	r3, r3
 800d95a:	429a      	cmp	r2, r3
 800d95c:	d002      	beq.n	800d964 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800d95e:	2300      	movs	r3, #0
 800d960:	623b      	str	r3, [r7, #32]
            break;
 800d962:	e007      	b.n	800d974 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800d964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d966:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800d968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800d96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d970:	2b00      	cmp	r3, #0
 800d972:	d1e9      	bne.n	800d948 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800d974:	6a3b      	ldr	r3, [r7, #32]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d022      	beq.n	800d9c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	685b      	ldr	r3, [r3, #4]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d106      	bne.n	800d990 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800d982:	4b15      	ldr	r3, [pc, #84]	; (800d9d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d984:	f240 12df 	movw	r2, #479	; 0x1df
 800d988:	4917      	ldr	r1, [pc, #92]	; (800d9e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d98a:	4815      	ldr	r0, [pc, #84]	; (800d9e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d98c:	f000 fc7c 	bl	800e288 <iprintf>
          LWIP_ASSERT("sanity check",
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	685b      	ldr	r3, [r3, #4]
 800d994:	685b      	ldr	r3, [r3, #4]
 800d996:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d998:	429a      	cmp	r2, r3
 800d99a:	d106      	bne.n	800d9aa <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800d99c:	4b0e      	ldr	r3, [pc, #56]	; (800d9d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d99e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800d9a2:	4911      	ldr	r1, [pc, #68]	; (800d9e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d9a4:	480e      	ldr	r0, [pc, #56]	; (800d9e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d9a6:	f000 fc6f 	bl	800e288 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800d9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d006      	beq.n	800d9c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800d9b2:	4b09      	ldr	r3, [pc, #36]	; (800d9d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d9b4:	f240 12e3 	movw	r2, #483	; 0x1e3
 800d9b8:	490c      	ldr	r1, [pc, #48]	; (800d9ec <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800d9ba:	4809      	ldr	r0, [pc, #36]	; (800d9e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d9bc:	f000 fc64 	bl	800e288 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800d9c0:	6a3b      	ldr	r3, [r7, #32]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	bf14      	ite	ne
 800d9c6:	2301      	movne	r3, #1
 800d9c8:	2300      	moveq	r3, #0
 800d9ca:	b2db      	uxtb	r3, r3
 800d9cc:	e000      	b.n	800d9d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800d9ce:	2300      	movs	r3, #0
}
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	3730      	adds	r7, #48	; 0x30
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd80      	pop	{r7, pc}
 800d9d8:	08011864 	.word	0x08011864
 800d9dc:	08011948 	.word	0x08011948
 800d9e0:	080118ac 	.word	0x080118ac
 800d9e4:	08011968 	.word	0x08011968
 800d9e8:	080119a0 	.word	0x080119a0
 800d9ec:	080119b0 	.word	0x080119b0

0800d9f0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b08e      	sub	sp, #56	; 0x38
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	685b      	ldr	r3, [r3, #4]
 800d9fc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800d9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da00:	781b      	ldrb	r3, [r3, #0]
 800da02:	f003 030f 	and.w	r3, r3, #15
 800da06:	b2db      	uxtb	r3, r3
 800da08:	009b      	lsls	r3, r3, #2
 800da0a:	b2db      	uxtb	r3, r3
 800da0c:	2b14      	cmp	r3, #20
 800da0e:	f040 8167 	bne.w	800dce0 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800da12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da14:	88db      	ldrh	r3, [r3, #6]
 800da16:	b29b      	uxth	r3, r3
 800da18:	4618      	mov	r0, r3
 800da1a:	f7f5 fcec 	bl	80033f6 <lwip_htons>
 800da1e:	4603      	mov	r3, r0
 800da20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800da24:	b29b      	uxth	r3, r3
 800da26:	00db      	lsls	r3, r3, #3
 800da28:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800da2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da2c:	885b      	ldrh	r3, [r3, #2]
 800da2e:	b29b      	uxth	r3, r3
 800da30:	4618      	mov	r0, r3
 800da32:	f7f5 fce0 	bl	80033f6 <lwip_htons>
 800da36:	4603      	mov	r3, r0
 800da38:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800da3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da3c:	781b      	ldrb	r3, [r3, #0]
 800da3e:	f003 030f 	and.w	r3, r3, #15
 800da42:	b2db      	uxtb	r3, r3
 800da44:	009b      	lsls	r3, r3, #2
 800da46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800da4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800da4e:	b29b      	uxth	r3, r3
 800da50:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800da52:	429a      	cmp	r2, r3
 800da54:	f0c0 8146 	bcc.w	800dce4 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800da58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800da5c:	b29b      	uxth	r3, r3
 800da5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800da60:	1ad3      	subs	r3, r2, r3
 800da62:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800da64:	6878      	ldr	r0, [r7, #4]
 800da66:	f7f6 ffe9 	bl	8004a3c <pbuf_clen>
 800da6a:	4603      	mov	r3, r0
 800da6c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800da6e:	4ba3      	ldr	r3, [pc, #652]	; (800dcfc <ip4_reass+0x30c>)
 800da70:	881b      	ldrh	r3, [r3, #0]
 800da72:	461a      	mov	r2, r3
 800da74:	8c3b      	ldrh	r3, [r7, #32]
 800da76:	4413      	add	r3, r2
 800da78:	2b0a      	cmp	r3, #10
 800da7a:	dd10      	ble.n	800da9e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800da7c:	8c3b      	ldrh	r3, [r7, #32]
 800da7e:	4619      	mov	r1, r3
 800da80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da82:	f7ff fd81 	bl	800d588 <ip_reass_remove_oldest_datagram>
 800da86:	4603      	mov	r3, r0
 800da88:	2b00      	cmp	r3, #0
 800da8a:	f000 812d 	beq.w	800dce8 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800da8e:	4b9b      	ldr	r3, [pc, #620]	; (800dcfc <ip4_reass+0x30c>)
 800da90:	881b      	ldrh	r3, [r3, #0]
 800da92:	461a      	mov	r2, r3
 800da94:	8c3b      	ldrh	r3, [r7, #32]
 800da96:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800da98:	2b0a      	cmp	r3, #10
 800da9a:	f300 8125 	bgt.w	800dce8 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800da9e:	4b98      	ldr	r3, [pc, #608]	; (800dd00 <ip4_reass+0x310>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	633b      	str	r3, [r7, #48]	; 0x30
 800daa4:	e015      	b.n	800dad2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800daa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daa8:	695a      	ldr	r2, [r3, #20]
 800daaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daac:	68db      	ldr	r3, [r3, #12]
 800daae:	429a      	cmp	r2, r3
 800dab0:	d10c      	bne.n	800dacc <ip4_reass+0xdc>
 800dab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dab4:	699a      	ldr	r2, [r3, #24]
 800dab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dab8:	691b      	ldr	r3, [r3, #16]
 800daba:	429a      	cmp	r2, r3
 800dabc:	d106      	bne.n	800dacc <ip4_reass+0xdc>
 800dabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dac0:	899a      	ldrh	r2, [r3, #12]
 800dac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dac4:	889b      	ldrh	r3, [r3, #4]
 800dac6:	b29b      	uxth	r3, r3
 800dac8:	429a      	cmp	r2, r3
 800daca:	d006      	beq.n	800dada <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800dacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	633b      	str	r3, [r7, #48]	; 0x30
 800dad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d1e6      	bne.n	800daa6 <ip4_reass+0xb6>
 800dad8:	e000      	b.n	800dadc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800dada:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800dadc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d109      	bne.n	800daf6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800dae2:	8c3b      	ldrh	r3, [r7, #32]
 800dae4:	4619      	mov	r1, r3
 800dae6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dae8:	f7ff fdb0 	bl	800d64c <ip_reass_enqueue_new_datagram>
 800daec:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800daee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d11c      	bne.n	800db2e <ip4_reass+0x13e>
      goto nullreturn;
 800daf4:	e0f9      	b.n	800dcea <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800daf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daf8:	88db      	ldrh	r3, [r3, #6]
 800dafa:	b29b      	uxth	r3, r3
 800dafc:	4618      	mov	r0, r3
 800dafe:	f7f5 fc7a 	bl	80033f6 <lwip_htons>
 800db02:	4603      	mov	r3, r0
 800db04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d110      	bne.n	800db2e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800db0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db0e:	89db      	ldrh	r3, [r3, #14]
 800db10:	4618      	mov	r0, r3
 800db12:	f7f5 fc70 	bl	80033f6 <lwip_htons>
 800db16:	4603      	mov	r3, r0
 800db18:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d006      	beq.n	800db2e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800db20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db22:	3308      	adds	r3, #8
 800db24:	2214      	movs	r2, #20
 800db26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800db28:	4618      	mov	r0, r3
 800db2a:	f000 fb9a 	bl	800e262 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800db2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db30:	88db      	ldrh	r3, [r3, #6]
 800db32:	b29b      	uxth	r3, r3
 800db34:	f003 0320 	and.w	r3, r3, #32
 800db38:	2b00      	cmp	r3, #0
 800db3a:	bf0c      	ite	eq
 800db3c:	2301      	moveq	r3, #1
 800db3e:	2300      	movne	r3, #0
 800db40:	b2db      	uxtb	r3, r3
 800db42:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800db44:	69fb      	ldr	r3, [r7, #28]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d00e      	beq.n	800db68 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800db4a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800db4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db4e:	4413      	add	r3, r2
 800db50:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800db52:	8b7a      	ldrh	r2, [r7, #26]
 800db54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800db56:	429a      	cmp	r2, r3
 800db58:	f0c0 80a0 	bcc.w	800dc9c <ip4_reass+0x2ac>
 800db5c:	8b7b      	ldrh	r3, [r7, #26]
 800db5e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800db62:	4293      	cmp	r3, r2
 800db64:	f200 809a 	bhi.w	800dc9c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800db68:	69fa      	ldr	r2, [r7, #28]
 800db6a:	6879      	ldr	r1, [r7, #4]
 800db6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db6e:	f7ff fdd5 	bl	800d71c <ip_reass_chain_frag_into_datagram_and_validate>
 800db72:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800db74:	697b      	ldr	r3, [r7, #20]
 800db76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db7a:	f000 8091 	beq.w	800dca0 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800db7e:	4b5f      	ldr	r3, [pc, #380]	; (800dcfc <ip4_reass+0x30c>)
 800db80:	881a      	ldrh	r2, [r3, #0]
 800db82:	8c3b      	ldrh	r3, [r7, #32]
 800db84:	4413      	add	r3, r2
 800db86:	b29a      	uxth	r2, r3
 800db88:	4b5c      	ldr	r3, [pc, #368]	; (800dcfc <ip4_reass+0x30c>)
 800db8a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800db8c:	69fb      	ldr	r3, [r7, #28]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d00d      	beq.n	800dbae <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800db92:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800db94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db96:	4413      	add	r3, r2
 800db98:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800db9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db9c:	8a7a      	ldrh	r2, [r7, #18]
 800db9e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800dba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dba2:	7f9b      	ldrb	r3, [r3, #30]
 800dba4:	f043 0301 	orr.w	r3, r3, #1
 800dba8:	b2da      	uxtb	r2, r3
 800dbaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbac:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800dbae:	697b      	ldr	r3, [r7, #20]
 800dbb0:	2b01      	cmp	r3, #1
 800dbb2:	d171      	bne.n	800dc98 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800dbb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb6:	8b9b      	ldrh	r3, [r3, #28]
 800dbb8:	3314      	adds	r3, #20
 800dbba:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800dbbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbbe:	685b      	ldr	r3, [r3, #4]
 800dbc0:	685b      	ldr	r3, [r3, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800dbc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbc8:	685b      	ldr	r3, [r3, #4]
 800dbca:	685b      	ldr	r3, [r3, #4]
 800dbcc:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800dbce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbd0:	3308      	adds	r3, #8
 800dbd2:	2214      	movs	r2, #20
 800dbd4:	4619      	mov	r1, r3
 800dbd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dbd8:	f000 fb43 	bl	800e262 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800dbdc:	8a3b      	ldrh	r3, [r7, #16]
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f7f5 fc09 	bl	80033f6 <lwip_htons>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	461a      	mov	r2, r3
 800dbe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbea:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800dbec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbee:	2200      	movs	r2, #0
 800dbf0:	719a      	strb	r2, [r3, #6]
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800dbf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	729a      	strb	r2, [r3, #10]
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800dc00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc02:	685b      	ldr	r3, [r3, #4]
 800dc04:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800dc06:	e00d      	b.n	800dc24 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800dc08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc0a:	685b      	ldr	r3, [r3, #4]
 800dc0c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800dc0e:	2114      	movs	r1, #20
 800dc10:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dc12:	f7f6 fe05 	bl	8004820 <pbuf_remove_header>
      pbuf_cat(p, r);
 800dc16:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dc18:	6878      	ldr	r0, [r7, #4]
 800dc1a:	f7f6 ff49 	bl	8004ab0 <pbuf_cat>
      r = iprh->next_pbuf;
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800dc24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d1ee      	bne.n	800dc08 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800dc2a:	4b35      	ldr	r3, [pc, #212]	; (800dd00 <ip4_reass+0x310>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc30:	429a      	cmp	r2, r3
 800dc32:	d102      	bne.n	800dc3a <ip4_reass+0x24a>
      ipr_prev = NULL;
 800dc34:	2300      	movs	r3, #0
 800dc36:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dc38:	e010      	b.n	800dc5c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800dc3a:	4b31      	ldr	r3, [pc, #196]	; (800dd00 <ip4_reass+0x310>)
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dc40:	e007      	b.n	800dc52 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800dc42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc48:	429a      	cmp	r2, r3
 800dc4a:	d006      	beq.n	800dc5a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800dc4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dc52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d1f4      	bne.n	800dc42 <ip4_reass+0x252>
 800dc58:	e000      	b.n	800dc5c <ip4_reass+0x26c>
          break;
 800dc5a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800dc5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dc5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc60:	f7ff fd2e 	bl	800d6c0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800dc64:	6878      	ldr	r0, [r7, #4]
 800dc66:	f7f6 fee9 	bl	8004a3c <pbuf_clen>
 800dc6a:	4603      	mov	r3, r0
 800dc6c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800dc6e:	4b23      	ldr	r3, [pc, #140]	; (800dcfc <ip4_reass+0x30c>)
 800dc70:	881b      	ldrh	r3, [r3, #0]
 800dc72:	8c3a      	ldrh	r2, [r7, #32]
 800dc74:	429a      	cmp	r2, r3
 800dc76:	d906      	bls.n	800dc86 <ip4_reass+0x296>
 800dc78:	4b22      	ldr	r3, [pc, #136]	; (800dd04 <ip4_reass+0x314>)
 800dc7a:	f240 229b 	movw	r2, #667	; 0x29b
 800dc7e:	4922      	ldr	r1, [pc, #136]	; (800dd08 <ip4_reass+0x318>)
 800dc80:	4822      	ldr	r0, [pc, #136]	; (800dd0c <ip4_reass+0x31c>)
 800dc82:	f000 fb01 	bl	800e288 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800dc86:	4b1d      	ldr	r3, [pc, #116]	; (800dcfc <ip4_reass+0x30c>)
 800dc88:	881a      	ldrh	r2, [r3, #0]
 800dc8a:	8c3b      	ldrh	r3, [r7, #32]
 800dc8c:	1ad3      	subs	r3, r2, r3
 800dc8e:	b29a      	uxth	r2, r3
 800dc90:	4b1a      	ldr	r3, [pc, #104]	; (800dcfc <ip4_reass+0x30c>)
 800dc92:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	e02c      	b.n	800dcf2 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800dc98:	2300      	movs	r3, #0
 800dc9a:	e02a      	b.n	800dcf2 <ip4_reass+0x302>

nullreturn_ipr:
 800dc9c:	bf00      	nop
 800dc9e:	e000      	b.n	800dca2 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800dca0:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800dca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d106      	bne.n	800dcb6 <ip4_reass+0x2c6>
 800dca8:	4b16      	ldr	r3, [pc, #88]	; (800dd04 <ip4_reass+0x314>)
 800dcaa:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800dcae:	4918      	ldr	r1, [pc, #96]	; (800dd10 <ip4_reass+0x320>)
 800dcb0:	4816      	ldr	r0, [pc, #88]	; (800dd0c <ip4_reass+0x31c>)
 800dcb2:	f000 fae9 	bl	800e288 <iprintf>
  if (ipr->p == NULL) {
 800dcb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb8:	685b      	ldr	r3, [r3, #4]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d114      	bne.n	800dce8 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800dcbe:	4b10      	ldr	r3, [pc, #64]	; (800dd00 <ip4_reass+0x310>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcc4:	429a      	cmp	r2, r3
 800dcc6:	d006      	beq.n	800dcd6 <ip4_reass+0x2e6>
 800dcc8:	4b0e      	ldr	r3, [pc, #56]	; (800dd04 <ip4_reass+0x314>)
 800dcca:	f240 22ab 	movw	r2, #683	; 0x2ab
 800dcce:	4911      	ldr	r1, [pc, #68]	; (800dd14 <ip4_reass+0x324>)
 800dcd0:	480e      	ldr	r0, [pc, #56]	; (800dd0c <ip4_reass+0x31c>)
 800dcd2:	f000 fad9 	bl	800e288 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800dcd6:	2100      	movs	r1, #0
 800dcd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dcda:	f7ff fcf1 	bl	800d6c0 <ip_reass_dequeue_datagram>
 800dcde:	e004      	b.n	800dcea <ip4_reass+0x2fa>
    goto nullreturn;
 800dce0:	bf00      	nop
 800dce2:	e002      	b.n	800dcea <ip4_reass+0x2fa>
    goto nullreturn;
 800dce4:	bf00      	nop
 800dce6:	e000      	b.n	800dcea <ip4_reass+0x2fa>
  }

nullreturn:
 800dce8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	f7f6 fe1e 	bl	800492c <pbuf_free>
  return NULL;
 800dcf0:	2300      	movs	r3, #0
}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	3738      	adds	r7, #56	; 0x38
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	bf00      	nop
 800dcfc:	20000208 	.word	0x20000208
 800dd00:	20000204 	.word	0x20000204
 800dd04:	08011864 	.word	0x08011864
 800dd08:	080119d4 	.word	0x080119d4
 800dd0c:	080118ac 	.word	0x080118ac
 800dd10:	080119f0 	.word	0x080119f0
 800dd14:	080119fc 	.word	0x080119fc

0800dd18 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800dd1c:	2005      	movs	r0, #5
 800dd1e:	f7f5 ffbf 	bl	8003ca0 <memp_malloc>
 800dd22:	4603      	mov	r3, r0
}
 800dd24:	4618      	mov	r0, r3
 800dd26:	bd80      	pop	{r7, pc}

0800dd28 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b082      	sub	sp, #8
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d106      	bne.n	800dd44 <ip_frag_free_pbuf_custom_ref+0x1c>
 800dd36:	4b07      	ldr	r3, [pc, #28]	; (800dd54 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800dd38:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800dd3c:	4906      	ldr	r1, [pc, #24]	; (800dd58 <ip_frag_free_pbuf_custom_ref+0x30>)
 800dd3e:	4807      	ldr	r0, [pc, #28]	; (800dd5c <ip_frag_free_pbuf_custom_ref+0x34>)
 800dd40:	f000 faa2 	bl	800e288 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800dd44:	6879      	ldr	r1, [r7, #4]
 800dd46:	2005      	movs	r0, #5
 800dd48:	f7f5 fff6 	bl	8003d38 <memp_free>
}
 800dd4c:	bf00      	nop
 800dd4e:	3708      	adds	r7, #8
 800dd50:	46bd      	mov	sp, r7
 800dd52:	bd80      	pop	{r7, pc}
 800dd54:	08011864 	.word	0x08011864
 800dd58:	08011a1c 	.word	0x08011a1c
 800dd5c:	080118ac 	.word	0x080118ac

0800dd60 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b084      	sub	sp, #16
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d106      	bne.n	800dd80 <ipfrag_free_pbuf_custom+0x20>
 800dd72:	4b11      	ldr	r3, [pc, #68]	; (800ddb8 <ipfrag_free_pbuf_custom+0x58>)
 800dd74:	f240 22ce 	movw	r2, #718	; 0x2ce
 800dd78:	4910      	ldr	r1, [pc, #64]	; (800ddbc <ipfrag_free_pbuf_custom+0x5c>)
 800dd7a:	4811      	ldr	r0, [pc, #68]	; (800ddc0 <ipfrag_free_pbuf_custom+0x60>)
 800dd7c:	f000 fa84 	bl	800e288 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800dd80:	68fa      	ldr	r2, [r7, #12]
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	429a      	cmp	r2, r3
 800dd86:	d006      	beq.n	800dd96 <ipfrag_free_pbuf_custom+0x36>
 800dd88:	4b0b      	ldr	r3, [pc, #44]	; (800ddb8 <ipfrag_free_pbuf_custom+0x58>)
 800dd8a:	f240 22cf 	movw	r2, #719	; 0x2cf
 800dd8e:	490d      	ldr	r1, [pc, #52]	; (800ddc4 <ipfrag_free_pbuf_custom+0x64>)
 800dd90:	480b      	ldr	r0, [pc, #44]	; (800ddc0 <ipfrag_free_pbuf_custom+0x60>)
 800dd92:	f000 fa79 	bl	800e288 <iprintf>
  if (pcr->original != NULL) {
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	695b      	ldr	r3, [r3, #20]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d004      	beq.n	800dda8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	695b      	ldr	r3, [r3, #20]
 800dda2:	4618      	mov	r0, r3
 800dda4:	f7f6 fdc2 	bl	800492c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800dda8:	68f8      	ldr	r0, [r7, #12]
 800ddaa:	f7ff ffbd 	bl	800dd28 <ip_frag_free_pbuf_custom_ref>
}
 800ddae:	bf00      	nop
 800ddb0:	3710      	adds	r7, #16
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd80      	pop	{r7, pc}
 800ddb6:	bf00      	nop
 800ddb8:	08011864 	.word	0x08011864
 800ddbc:	08011a28 	.word	0x08011a28
 800ddc0:	080118ac 	.word	0x080118ac
 800ddc4:	08011a34 	.word	0x08011a34

0800ddc8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b094      	sub	sp, #80	; 0x50
 800ddcc:	af02      	add	r7, sp, #8
 800ddce:	60f8      	str	r0, [r7, #12]
 800ddd0:	60b9      	str	r1, [r7, #8]
 800ddd2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	8c1b      	ldrh	r3, [r3, #32]
 800ddde:	3b14      	subs	r3, #20
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	da00      	bge.n	800dde6 <ip4_frag+0x1e>
 800dde4:	3307      	adds	r3, #7
 800dde6:	10db      	asrs	r3, r3, #3
 800dde8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800ddea:	2314      	movs	r3, #20
 800ddec:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	685b      	ldr	r3, [r3, #4]
 800ddf2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800ddf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddf6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800ddf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddfa:	781b      	ldrb	r3, [r3, #0]
 800ddfc:	f003 030f 	and.w	r3, r3, #15
 800de00:	b2db      	uxtb	r3, r3
 800de02:	009b      	lsls	r3, r3, #2
 800de04:	b2db      	uxtb	r3, r3
 800de06:	2b14      	cmp	r3, #20
 800de08:	d002      	beq.n	800de10 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800de0a:	f06f 0305 	mvn.w	r3, #5
 800de0e:	e10f      	b.n	800e030 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	895b      	ldrh	r3, [r3, #10]
 800de14:	2b13      	cmp	r3, #19
 800de16:	d809      	bhi.n	800de2c <ip4_frag+0x64>
 800de18:	4b87      	ldr	r3, [pc, #540]	; (800e038 <ip4_frag+0x270>)
 800de1a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800de1e:	4987      	ldr	r1, [pc, #540]	; (800e03c <ip4_frag+0x274>)
 800de20:	4887      	ldr	r0, [pc, #540]	; (800e040 <ip4_frag+0x278>)
 800de22:	f000 fa31 	bl	800e288 <iprintf>
 800de26:	f06f 0305 	mvn.w	r3, #5
 800de2a:	e101      	b.n	800e030 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800de2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de2e:	88db      	ldrh	r3, [r3, #6]
 800de30:	b29b      	uxth	r3, r3
 800de32:	4618      	mov	r0, r3
 800de34:	f7f5 fadf 	bl	80033f6 <lwip_htons>
 800de38:	4603      	mov	r3, r0
 800de3a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800de3c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800de3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800de42:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800de46:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800de48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800de4c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	891b      	ldrh	r3, [r3, #8]
 800de52:	3b14      	subs	r3, #20
 800de54:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800de58:	e0e0      	b.n	800e01c <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800de5a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800de5c:	00db      	lsls	r3, r3, #3
 800de5e:	b29b      	uxth	r3, r3
 800de60:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800de64:	4293      	cmp	r3, r2
 800de66:	bf28      	it	cs
 800de68:	4613      	movcs	r3, r2
 800de6a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800de6c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800de70:	2114      	movs	r1, #20
 800de72:	200e      	movs	r0, #14
 800de74:	f7f6 fa7a 	bl	800436c <pbuf_alloc>
 800de78:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800de7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	f000 80d4 	beq.w	800e02a <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800de82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de84:	895b      	ldrh	r3, [r3, #10]
 800de86:	2b13      	cmp	r3, #19
 800de88:	d806      	bhi.n	800de98 <ip4_frag+0xd0>
 800de8a:	4b6b      	ldr	r3, [pc, #428]	; (800e038 <ip4_frag+0x270>)
 800de8c:	f240 3225 	movw	r2, #805	; 0x325
 800de90:	496c      	ldr	r1, [pc, #432]	; (800e044 <ip4_frag+0x27c>)
 800de92:	486b      	ldr	r0, [pc, #428]	; (800e040 <ip4_frag+0x278>)
 800de94:	f000 f9f8 	bl	800e288 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800de98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de9a:	685b      	ldr	r3, [r3, #4]
 800de9c:	2214      	movs	r2, #20
 800de9e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dea0:	4618      	mov	r0, r3
 800dea2:	f000 f9de 	bl	800e262 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800dea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dea8:	685b      	ldr	r3, [r3, #4]
 800deaa:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800deac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800deae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800deb2:	e064      	b.n	800df7e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	895a      	ldrh	r2, [r3, #10]
 800deb8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800deba:	1ad3      	subs	r3, r2, r3
 800debc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	895b      	ldrh	r3, [r3, #10]
 800dec2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800dec4:	429a      	cmp	r2, r3
 800dec6:	d906      	bls.n	800ded6 <ip4_frag+0x10e>
 800dec8:	4b5b      	ldr	r3, [pc, #364]	; (800e038 <ip4_frag+0x270>)
 800deca:	f240 322d 	movw	r2, #813	; 0x32d
 800dece:	495e      	ldr	r1, [pc, #376]	; (800e048 <ip4_frag+0x280>)
 800ded0:	485b      	ldr	r0, [pc, #364]	; (800e040 <ip4_frag+0x278>)
 800ded2:	f000 f9d9 	bl	800e288 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800ded6:	8bfa      	ldrh	r2, [r7, #30]
 800ded8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800dedc:	4293      	cmp	r3, r2
 800dede:	bf28      	it	cs
 800dee0:	4613      	movcs	r3, r2
 800dee2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800dee6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800deea:	2b00      	cmp	r3, #0
 800deec:	d105      	bne.n	800defa <ip4_frag+0x132>
        poff = 0;
 800deee:	2300      	movs	r3, #0
 800def0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	60fb      	str	r3, [r7, #12]
        continue;
 800def8:	e041      	b.n	800df7e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800defa:	f7ff ff0d 	bl	800dd18 <ip_frag_alloc_pbuf_custom_ref>
 800defe:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800df00:	69bb      	ldr	r3, [r7, #24]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d103      	bne.n	800df0e <ip4_frag+0x146>
        pbuf_free(rambuf);
 800df06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df08:	f7f6 fd10 	bl	800492c <pbuf_free>
        goto memerr;
 800df0c:	e08e      	b.n	800e02c <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800df0e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800df14:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800df16:	4413      	add	r3, r2
 800df18:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800df1c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800df20:	9201      	str	r2, [sp, #4]
 800df22:	9300      	str	r3, [sp, #0]
 800df24:	4603      	mov	r3, r0
 800df26:	2241      	movs	r2, #65	; 0x41
 800df28:	2000      	movs	r0, #0
 800df2a:	f7f6 fb45 	bl	80045b8 <pbuf_alloced_custom>
 800df2e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800df30:	697b      	ldr	r3, [r7, #20]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d106      	bne.n	800df44 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800df36:	69b8      	ldr	r0, [r7, #24]
 800df38:	f7ff fef6 	bl	800dd28 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800df3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df3e:	f7f6 fcf5 	bl	800492c <pbuf_free>
        goto memerr;
 800df42:	e073      	b.n	800e02c <ip4_frag+0x264>
      }
      pbuf_ref(p);
 800df44:	68f8      	ldr	r0, [r7, #12]
 800df46:	f7f6 fd91 	bl	8004a6c <pbuf_ref>
      pcr->original = p;
 800df4a:	69bb      	ldr	r3, [r7, #24]
 800df4c:	68fa      	ldr	r2, [r7, #12]
 800df4e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800df50:	69bb      	ldr	r3, [r7, #24]
 800df52:	4a3e      	ldr	r2, [pc, #248]	; (800e04c <ip4_frag+0x284>)
 800df54:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800df56:	6979      	ldr	r1, [r7, #20]
 800df58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df5a:	f7f6 fda9 	bl	8004ab0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800df5e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800df62:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800df66:	1ad3      	subs	r3, r2, r3
 800df68:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800df6c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800df70:	2b00      	cmp	r3, #0
 800df72:	d004      	beq.n	800df7e <ip4_frag+0x1b6>
        poff = 0;
 800df74:	2300      	movs	r3, #0
 800df76:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800df7e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800df82:	2b00      	cmp	r3, #0
 800df84:	d196      	bne.n	800deb4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800df86:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800df88:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800df8c:	4413      	add	r3, r2
 800df8e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800df90:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800df94:	68bb      	ldr	r3, [r7, #8]
 800df96:	8c1b      	ldrh	r3, [r3, #32]
 800df98:	3b14      	subs	r3, #20
 800df9a:	429a      	cmp	r2, r3
 800df9c:	bfd4      	ite	le
 800df9e:	2301      	movle	r3, #1
 800dfa0:	2300      	movgt	r3, #0
 800dfa2:	b2db      	uxtb	r3, r3
 800dfa4:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800dfa6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800dfaa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dfae:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800dfb0:	6a3b      	ldr	r3, [r7, #32]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d002      	beq.n	800dfbc <ip4_frag+0x1f4>
 800dfb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d003      	beq.n	800dfc4 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800dfbc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800dfbe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800dfc2:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800dfc4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	f7f5 fa15 	bl	80033f6 <lwip_htons>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	461a      	mov	r2, r3
 800dfd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfd2:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800dfd4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800dfd6:	3314      	adds	r3, #20
 800dfd8:	b29b      	uxth	r3, r3
 800dfda:	4618      	mov	r0, r3
 800dfdc:	f7f5 fa0b 	bl	80033f6 <lwip_htons>
 800dfe0:	4603      	mov	r3, r0
 800dfe2:	461a      	mov	r2, r3
 800dfe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfe6:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800dfe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfea:	2200      	movs	r2, #0
 800dfec:	729a      	strb	r2, [r3, #10]
 800dfee:	2200      	movs	r2, #0
 800dff0:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800dff2:	68bb      	ldr	r3, [r7, #8]
 800dff4:	695b      	ldr	r3, [r3, #20]
 800dff6:	687a      	ldr	r2, [r7, #4]
 800dff8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dffa:	68b8      	ldr	r0, [r7, #8]
 800dffc:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800dffe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e000:	f7f6 fc94 	bl	800492c <pbuf_free>
    left = (u16_t)(left - fragsize);
 800e004:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e008:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e00a:	1ad3      	subs	r3, r2, r3
 800e00c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800e010:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e014:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e016:	4413      	add	r3, r2
 800e018:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800e01c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e020:	2b00      	cmp	r3, #0
 800e022:	f47f af1a 	bne.w	800de5a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800e026:	2300      	movs	r3, #0
 800e028:	e002      	b.n	800e030 <ip4_frag+0x268>
      goto memerr;
 800e02a:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800e02c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e030:	4618      	mov	r0, r3
 800e032:	3748      	adds	r7, #72	; 0x48
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}
 800e038:	08011864 	.word	0x08011864
 800e03c:	08011a40 	.word	0x08011a40
 800e040:	080118ac 	.word	0x080118ac
 800e044:	08011a5c 	.word	0x08011a5c
 800e048:	08011a7c 	.word	0x08011a7c
 800e04c:	0800dd61 	.word	0x0800dd61

0800e050 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b086      	sub	sp, #24
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
 800e058:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800e05a:	230e      	movs	r3, #14
 800e05c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	895b      	ldrh	r3, [r3, #10]
 800e062:	2b0e      	cmp	r3, #14
 800e064:	d96e      	bls.n	800e144 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	7bdb      	ldrb	r3, [r3, #15]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d106      	bne.n	800e07c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800e06e:	683b      	ldr	r3, [r7, #0]
 800e070:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e074:	3301      	adds	r3, #1
 800e076:	b2da      	uxtb	r2, r3
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	685b      	ldr	r3, [r3, #4]
 800e080:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800e082:	693b      	ldr	r3, [r7, #16]
 800e084:	7b1a      	ldrb	r2, [r3, #12]
 800e086:	7b5b      	ldrb	r3, [r3, #13]
 800e088:	021b      	lsls	r3, r3, #8
 800e08a:	4313      	orrs	r3, r2
 800e08c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e08e:	693b      	ldr	r3, [r7, #16]
 800e090:	781b      	ldrb	r3, [r3, #0]
 800e092:	f003 0301 	and.w	r3, r3, #1
 800e096:	2b00      	cmp	r3, #0
 800e098:	d023      	beq.n	800e0e2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800e09a:	693b      	ldr	r3, [r7, #16]
 800e09c:	781b      	ldrb	r3, [r3, #0]
 800e09e:	2b01      	cmp	r3, #1
 800e0a0:	d10f      	bne.n	800e0c2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e0a2:	693b      	ldr	r3, [r7, #16]
 800e0a4:	785b      	ldrb	r3, [r3, #1]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d11b      	bne.n	800e0e2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800e0aa:	693b      	ldr	r3, [r7, #16]
 800e0ac:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e0ae:	2b5e      	cmp	r3, #94	; 0x5e
 800e0b0:	d117      	bne.n	800e0e2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	7b5b      	ldrb	r3, [r3, #13]
 800e0b6:	f043 0310 	orr.w	r3, r3, #16
 800e0ba:	b2da      	uxtb	r2, r3
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	735a      	strb	r2, [r3, #13]
 800e0c0:	e00f      	b.n	800e0e2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800e0c2:	693b      	ldr	r3, [r7, #16]
 800e0c4:	2206      	movs	r2, #6
 800e0c6:	4928      	ldr	r1, [pc, #160]	; (800e168 <ethernet_input+0x118>)
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f000 f8bb 	bl	800e244 <memcmp>
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d106      	bne.n	800e0e2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	7b5b      	ldrb	r3, [r3, #13]
 800e0d8:	f043 0308 	orr.w	r3, r3, #8
 800e0dc:	b2da      	uxtb	r2, r3
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800e0e2:	89fb      	ldrh	r3, [r7, #14]
 800e0e4:	2b08      	cmp	r3, #8
 800e0e6:	d003      	beq.n	800e0f0 <ethernet_input+0xa0>
 800e0e8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800e0ec:	d014      	beq.n	800e118 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800e0ee:	e032      	b.n	800e156 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e0f0:	683b      	ldr	r3, [r7, #0]
 800e0f2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800e0f6:	f003 0308 	and.w	r3, r3, #8
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d024      	beq.n	800e148 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e0fe:	8afb      	ldrh	r3, [r7, #22]
 800e100:	4619      	mov	r1, r3
 800e102:	6878      	ldr	r0, [r7, #4]
 800e104:	f7f6 fb8c 	bl	8004820 <pbuf_remove_header>
 800e108:	4603      	mov	r3, r0
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d11e      	bne.n	800e14c <ethernet_input+0xfc>
        ip4_input(p, netif);
 800e10e:	6839      	ldr	r1, [r7, #0]
 800e110:	6878      	ldr	r0, [r7, #4]
 800e112:	f7fe ff2d 	bl	800cf70 <ip4_input>
      break;
 800e116:	e013      	b.n	800e140 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800e11e:	f003 0308 	and.w	r3, r3, #8
 800e122:	2b00      	cmp	r3, #0
 800e124:	d014      	beq.n	800e150 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e126:	8afb      	ldrh	r3, [r7, #22]
 800e128:	4619      	mov	r1, r3
 800e12a:	6878      	ldr	r0, [r7, #4]
 800e12c:	f7f6 fb78 	bl	8004820 <pbuf_remove_header>
 800e130:	4603      	mov	r3, r0
 800e132:	2b00      	cmp	r3, #0
 800e134:	d10e      	bne.n	800e154 <ethernet_input+0x104>
        etharp_input(p, netif);
 800e136:	6839      	ldr	r1, [r7, #0]
 800e138:	6878      	ldr	r0, [r7, #4]
 800e13a:	f7fe f8cd 	bl	800c2d8 <etharp_input>
      break;
 800e13e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800e140:	2300      	movs	r3, #0
 800e142:	e00c      	b.n	800e15e <ethernet_input+0x10e>
    goto free_and_return;
 800e144:	bf00      	nop
 800e146:	e006      	b.n	800e156 <ethernet_input+0x106>
        goto free_and_return;
 800e148:	bf00      	nop
 800e14a:	e004      	b.n	800e156 <ethernet_input+0x106>
        goto free_and_return;
 800e14c:	bf00      	nop
 800e14e:	e002      	b.n	800e156 <ethernet_input+0x106>
        goto free_and_return;
 800e150:	bf00      	nop
 800e152:	e000      	b.n	800e156 <ethernet_input+0x106>
        goto free_and_return;
 800e154:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800e156:	6878      	ldr	r0, [r7, #4]
 800e158:	f7f6 fbe8 	bl	800492c <pbuf_free>
  return ERR_OK;
 800e15c:	2300      	movs	r3, #0
}
 800e15e:	4618      	mov	r0, r3
 800e160:	3718      	adds	r7, #24
 800e162:	46bd      	mov	sp, r7
 800e164:	bd80      	pop	{r7, pc}
 800e166:	bf00      	nop
 800e168:	08011c04 	.word	0x08011c04

0800e16c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b086      	sub	sp, #24
 800e170:	af00      	add	r7, sp, #0
 800e172:	60f8      	str	r0, [r7, #12]
 800e174:	60b9      	str	r1, [r7, #8]
 800e176:	607a      	str	r2, [r7, #4]
 800e178:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800e17a:	8c3b      	ldrh	r3, [r7, #32]
 800e17c:	4618      	mov	r0, r3
 800e17e:	f7f5 f93a 	bl	80033f6 <lwip_htons>
 800e182:	4603      	mov	r3, r0
 800e184:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800e186:	210e      	movs	r1, #14
 800e188:	68b8      	ldr	r0, [r7, #8]
 800e18a:	f7f6 fb39 	bl	8004800 <pbuf_add_header>
 800e18e:	4603      	mov	r3, r0
 800e190:	2b00      	cmp	r3, #0
 800e192:	d125      	bne.n	800e1e0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800e194:	68bb      	ldr	r3, [r7, #8]
 800e196:	685b      	ldr	r3, [r3, #4]
 800e198:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800e19a:	693b      	ldr	r3, [r7, #16]
 800e19c:	8afa      	ldrh	r2, [r7, #22]
 800e19e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800e1a0:	693b      	ldr	r3, [r7, #16]
 800e1a2:	2206      	movs	r2, #6
 800e1a4:	6839      	ldr	r1, [r7, #0]
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	f000 f85b 	bl	800e262 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800e1ac:	693b      	ldr	r3, [r7, #16]
 800e1ae:	3306      	adds	r3, #6
 800e1b0:	2206      	movs	r2, #6
 800e1b2:	6879      	ldr	r1, [r7, #4]
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f000 f854 	bl	800e262 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e1c0:	2b06      	cmp	r3, #6
 800e1c2:	d006      	beq.n	800e1d2 <ethernet_output+0x66>
 800e1c4:	4b0a      	ldr	r3, [pc, #40]	; (800e1f0 <ethernet_output+0x84>)
 800e1c6:	f240 1233 	movw	r2, #307	; 0x133
 800e1ca:	490a      	ldr	r1, [pc, #40]	; (800e1f4 <ethernet_output+0x88>)
 800e1cc:	480a      	ldr	r0, [pc, #40]	; (800e1f8 <ethernet_output+0x8c>)
 800e1ce:	f000 f85b 	bl	800e288 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	699b      	ldr	r3, [r3, #24]
 800e1d6:	68b9      	ldr	r1, [r7, #8]
 800e1d8:	68f8      	ldr	r0, [r7, #12]
 800e1da:	4798      	blx	r3
 800e1dc:	4603      	mov	r3, r0
 800e1de:	e002      	b.n	800e1e6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800e1e0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800e1e2:	f06f 0301 	mvn.w	r3, #1
}
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	3718      	adds	r7, #24
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	bd80      	pop	{r7, pc}
 800e1ee:	bf00      	nop
 800e1f0:	08011a8c 	.word	0x08011a8c
 800e1f4:	08011ac4 	.word	0x08011ac4
 800e1f8:	08011af8 	.word	0x08011af8

0800e1fc <__libc_init_array>:
 800e1fc:	b570      	push	{r4, r5, r6, lr}
 800e1fe:	4e0d      	ldr	r6, [pc, #52]	; (800e234 <__libc_init_array+0x38>)
 800e200:	4c0d      	ldr	r4, [pc, #52]	; (800e238 <__libc_init_array+0x3c>)
 800e202:	1ba4      	subs	r4, r4, r6
 800e204:	10a4      	asrs	r4, r4, #2
 800e206:	2500      	movs	r5, #0
 800e208:	42a5      	cmp	r5, r4
 800e20a:	d109      	bne.n	800e220 <__libc_init_array+0x24>
 800e20c:	4e0b      	ldr	r6, [pc, #44]	; (800e23c <__libc_init_array+0x40>)
 800e20e:	4c0c      	ldr	r4, [pc, #48]	; (800e240 <__libc_init_array+0x44>)
 800e210:	f000 ff5a 	bl	800f0c8 <_init>
 800e214:	1ba4      	subs	r4, r4, r6
 800e216:	10a4      	asrs	r4, r4, #2
 800e218:	2500      	movs	r5, #0
 800e21a:	42a5      	cmp	r5, r4
 800e21c:	d105      	bne.n	800e22a <__libc_init_array+0x2e>
 800e21e:	bd70      	pop	{r4, r5, r6, pc}
 800e220:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e224:	4798      	blx	r3
 800e226:	3501      	adds	r5, #1
 800e228:	e7ee      	b.n	800e208 <__libc_init_array+0xc>
 800e22a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e22e:	4798      	blx	r3
 800e230:	3501      	adds	r5, #1
 800e232:	e7f2      	b.n	800e21a <__libc_init_array+0x1e>
 800e234:	08011cb4 	.word	0x08011cb4
 800e238:	08011cb4 	.word	0x08011cb4
 800e23c:	08011cb4 	.word	0x08011cb4
 800e240:	08011cb8 	.word	0x08011cb8

0800e244 <memcmp>:
 800e244:	b530      	push	{r4, r5, lr}
 800e246:	2400      	movs	r4, #0
 800e248:	42a2      	cmp	r2, r4
 800e24a:	d101      	bne.n	800e250 <memcmp+0xc>
 800e24c:	2000      	movs	r0, #0
 800e24e:	e007      	b.n	800e260 <memcmp+0x1c>
 800e250:	5d03      	ldrb	r3, [r0, r4]
 800e252:	3401      	adds	r4, #1
 800e254:	190d      	adds	r5, r1, r4
 800e256:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800e25a:	42ab      	cmp	r3, r5
 800e25c:	d0f4      	beq.n	800e248 <memcmp+0x4>
 800e25e:	1b58      	subs	r0, r3, r5
 800e260:	bd30      	pop	{r4, r5, pc}

0800e262 <memcpy>:
 800e262:	b510      	push	{r4, lr}
 800e264:	1e43      	subs	r3, r0, #1
 800e266:	440a      	add	r2, r1
 800e268:	4291      	cmp	r1, r2
 800e26a:	d100      	bne.n	800e26e <memcpy+0xc>
 800e26c:	bd10      	pop	{r4, pc}
 800e26e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e272:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e276:	e7f7      	b.n	800e268 <memcpy+0x6>

0800e278 <memset>:
 800e278:	4402      	add	r2, r0
 800e27a:	4603      	mov	r3, r0
 800e27c:	4293      	cmp	r3, r2
 800e27e:	d100      	bne.n	800e282 <memset+0xa>
 800e280:	4770      	bx	lr
 800e282:	f803 1b01 	strb.w	r1, [r3], #1
 800e286:	e7f9      	b.n	800e27c <memset+0x4>

0800e288 <iprintf>:
 800e288:	b40f      	push	{r0, r1, r2, r3}
 800e28a:	4b0a      	ldr	r3, [pc, #40]	; (800e2b4 <iprintf+0x2c>)
 800e28c:	b513      	push	{r0, r1, r4, lr}
 800e28e:	681c      	ldr	r4, [r3, #0]
 800e290:	b124      	cbz	r4, 800e29c <iprintf+0x14>
 800e292:	69a3      	ldr	r3, [r4, #24]
 800e294:	b913      	cbnz	r3, 800e29c <iprintf+0x14>
 800e296:	4620      	mov	r0, r4
 800e298:	f000 f882 	bl	800e3a0 <__sinit>
 800e29c:	ab05      	add	r3, sp, #20
 800e29e:	9a04      	ldr	r2, [sp, #16]
 800e2a0:	68a1      	ldr	r1, [r4, #8]
 800e2a2:	9301      	str	r3, [sp, #4]
 800e2a4:	4620      	mov	r0, r4
 800e2a6:	f000 f9df 	bl	800e668 <_vfiprintf_r>
 800e2aa:	b002      	add	sp, #8
 800e2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2b0:	b004      	add	sp, #16
 800e2b2:	4770      	bx	lr
 800e2b4:	20000014 	.word	0x20000014

0800e2b8 <rand>:
 800e2b8:	b538      	push	{r3, r4, r5, lr}
 800e2ba:	4b13      	ldr	r3, [pc, #76]	; (800e308 <rand+0x50>)
 800e2bc:	681c      	ldr	r4, [r3, #0]
 800e2be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e2c0:	b97b      	cbnz	r3, 800e2e2 <rand+0x2a>
 800e2c2:	2018      	movs	r0, #24
 800e2c4:	f000 f8f6 	bl	800e4b4 <malloc>
 800e2c8:	4a10      	ldr	r2, [pc, #64]	; (800e30c <rand+0x54>)
 800e2ca:	4b11      	ldr	r3, [pc, #68]	; (800e310 <rand+0x58>)
 800e2cc:	63a0      	str	r0, [r4, #56]	; 0x38
 800e2ce:	e9c0 2300 	strd	r2, r3, [r0]
 800e2d2:	4b10      	ldr	r3, [pc, #64]	; (800e314 <rand+0x5c>)
 800e2d4:	6083      	str	r3, [r0, #8]
 800e2d6:	230b      	movs	r3, #11
 800e2d8:	8183      	strh	r3, [r0, #12]
 800e2da:	2201      	movs	r2, #1
 800e2dc:	2300      	movs	r3, #0
 800e2de:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800e2e2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e2e4:	480c      	ldr	r0, [pc, #48]	; (800e318 <rand+0x60>)
 800e2e6:	690a      	ldr	r2, [r1, #16]
 800e2e8:	694b      	ldr	r3, [r1, #20]
 800e2ea:	4c0c      	ldr	r4, [pc, #48]	; (800e31c <rand+0x64>)
 800e2ec:	4350      	muls	r0, r2
 800e2ee:	fb04 0003 	mla	r0, r4, r3, r0
 800e2f2:	fba2 2304 	umull	r2, r3, r2, r4
 800e2f6:	4403      	add	r3, r0
 800e2f8:	1c54      	adds	r4, r2, #1
 800e2fa:	f143 0500 	adc.w	r5, r3, #0
 800e2fe:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800e302:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800e306:	bd38      	pop	{r3, r4, r5, pc}
 800e308:	20000014 	.word	0x20000014
 800e30c:	abcd330e 	.word	0xabcd330e
 800e310:	e66d1234 	.word	0xe66d1234
 800e314:	0005deec 	.word	0x0005deec
 800e318:	5851f42d 	.word	0x5851f42d
 800e31c:	4c957f2d 	.word	0x4c957f2d

0800e320 <std>:
 800e320:	2300      	movs	r3, #0
 800e322:	b510      	push	{r4, lr}
 800e324:	4604      	mov	r4, r0
 800e326:	e9c0 3300 	strd	r3, r3, [r0]
 800e32a:	6083      	str	r3, [r0, #8]
 800e32c:	8181      	strh	r1, [r0, #12]
 800e32e:	6643      	str	r3, [r0, #100]	; 0x64
 800e330:	81c2      	strh	r2, [r0, #14]
 800e332:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e336:	6183      	str	r3, [r0, #24]
 800e338:	4619      	mov	r1, r3
 800e33a:	2208      	movs	r2, #8
 800e33c:	305c      	adds	r0, #92	; 0x5c
 800e33e:	f7ff ff9b 	bl	800e278 <memset>
 800e342:	4b05      	ldr	r3, [pc, #20]	; (800e358 <std+0x38>)
 800e344:	6263      	str	r3, [r4, #36]	; 0x24
 800e346:	4b05      	ldr	r3, [pc, #20]	; (800e35c <std+0x3c>)
 800e348:	62a3      	str	r3, [r4, #40]	; 0x28
 800e34a:	4b05      	ldr	r3, [pc, #20]	; (800e360 <std+0x40>)
 800e34c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e34e:	4b05      	ldr	r3, [pc, #20]	; (800e364 <std+0x44>)
 800e350:	6224      	str	r4, [r4, #32]
 800e352:	6323      	str	r3, [r4, #48]	; 0x30
 800e354:	bd10      	pop	{r4, pc}
 800e356:	bf00      	nop
 800e358:	0800ebc5 	.word	0x0800ebc5
 800e35c:	0800ebe7 	.word	0x0800ebe7
 800e360:	0800ec1f 	.word	0x0800ec1f
 800e364:	0800ec43 	.word	0x0800ec43

0800e368 <_cleanup_r>:
 800e368:	4901      	ldr	r1, [pc, #4]	; (800e370 <_cleanup_r+0x8>)
 800e36a:	f000 b885 	b.w	800e478 <_fwalk_reent>
 800e36e:	bf00      	nop
 800e370:	0800ef1d 	.word	0x0800ef1d

0800e374 <__sfmoreglue>:
 800e374:	b570      	push	{r4, r5, r6, lr}
 800e376:	1e4a      	subs	r2, r1, #1
 800e378:	2568      	movs	r5, #104	; 0x68
 800e37a:	4355      	muls	r5, r2
 800e37c:	460e      	mov	r6, r1
 800e37e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e382:	f000 f8ed 	bl	800e560 <_malloc_r>
 800e386:	4604      	mov	r4, r0
 800e388:	b140      	cbz	r0, 800e39c <__sfmoreglue+0x28>
 800e38a:	2100      	movs	r1, #0
 800e38c:	e9c0 1600 	strd	r1, r6, [r0]
 800e390:	300c      	adds	r0, #12
 800e392:	60a0      	str	r0, [r4, #8]
 800e394:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e398:	f7ff ff6e 	bl	800e278 <memset>
 800e39c:	4620      	mov	r0, r4
 800e39e:	bd70      	pop	{r4, r5, r6, pc}

0800e3a0 <__sinit>:
 800e3a0:	6983      	ldr	r3, [r0, #24]
 800e3a2:	b510      	push	{r4, lr}
 800e3a4:	4604      	mov	r4, r0
 800e3a6:	bb33      	cbnz	r3, 800e3f6 <__sinit+0x56>
 800e3a8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800e3ac:	6503      	str	r3, [r0, #80]	; 0x50
 800e3ae:	4b12      	ldr	r3, [pc, #72]	; (800e3f8 <__sinit+0x58>)
 800e3b0:	4a12      	ldr	r2, [pc, #72]	; (800e3fc <__sinit+0x5c>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	6282      	str	r2, [r0, #40]	; 0x28
 800e3b6:	4298      	cmp	r0, r3
 800e3b8:	bf04      	itt	eq
 800e3ba:	2301      	moveq	r3, #1
 800e3bc:	6183      	streq	r3, [r0, #24]
 800e3be:	f000 f81f 	bl	800e400 <__sfp>
 800e3c2:	6060      	str	r0, [r4, #4]
 800e3c4:	4620      	mov	r0, r4
 800e3c6:	f000 f81b 	bl	800e400 <__sfp>
 800e3ca:	60a0      	str	r0, [r4, #8]
 800e3cc:	4620      	mov	r0, r4
 800e3ce:	f000 f817 	bl	800e400 <__sfp>
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	60e0      	str	r0, [r4, #12]
 800e3d6:	2104      	movs	r1, #4
 800e3d8:	6860      	ldr	r0, [r4, #4]
 800e3da:	f7ff ffa1 	bl	800e320 <std>
 800e3de:	2201      	movs	r2, #1
 800e3e0:	2109      	movs	r1, #9
 800e3e2:	68a0      	ldr	r0, [r4, #8]
 800e3e4:	f7ff ff9c 	bl	800e320 <std>
 800e3e8:	2202      	movs	r2, #2
 800e3ea:	2112      	movs	r1, #18
 800e3ec:	68e0      	ldr	r0, [r4, #12]
 800e3ee:	f7ff ff97 	bl	800e320 <std>
 800e3f2:	2301      	movs	r3, #1
 800e3f4:	61a3      	str	r3, [r4, #24]
 800e3f6:	bd10      	pop	{r4, pc}
 800e3f8:	08011c14 	.word	0x08011c14
 800e3fc:	0800e369 	.word	0x0800e369

0800e400 <__sfp>:
 800e400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e402:	4b1b      	ldr	r3, [pc, #108]	; (800e470 <__sfp+0x70>)
 800e404:	681e      	ldr	r6, [r3, #0]
 800e406:	69b3      	ldr	r3, [r6, #24]
 800e408:	4607      	mov	r7, r0
 800e40a:	b913      	cbnz	r3, 800e412 <__sfp+0x12>
 800e40c:	4630      	mov	r0, r6
 800e40e:	f7ff ffc7 	bl	800e3a0 <__sinit>
 800e412:	3648      	adds	r6, #72	; 0x48
 800e414:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e418:	3b01      	subs	r3, #1
 800e41a:	d503      	bpl.n	800e424 <__sfp+0x24>
 800e41c:	6833      	ldr	r3, [r6, #0]
 800e41e:	b133      	cbz	r3, 800e42e <__sfp+0x2e>
 800e420:	6836      	ldr	r6, [r6, #0]
 800e422:	e7f7      	b.n	800e414 <__sfp+0x14>
 800e424:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e428:	b16d      	cbz	r5, 800e446 <__sfp+0x46>
 800e42a:	3468      	adds	r4, #104	; 0x68
 800e42c:	e7f4      	b.n	800e418 <__sfp+0x18>
 800e42e:	2104      	movs	r1, #4
 800e430:	4638      	mov	r0, r7
 800e432:	f7ff ff9f 	bl	800e374 <__sfmoreglue>
 800e436:	6030      	str	r0, [r6, #0]
 800e438:	2800      	cmp	r0, #0
 800e43a:	d1f1      	bne.n	800e420 <__sfp+0x20>
 800e43c:	230c      	movs	r3, #12
 800e43e:	603b      	str	r3, [r7, #0]
 800e440:	4604      	mov	r4, r0
 800e442:	4620      	mov	r0, r4
 800e444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e446:	4b0b      	ldr	r3, [pc, #44]	; (800e474 <__sfp+0x74>)
 800e448:	6665      	str	r5, [r4, #100]	; 0x64
 800e44a:	e9c4 5500 	strd	r5, r5, [r4]
 800e44e:	60a5      	str	r5, [r4, #8]
 800e450:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e454:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800e458:	2208      	movs	r2, #8
 800e45a:	4629      	mov	r1, r5
 800e45c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e460:	f7ff ff0a 	bl	800e278 <memset>
 800e464:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e468:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e46c:	e7e9      	b.n	800e442 <__sfp+0x42>
 800e46e:	bf00      	nop
 800e470:	08011c14 	.word	0x08011c14
 800e474:	ffff0001 	.word	0xffff0001

0800e478 <_fwalk_reent>:
 800e478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e47c:	4680      	mov	r8, r0
 800e47e:	4689      	mov	r9, r1
 800e480:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e484:	2600      	movs	r6, #0
 800e486:	b914      	cbnz	r4, 800e48e <_fwalk_reent+0x16>
 800e488:	4630      	mov	r0, r6
 800e48a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e48e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800e492:	3f01      	subs	r7, #1
 800e494:	d501      	bpl.n	800e49a <_fwalk_reent+0x22>
 800e496:	6824      	ldr	r4, [r4, #0]
 800e498:	e7f5      	b.n	800e486 <_fwalk_reent+0xe>
 800e49a:	89ab      	ldrh	r3, [r5, #12]
 800e49c:	2b01      	cmp	r3, #1
 800e49e:	d907      	bls.n	800e4b0 <_fwalk_reent+0x38>
 800e4a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e4a4:	3301      	adds	r3, #1
 800e4a6:	d003      	beq.n	800e4b0 <_fwalk_reent+0x38>
 800e4a8:	4629      	mov	r1, r5
 800e4aa:	4640      	mov	r0, r8
 800e4ac:	47c8      	blx	r9
 800e4ae:	4306      	orrs	r6, r0
 800e4b0:	3568      	adds	r5, #104	; 0x68
 800e4b2:	e7ee      	b.n	800e492 <_fwalk_reent+0x1a>

0800e4b4 <malloc>:
 800e4b4:	4b02      	ldr	r3, [pc, #8]	; (800e4c0 <malloc+0xc>)
 800e4b6:	4601      	mov	r1, r0
 800e4b8:	6818      	ldr	r0, [r3, #0]
 800e4ba:	f000 b851 	b.w	800e560 <_malloc_r>
 800e4be:	bf00      	nop
 800e4c0:	20000014 	.word	0x20000014

0800e4c4 <_free_r>:
 800e4c4:	b538      	push	{r3, r4, r5, lr}
 800e4c6:	4605      	mov	r5, r0
 800e4c8:	2900      	cmp	r1, #0
 800e4ca:	d045      	beq.n	800e558 <_free_r+0x94>
 800e4cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e4d0:	1f0c      	subs	r4, r1, #4
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	bfb8      	it	lt
 800e4d6:	18e4      	addlt	r4, r4, r3
 800e4d8:	f000 fdc0 	bl	800f05c <__malloc_lock>
 800e4dc:	4a1f      	ldr	r2, [pc, #124]	; (800e55c <_free_r+0x98>)
 800e4de:	6813      	ldr	r3, [r2, #0]
 800e4e0:	4610      	mov	r0, r2
 800e4e2:	b933      	cbnz	r3, 800e4f2 <_free_r+0x2e>
 800e4e4:	6063      	str	r3, [r4, #4]
 800e4e6:	6014      	str	r4, [r2, #0]
 800e4e8:	4628      	mov	r0, r5
 800e4ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e4ee:	f000 bdb6 	b.w	800f05e <__malloc_unlock>
 800e4f2:	42a3      	cmp	r3, r4
 800e4f4:	d90c      	bls.n	800e510 <_free_r+0x4c>
 800e4f6:	6821      	ldr	r1, [r4, #0]
 800e4f8:	1862      	adds	r2, r4, r1
 800e4fa:	4293      	cmp	r3, r2
 800e4fc:	bf04      	itt	eq
 800e4fe:	681a      	ldreq	r2, [r3, #0]
 800e500:	685b      	ldreq	r3, [r3, #4]
 800e502:	6063      	str	r3, [r4, #4]
 800e504:	bf04      	itt	eq
 800e506:	1852      	addeq	r2, r2, r1
 800e508:	6022      	streq	r2, [r4, #0]
 800e50a:	6004      	str	r4, [r0, #0]
 800e50c:	e7ec      	b.n	800e4e8 <_free_r+0x24>
 800e50e:	4613      	mov	r3, r2
 800e510:	685a      	ldr	r2, [r3, #4]
 800e512:	b10a      	cbz	r2, 800e518 <_free_r+0x54>
 800e514:	42a2      	cmp	r2, r4
 800e516:	d9fa      	bls.n	800e50e <_free_r+0x4a>
 800e518:	6819      	ldr	r1, [r3, #0]
 800e51a:	1858      	adds	r0, r3, r1
 800e51c:	42a0      	cmp	r0, r4
 800e51e:	d10b      	bne.n	800e538 <_free_r+0x74>
 800e520:	6820      	ldr	r0, [r4, #0]
 800e522:	4401      	add	r1, r0
 800e524:	1858      	adds	r0, r3, r1
 800e526:	4282      	cmp	r2, r0
 800e528:	6019      	str	r1, [r3, #0]
 800e52a:	d1dd      	bne.n	800e4e8 <_free_r+0x24>
 800e52c:	6810      	ldr	r0, [r2, #0]
 800e52e:	6852      	ldr	r2, [r2, #4]
 800e530:	605a      	str	r2, [r3, #4]
 800e532:	4401      	add	r1, r0
 800e534:	6019      	str	r1, [r3, #0]
 800e536:	e7d7      	b.n	800e4e8 <_free_r+0x24>
 800e538:	d902      	bls.n	800e540 <_free_r+0x7c>
 800e53a:	230c      	movs	r3, #12
 800e53c:	602b      	str	r3, [r5, #0]
 800e53e:	e7d3      	b.n	800e4e8 <_free_r+0x24>
 800e540:	6820      	ldr	r0, [r4, #0]
 800e542:	1821      	adds	r1, r4, r0
 800e544:	428a      	cmp	r2, r1
 800e546:	bf04      	itt	eq
 800e548:	6811      	ldreq	r1, [r2, #0]
 800e54a:	6852      	ldreq	r2, [r2, #4]
 800e54c:	6062      	str	r2, [r4, #4]
 800e54e:	bf04      	itt	eq
 800e550:	1809      	addeq	r1, r1, r0
 800e552:	6021      	streq	r1, [r4, #0]
 800e554:	605c      	str	r4, [r3, #4]
 800e556:	e7c7      	b.n	800e4e8 <_free_r+0x24>
 800e558:	bd38      	pop	{r3, r4, r5, pc}
 800e55a:	bf00      	nop
 800e55c:	2000020c 	.word	0x2000020c

0800e560 <_malloc_r>:
 800e560:	b570      	push	{r4, r5, r6, lr}
 800e562:	1ccd      	adds	r5, r1, #3
 800e564:	f025 0503 	bic.w	r5, r5, #3
 800e568:	3508      	adds	r5, #8
 800e56a:	2d0c      	cmp	r5, #12
 800e56c:	bf38      	it	cc
 800e56e:	250c      	movcc	r5, #12
 800e570:	2d00      	cmp	r5, #0
 800e572:	4606      	mov	r6, r0
 800e574:	db01      	blt.n	800e57a <_malloc_r+0x1a>
 800e576:	42a9      	cmp	r1, r5
 800e578:	d903      	bls.n	800e582 <_malloc_r+0x22>
 800e57a:	230c      	movs	r3, #12
 800e57c:	6033      	str	r3, [r6, #0]
 800e57e:	2000      	movs	r0, #0
 800e580:	bd70      	pop	{r4, r5, r6, pc}
 800e582:	f000 fd6b 	bl	800f05c <__malloc_lock>
 800e586:	4a21      	ldr	r2, [pc, #132]	; (800e60c <_malloc_r+0xac>)
 800e588:	6814      	ldr	r4, [r2, #0]
 800e58a:	4621      	mov	r1, r4
 800e58c:	b991      	cbnz	r1, 800e5b4 <_malloc_r+0x54>
 800e58e:	4c20      	ldr	r4, [pc, #128]	; (800e610 <_malloc_r+0xb0>)
 800e590:	6823      	ldr	r3, [r4, #0]
 800e592:	b91b      	cbnz	r3, 800e59c <_malloc_r+0x3c>
 800e594:	4630      	mov	r0, r6
 800e596:	f000 fb05 	bl	800eba4 <_sbrk_r>
 800e59a:	6020      	str	r0, [r4, #0]
 800e59c:	4629      	mov	r1, r5
 800e59e:	4630      	mov	r0, r6
 800e5a0:	f000 fb00 	bl	800eba4 <_sbrk_r>
 800e5a4:	1c43      	adds	r3, r0, #1
 800e5a6:	d124      	bne.n	800e5f2 <_malloc_r+0x92>
 800e5a8:	230c      	movs	r3, #12
 800e5aa:	6033      	str	r3, [r6, #0]
 800e5ac:	4630      	mov	r0, r6
 800e5ae:	f000 fd56 	bl	800f05e <__malloc_unlock>
 800e5b2:	e7e4      	b.n	800e57e <_malloc_r+0x1e>
 800e5b4:	680b      	ldr	r3, [r1, #0]
 800e5b6:	1b5b      	subs	r3, r3, r5
 800e5b8:	d418      	bmi.n	800e5ec <_malloc_r+0x8c>
 800e5ba:	2b0b      	cmp	r3, #11
 800e5bc:	d90f      	bls.n	800e5de <_malloc_r+0x7e>
 800e5be:	600b      	str	r3, [r1, #0]
 800e5c0:	50cd      	str	r5, [r1, r3]
 800e5c2:	18cc      	adds	r4, r1, r3
 800e5c4:	4630      	mov	r0, r6
 800e5c6:	f000 fd4a 	bl	800f05e <__malloc_unlock>
 800e5ca:	f104 000b 	add.w	r0, r4, #11
 800e5ce:	1d23      	adds	r3, r4, #4
 800e5d0:	f020 0007 	bic.w	r0, r0, #7
 800e5d4:	1ac3      	subs	r3, r0, r3
 800e5d6:	d0d3      	beq.n	800e580 <_malloc_r+0x20>
 800e5d8:	425a      	negs	r2, r3
 800e5da:	50e2      	str	r2, [r4, r3]
 800e5dc:	e7d0      	b.n	800e580 <_malloc_r+0x20>
 800e5de:	428c      	cmp	r4, r1
 800e5e0:	684b      	ldr	r3, [r1, #4]
 800e5e2:	bf16      	itet	ne
 800e5e4:	6063      	strne	r3, [r4, #4]
 800e5e6:	6013      	streq	r3, [r2, #0]
 800e5e8:	460c      	movne	r4, r1
 800e5ea:	e7eb      	b.n	800e5c4 <_malloc_r+0x64>
 800e5ec:	460c      	mov	r4, r1
 800e5ee:	6849      	ldr	r1, [r1, #4]
 800e5f0:	e7cc      	b.n	800e58c <_malloc_r+0x2c>
 800e5f2:	1cc4      	adds	r4, r0, #3
 800e5f4:	f024 0403 	bic.w	r4, r4, #3
 800e5f8:	42a0      	cmp	r0, r4
 800e5fa:	d005      	beq.n	800e608 <_malloc_r+0xa8>
 800e5fc:	1a21      	subs	r1, r4, r0
 800e5fe:	4630      	mov	r0, r6
 800e600:	f000 fad0 	bl	800eba4 <_sbrk_r>
 800e604:	3001      	adds	r0, #1
 800e606:	d0cf      	beq.n	800e5a8 <_malloc_r+0x48>
 800e608:	6025      	str	r5, [r4, #0]
 800e60a:	e7db      	b.n	800e5c4 <_malloc_r+0x64>
 800e60c:	2000020c 	.word	0x2000020c
 800e610:	20000210 	.word	0x20000210

0800e614 <__sfputc_r>:
 800e614:	6893      	ldr	r3, [r2, #8]
 800e616:	3b01      	subs	r3, #1
 800e618:	2b00      	cmp	r3, #0
 800e61a:	b410      	push	{r4}
 800e61c:	6093      	str	r3, [r2, #8]
 800e61e:	da08      	bge.n	800e632 <__sfputc_r+0x1e>
 800e620:	6994      	ldr	r4, [r2, #24]
 800e622:	42a3      	cmp	r3, r4
 800e624:	db01      	blt.n	800e62a <__sfputc_r+0x16>
 800e626:	290a      	cmp	r1, #10
 800e628:	d103      	bne.n	800e632 <__sfputc_r+0x1e>
 800e62a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e62e:	f000 bb0d 	b.w	800ec4c <__swbuf_r>
 800e632:	6813      	ldr	r3, [r2, #0]
 800e634:	1c58      	adds	r0, r3, #1
 800e636:	6010      	str	r0, [r2, #0]
 800e638:	7019      	strb	r1, [r3, #0]
 800e63a:	4608      	mov	r0, r1
 800e63c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e640:	4770      	bx	lr

0800e642 <__sfputs_r>:
 800e642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e644:	4606      	mov	r6, r0
 800e646:	460f      	mov	r7, r1
 800e648:	4614      	mov	r4, r2
 800e64a:	18d5      	adds	r5, r2, r3
 800e64c:	42ac      	cmp	r4, r5
 800e64e:	d101      	bne.n	800e654 <__sfputs_r+0x12>
 800e650:	2000      	movs	r0, #0
 800e652:	e007      	b.n	800e664 <__sfputs_r+0x22>
 800e654:	463a      	mov	r2, r7
 800e656:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e65a:	4630      	mov	r0, r6
 800e65c:	f7ff ffda 	bl	800e614 <__sfputc_r>
 800e660:	1c43      	adds	r3, r0, #1
 800e662:	d1f3      	bne.n	800e64c <__sfputs_r+0xa>
 800e664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e668 <_vfiprintf_r>:
 800e668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e66c:	460c      	mov	r4, r1
 800e66e:	b09d      	sub	sp, #116	; 0x74
 800e670:	4617      	mov	r7, r2
 800e672:	461d      	mov	r5, r3
 800e674:	4606      	mov	r6, r0
 800e676:	b118      	cbz	r0, 800e680 <_vfiprintf_r+0x18>
 800e678:	6983      	ldr	r3, [r0, #24]
 800e67a:	b90b      	cbnz	r3, 800e680 <_vfiprintf_r+0x18>
 800e67c:	f7ff fe90 	bl	800e3a0 <__sinit>
 800e680:	4b7c      	ldr	r3, [pc, #496]	; (800e874 <_vfiprintf_r+0x20c>)
 800e682:	429c      	cmp	r4, r3
 800e684:	d158      	bne.n	800e738 <_vfiprintf_r+0xd0>
 800e686:	6874      	ldr	r4, [r6, #4]
 800e688:	89a3      	ldrh	r3, [r4, #12]
 800e68a:	0718      	lsls	r0, r3, #28
 800e68c:	d55e      	bpl.n	800e74c <_vfiprintf_r+0xe4>
 800e68e:	6923      	ldr	r3, [r4, #16]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d05b      	beq.n	800e74c <_vfiprintf_r+0xe4>
 800e694:	2300      	movs	r3, #0
 800e696:	9309      	str	r3, [sp, #36]	; 0x24
 800e698:	2320      	movs	r3, #32
 800e69a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e69e:	2330      	movs	r3, #48	; 0x30
 800e6a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e6a4:	9503      	str	r5, [sp, #12]
 800e6a6:	f04f 0b01 	mov.w	fp, #1
 800e6aa:	46b8      	mov	r8, r7
 800e6ac:	4645      	mov	r5, r8
 800e6ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e6b2:	b10b      	cbz	r3, 800e6b8 <_vfiprintf_r+0x50>
 800e6b4:	2b25      	cmp	r3, #37	; 0x25
 800e6b6:	d154      	bne.n	800e762 <_vfiprintf_r+0xfa>
 800e6b8:	ebb8 0a07 	subs.w	sl, r8, r7
 800e6bc:	d00b      	beq.n	800e6d6 <_vfiprintf_r+0x6e>
 800e6be:	4653      	mov	r3, sl
 800e6c0:	463a      	mov	r2, r7
 800e6c2:	4621      	mov	r1, r4
 800e6c4:	4630      	mov	r0, r6
 800e6c6:	f7ff ffbc 	bl	800e642 <__sfputs_r>
 800e6ca:	3001      	adds	r0, #1
 800e6cc:	f000 80c2 	beq.w	800e854 <_vfiprintf_r+0x1ec>
 800e6d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6d2:	4453      	add	r3, sl
 800e6d4:	9309      	str	r3, [sp, #36]	; 0x24
 800e6d6:	f898 3000 	ldrb.w	r3, [r8]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	f000 80ba 	beq.w	800e854 <_vfiprintf_r+0x1ec>
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	f04f 32ff 	mov.w	r2, #4294967295
 800e6e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e6ea:	9304      	str	r3, [sp, #16]
 800e6ec:	9307      	str	r3, [sp, #28]
 800e6ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e6f2:	931a      	str	r3, [sp, #104]	; 0x68
 800e6f4:	46a8      	mov	r8, r5
 800e6f6:	2205      	movs	r2, #5
 800e6f8:	f818 1b01 	ldrb.w	r1, [r8], #1
 800e6fc:	485e      	ldr	r0, [pc, #376]	; (800e878 <_vfiprintf_r+0x210>)
 800e6fe:	f7f1 fd67 	bl	80001d0 <memchr>
 800e702:	9b04      	ldr	r3, [sp, #16]
 800e704:	bb78      	cbnz	r0, 800e766 <_vfiprintf_r+0xfe>
 800e706:	06d9      	lsls	r1, r3, #27
 800e708:	bf44      	itt	mi
 800e70a:	2220      	movmi	r2, #32
 800e70c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e710:	071a      	lsls	r2, r3, #28
 800e712:	bf44      	itt	mi
 800e714:	222b      	movmi	r2, #43	; 0x2b
 800e716:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e71a:	782a      	ldrb	r2, [r5, #0]
 800e71c:	2a2a      	cmp	r2, #42	; 0x2a
 800e71e:	d02a      	beq.n	800e776 <_vfiprintf_r+0x10e>
 800e720:	9a07      	ldr	r2, [sp, #28]
 800e722:	46a8      	mov	r8, r5
 800e724:	2000      	movs	r0, #0
 800e726:	250a      	movs	r5, #10
 800e728:	4641      	mov	r1, r8
 800e72a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e72e:	3b30      	subs	r3, #48	; 0x30
 800e730:	2b09      	cmp	r3, #9
 800e732:	d969      	bls.n	800e808 <_vfiprintf_r+0x1a0>
 800e734:	b360      	cbz	r0, 800e790 <_vfiprintf_r+0x128>
 800e736:	e024      	b.n	800e782 <_vfiprintf_r+0x11a>
 800e738:	4b50      	ldr	r3, [pc, #320]	; (800e87c <_vfiprintf_r+0x214>)
 800e73a:	429c      	cmp	r4, r3
 800e73c:	d101      	bne.n	800e742 <_vfiprintf_r+0xda>
 800e73e:	68b4      	ldr	r4, [r6, #8]
 800e740:	e7a2      	b.n	800e688 <_vfiprintf_r+0x20>
 800e742:	4b4f      	ldr	r3, [pc, #316]	; (800e880 <_vfiprintf_r+0x218>)
 800e744:	429c      	cmp	r4, r3
 800e746:	bf08      	it	eq
 800e748:	68f4      	ldreq	r4, [r6, #12]
 800e74a:	e79d      	b.n	800e688 <_vfiprintf_r+0x20>
 800e74c:	4621      	mov	r1, r4
 800e74e:	4630      	mov	r0, r6
 800e750:	f000 fae0 	bl	800ed14 <__swsetup_r>
 800e754:	2800      	cmp	r0, #0
 800e756:	d09d      	beq.n	800e694 <_vfiprintf_r+0x2c>
 800e758:	f04f 30ff 	mov.w	r0, #4294967295
 800e75c:	b01d      	add	sp, #116	; 0x74
 800e75e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e762:	46a8      	mov	r8, r5
 800e764:	e7a2      	b.n	800e6ac <_vfiprintf_r+0x44>
 800e766:	4a44      	ldr	r2, [pc, #272]	; (800e878 <_vfiprintf_r+0x210>)
 800e768:	1a80      	subs	r0, r0, r2
 800e76a:	fa0b f000 	lsl.w	r0, fp, r0
 800e76e:	4318      	orrs	r0, r3
 800e770:	9004      	str	r0, [sp, #16]
 800e772:	4645      	mov	r5, r8
 800e774:	e7be      	b.n	800e6f4 <_vfiprintf_r+0x8c>
 800e776:	9a03      	ldr	r2, [sp, #12]
 800e778:	1d11      	adds	r1, r2, #4
 800e77a:	6812      	ldr	r2, [r2, #0]
 800e77c:	9103      	str	r1, [sp, #12]
 800e77e:	2a00      	cmp	r2, #0
 800e780:	db01      	blt.n	800e786 <_vfiprintf_r+0x11e>
 800e782:	9207      	str	r2, [sp, #28]
 800e784:	e004      	b.n	800e790 <_vfiprintf_r+0x128>
 800e786:	4252      	negs	r2, r2
 800e788:	f043 0302 	orr.w	r3, r3, #2
 800e78c:	9207      	str	r2, [sp, #28]
 800e78e:	9304      	str	r3, [sp, #16]
 800e790:	f898 3000 	ldrb.w	r3, [r8]
 800e794:	2b2e      	cmp	r3, #46	; 0x2e
 800e796:	d10e      	bne.n	800e7b6 <_vfiprintf_r+0x14e>
 800e798:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e79c:	2b2a      	cmp	r3, #42	; 0x2a
 800e79e:	d138      	bne.n	800e812 <_vfiprintf_r+0x1aa>
 800e7a0:	9b03      	ldr	r3, [sp, #12]
 800e7a2:	1d1a      	adds	r2, r3, #4
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	9203      	str	r2, [sp, #12]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	bfb8      	it	lt
 800e7ac:	f04f 33ff 	movlt.w	r3, #4294967295
 800e7b0:	f108 0802 	add.w	r8, r8, #2
 800e7b4:	9305      	str	r3, [sp, #20]
 800e7b6:	4d33      	ldr	r5, [pc, #204]	; (800e884 <_vfiprintf_r+0x21c>)
 800e7b8:	f898 1000 	ldrb.w	r1, [r8]
 800e7bc:	2203      	movs	r2, #3
 800e7be:	4628      	mov	r0, r5
 800e7c0:	f7f1 fd06 	bl	80001d0 <memchr>
 800e7c4:	b140      	cbz	r0, 800e7d8 <_vfiprintf_r+0x170>
 800e7c6:	2340      	movs	r3, #64	; 0x40
 800e7c8:	1b40      	subs	r0, r0, r5
 800e7ca:	fa03 f000 	lsl.w	r0, r3, r0
 800e7ce:	9b04      	ldr	r3, [sp, #16]
 800e7d0:	4303      	orrs	r3, r0
 800e7d2:	f108 0801 	add.w	r8, r8, #1
 800e7d6:	9304      	str	r3, [sp, #16]
 800e7d8:	f898 1000 	ldrb.w	r1, [r8]
 800e7dc:	482a      	ldr	r0, [pc, #168]	; (800e888 <_vfiprintf_r+0x220>)
 800e7de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e7e2:	2206      	movs	r2, #6
 800e7e4:	f108 0701 	add.w	r7, r8, #1
 800e7e8:	f7f1 fcf2 	bl	80001d0 <memchr>
 800e7ec:	2800      	cmp	r0, #0
 800e7ee:	d037      	beq.n	800e860 <_vfiprintf_r+0x1f8>
 800e7f0:	4b26      	ldr	r3, [pc, #152]	; (800e88c <_vfiprintf_r+0x224>)
 800e7f2:	bb1b      	cbnz	r3, 800e83c <_vfiprintf_r+0x1d4>
 800e7f4:	9b03      	ldr	r3, [sp, #12]
 800e7f6:	3307      	adds	r3, #7
 800e7f8:	f023 0307 	bic.w	r3, r3, #7
 800e7fc:	3308      	adds	r3, #8
 800e7fe:	9303      	str	r3, [sp, #12]
 800e800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e802:	444b      	add	r3, r9
 800e804:	9309      	str	r3, [sp, #36]	; 0x24
 800e806:	e750      	b.n	800e6aa <_vfiprintf_r+0x42>
 800e808:	fb05 3202 	mla	r2, r5, r2, r3
 800e80c:	2001      	movs	r0, #1
 800e80e:	4688      	mov	r8, r1
 800e810:	e78a      	b.n	800e728 <_vfiprintf_r+0xc0>
 800e812:	2300      	movs	r3, #0
 800e814:	f108 0801 	add.w	r8, r8, #1
 800e818:	9305      	str	r3, [sp, #20]
 800e81a:	4619      	mov	r1, r3
 800e81c:	250a      	movs	r5, #10
 800e81e:	4640      	mov	r0, r8
 800e820:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e824:	3a30      	subs	r2, #48	; 0x30
 800e826:	2a09      	cmp	r2, #9
 800e828:	d903      	bls.n	800e832 <_vfiprintf_r+0x1ca>
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d0c3      	beq.n	800e7b6 <_vfiprintf_r+0x14e>
 800e82e:	9105      	str	r1, [sp, #20]
 800e830:	e7c1      	b.n	800e7b6 <_vfiprintf_r+0x14e>
 800e832:	fb05 2101 	mla	r1, r5, r1, r2
 800e836:	2301      	movs	r3, #1
 800e838:	4680      	mov	r8, r0
 800e83a:	e7f0      	b.n	800e81e <_vfiprintf_r+0x1b6>
 800e83c:	ab03      	add	r3, sp, #12
 800e83e:	9300      	str	r3, [sp, #0]
 800e840:	4622      	mov	r2, r4
 800e842:	4b13      	ldr	r3, [pc, #76]	; (800e890 <_vfiprintf_r+0x228>)
 800e844:	a904      	add	r1, sp, #16
 800e846:	4630      	mov	r0, r6
 800e848:	f3af 8000 	nop.w
 800e84c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e850:	4681      	mov	r9, r0
 800e852:	d1d5      	bne.n	800e800 <_vfiprintf_r+0x198>
 800e854:	89a3      	ldrh	r3, [r4, #12]
 800e856:	065b      	lsls	r3, r3, #25
 800e858:	f53f af7e 	bmi.w	800e758 <_vfiprintf_r+0xf0>
 800e85c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e85e:	e77d      	b.n	800e75c <_vfiprintf_r+0xf4>
 800e860:	ab03      	add	r3, sp, #12
 800e862:	9300      	str	r3, [sp, #0]
 800e864:	4622      	mov	r2, r4
 800e866:	4b0a      	ldr	r3, [pc, #40]	; (800e890 <_vfiprintf_r+0x228>)
 800e868:	a904      	add	r1, sp, #16
 800e86a:	4630      	mov	r0, r6
 800e86c:	f000 f888 	bl	800e980 <_printf_i>
 800e870:	e7ec      	b.n	800e84c <_vfiprintf_r+0x1e4>
 800e872:	bf00      	nop
 800e874:	08011c38 	.word	0x08011c38
 800e878:	08011c78 	.word	0x08011c78
 800e87c:	08011c58 	.word	0x08011c58
 800e880:	08011c18 	.word	0x08011c18
 800e884:	08011c7e 	.word	0x08011c7e
 800e888:	08011c82 	.word	0x08011c82
 800e88c:	00000000 	.word	0x00000000
 800e890:	0800e643 	.word	0x0800e643

0800e894 <_printf_common>:
 800e894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e898:	4691      	mov	r9, r2
 800e89a:	461f      	mov	r7, r3
 800e89c:	688a      	ldr	r2, [r1, #8]
 800e89e:	690b      	ldr	r3, [r1, #16]
 800e8a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e8a4:	4293      	cmp	r3, r2
 800e8a6:	bfb8      	it	lt
 800e8a8:	4613      	movlt	r3, r2
 800e8aa:	f8c9 3000 	str.w	r3, [r9]
 800e8ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e8b2:	4606      	mov	r6, r0
 800e8b4:	460c      	mov	r4, r1
 800e8b6:	b112      	cbz	r2, 800e8be <_printf_common+0x2a>
 800e8b8:	3301      	adds	r3, #1
 800e8ba:	f8c9 3000 	str.w	r3, [r9]
 800e8be:	6823      	ldr	r3, [r4, #0]
 800e8c0:	0699      	lsls	r1, r3, #26
 800e8c2:	bf42      	ittt	mi
 800e8c4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800e8c8:	3302      	addmi	r3, #2
 800e8ca:	f8c9 3000 	strmi.w	r3, [r9]
 800e8ce:	6825      	ldr	r5, [r4, #0]
 800e8d0:	f015 0506 	ands.w	r5, r5, #6
 800e8d4:	d107      	bne.n	800e8e6 <_printf_common+0x52>
 800e8d6:	f104 0a19 	add.w	sl, r4, #25
 800e8da:	68e3      	ldr	r3, [r4, #12]
 800e8dc:	f8d9 2000 	ldr.w	r2, [r9]
 800e8e0:	1a9b      	subs	r3, r3, r2
 800e8e2:	42ab      	cmp	r3, r5
 800e8e4:	dc28      	bgt.n	800e938 <_printf_common+0xa4>
 800e8e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800e8ea:	6822      	ldr	r2, [r4, #0]
 800e8ec:	3300      	adds	r3, #0
 800e8ee:	bf18      	it	ne
 800e8f0:	2301      	movne	r3, #1
 800e8f2:	0692      	lsls	r2, r2, #26
 800e8f4:	d42d      	bmi.n	800e952 <_printf_common+0xbe>
 800e8f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e8fa:	4639      	mov	r1, r7
 800e8fc:	4630      	mov	r0, r6
 800e8fe:	47c0      	blx	r8
 800e900:	3001      	adds	r0, #1
 800e902:	d020      	beq.n	800e946 <_printf_common+0xb2>
 800e904:	6823      	ldr	r3, [r4, #0]
 800e906:	68e5      	ldr	r5, [r4, #12]
 800e908:	f8d9 2000 	ldr.w	r2, [r9]
 800e90c:	f003 0306 	and.w	r3, r3, #6
 800e910:	2b04      	cmp	r3, #4
 800e912:	bf08      	it	eq
 800e914:	1aad      	subeq	r5, r5, r2
 800e916:	68a3      	ldr	r3, [r4, #8]
 800e918:	6922      	ldr	r2, [r4, #16]
 800e91a:	bf0c      	ite	eq
 800e91c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e920:	2500      	movne	r5, #0
 800e922:	4293      	cmp	r3, r2
 800e924:	bfc4      	itt	gt
 800e926:	1a9b      	subgt	r3, r3, r2
 800e928:	18ed      	addgt	r5, r5, r3
 800e92a:	f04f 0900 	mov.w	r9, #0
 800e92e:	341a      	adds	r4, #26
 800e930:	454d      	cmp	r5, r9
 800e932:	d11a      	bne.n	800e96a <_printf_common+0xd6>
 800e934:	2000      	movs	r0, #0
 800e936:	e008      	b.n	800e94a <_printf_common+0xb6>
 800e938:	2301      	movs	r3, #1
 800e93a:	4652      	mov	r2, sl
 800e93c:	4639      	mov	r1, r7
 800e93e:	4630      	mov	r0, r6
 800e940:	47c0      	blx	r8
 800e942:	3001      	adds	r0, #1
 800e944:	d103      	bne.n	800e94e <_printf_common+0xba>
 800e946:	f04f 30ff 	mov.w	r0, #4294967295
 800e94a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e94e:	3501      	adds	r5, #1
 800e950:	e7c3      	b.n	800e8da <_printf_common+0x46>
 800e952:	18e1      	adds	r1, r4, r3
 800e954:	1c5a      	adds	r2, r3, #1
 800e956:	2030      	movs	r0, #48	; 0x30
 800e958:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e95c:	4422      	add	r2, r4
 800e95e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e962:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e966:	3302      	adds	r3, #2
 800e968:	e7c5      	b.n	800e8f6 <_printf_common+0x62>
 800e96a:	2301      	movs	r3, #1
 800e96c:	4622      	mov	r2, r4
 800e96e:	4639      	mov	r1, r7
 800e970:	4630      	mov	r0, r6
 800e972:	47c0      	blx	r8
 800e974:	3001      	adds	r0, #1
 800e976:	d0e6      	beq.n	800e946 <_printf_common+0xb2>
 800e978:	f109 0901 	add.w	r9, r9, #1
 800e97c:	e7d8      	b.n	800e930 <_printf_common+0x9c>
	...

0800e980 <_printf_i>:
 800e980:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e984:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800e988:	460c      	mov	r4, r1
 800e98a:	7e09      	ldrb	r1, [r1, #24]
 800e98c:	b085      	sub	sp, #20
 800e98e:	296e      	cmp	r1, #110	; 0x6e
 800e990:	4617      	mov	r7, r2
 800e992:	4606      	mov	r6, r0
 800e994:	4698      	mov	r8, r3
 800e996:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e998:	f000 80b3 	beq.w	800eb02 <_printf_i+0x182>
 800e99c:	d822      	bhi.n	800e9e4 <_printf_i+0x64>
 800e99e:	2963      	cmp	r1, #99	; 0x63
 800e9a0:	d036      	beq.n	800ea10 <_printf_i+0x90>
 800e9a2:	d80a      	bhi.n	800e9ba <_printf_i+0x3a>
 800e9a4:	2900      	cmp	r1, #0
 800e9a6:	f000 80b9 	beq.w	800eb1c <_printf_i+0x19c>
 800e9aa:	2958      	cmp	r1, #88	; 0x58
 800e9ac:	f000 8083 	beq.w	800eab6 <_printf_i+0x136>
 800e9b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e9b4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800e9b8:	e032      	b.n	800ea20 <_printf_i+0xa0>
 800e9ba:	2964      	cmp	r1, #100	; 0x64
 800e9bc:	d001      	beq.n	800e9c2 <_printf_i+0x42>
 800e9be:	2969      	cmp	r1, #105	; 0x69
 800e9c0:	d1f6      	bne.n	800e9b0 <_printf_i+0x30>
 800e9c2:	6820      	ldr	r0, [r4, #0]
 800e9c4:	6813      	ldr	r3, [r2, #0]
 800e9c6:	0605      	lsls	r5, r0, #24
 800e9c8:	f103 0104 	add.w	r1, r3, #4
 800e9cc:	d52a      	bpl.n	800ea24 <_printf_i+0xa4>
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	6011      	str	r1, [r2, #0]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	da03      	bge.n	800e9de <_printf_i+0x5e>
 800e9d6:	222d      	movs	r2, #45	; 0x2d
 800e9d8:	425b      	negs	r3, r3
 800e9da:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e9de:	486f      	ldr	r0, [pc, #444]	; (800eb9c <_printf_i+0x21c>)
 800e9e0:	220a      	movs	r2, #10
 800e9e2:	e039      	b.n	800ea58 <_printf_i+0xd8>
 800e9e4:	2973      	cmp	r1, #115	; 0x73
 800e9e6:	f000 809d 	beq.w	800eb24 <_printf_i+0x1a4>
 800e9ea:	d808      	bhi.n	800e9fe <_printf_i+0x7e>
 800e9ec:	296f      	cmp	r1, #111	; 0x6f
 800e9ee:	d020      	beq.n	800ea32 <_printf_i+0xb2>
 800e9f0:	2970      	cmp	r1, #112	; 0x70
 800e9f2:	d1dd      	bne.n	800e9b0 <_printf_i+0x30>
 800e9f4:	6823      	ldr	r3, [r4, #0]
 800e9f6:	f043 0320 	orr.w	r3, r3, #32
 800e9fa:	6023      	str	r3, [r4, #0]
 800e9fc:	e003      	b.n	800ea06 <_printf_i+0x86>
 800e9fe:	2975      	cmp	r1, #117	; 0x75
 800ea00:	d017      	beq.n	800ea32 <_printf_i+0xb2>
 800ea02:	2978      	cmp	r1, #120	; 0x78
 800ea04:	d1d4      	bne.n	800e9b0 <_printf_i+0x30>
 800ea06:	2378      	movs	r3, #120	; 0x78
 800ea08:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ea0c:	4864      	ldr	r0, [pc, #400]	; (800eba0 <_printf_i+0x220>)
 800ea0e:	e055      	b.n	800eabc <_printf_i+0x13c>
 800ea10:	6813      	ldr	r3, [r2, #0]
 800ea12:	1d19      	adds	r1, r3, #4
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	6011      	str	r1, [r2, #0]
 800ea18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ea1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ea20:	2301      	movs	r3, #1
 800ea22:	e08c      	b.n	800eb3e <_printf_i+0x1be>
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	6011      	str	r1, [r2, #0]
 800ea28:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ea2c:	bf18      	it	ne
 800ea2e:	b21b      	sxthne	r3, r3
 800ea30:	e7cf      	b.n	800e9d2 <_printf_i+0x52>
 800ea32:	6813      	ldr	r3, [r2, #0]
 800ea34:	6825      	ldr	r5, [r4, #0]
 800ea36:	1d18      	adds	r0, r3, #4
 800ea38:	6010      	str	r0, [r2, #0]
 800ea3a:	0628      	lsls	r0, r5, #24
 800ea3c:	d501      	bpl.n	800ea42 <_printf_i+0xc2>
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	e002      	b.n	800ea48 <_printf_i+0xc8>
 800ea42:	0668      	lsls	r0, r5, #25
 800ea44:	d5fb      	bpl.n	800ea3e <_printf_i+0xbe>
 800ea46:	881b      	ldrh	r3, [r3, #0]
 800ea48:	4854      	ldr	r0, [pc, #336]	; (800eb9c <_printf_i+0x21c>)
 800ea4a:	296f      	cmp	r1, #111	; 0x6f
 800ea4c:	bf14      	ite	ne
 800ea4e:	220a      	movne	r2, #10
 800ea50:	2208      	moveq	r2, #8
 800ea52:	2100      	movs	r1, #0
 800ea54:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ea58:	6865      	ldr	r5, [r4, #4]
 800ea5a:	60a5      	str	r5, [r4, #8]
 800ea5c:	2d00      	cmp	r5, #0
 800ea5e:	f2c0 8095 	blt.w	800eb8c <_printf_i+0x20c>
 800ea62:	6821      	ldr	r1, [r4, #0]
 800ea64:	f021 0104 	bic.w	r1, r1, #4
 800ea68:	6021      	str	r1, [r4, #0]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d13d      	bne.n	800eaea <_printf_i+0x16a>
 800ea6e:	2d00      	cmp	r5, #0
 800ea70:	f040 808e 	bne.w	800eb90 <_printf_i+0x210>
 800ea74:	4665      	mov	r5, ip
 800ea76:	2a08      	cmp	r2, #8
 800ea78:	d10b      	bne.n	800ea92 <_printf_i+0x112>
 800ea7a:	6823      	ldr	r3, [r4, #0]
 800ea7c:	07db      	lsls	r3, r3, #31
 800ea7e:	d508      	bpl.n	800ea92 <_printf_i+0x112>
 800ea80:	6923      	ldr	r3, [r4, #16]
 800ea82:	6862      	ldr	r2, [r4, #4]
 800ea84:	429a      	cmp	r2, r3
 800ea86:	bfde      	ittt	le
 800ea88:	2330      	movle	r3, #48	; 0x30
 800ea8a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ea8e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ea92:	ebac 0305 	sub.w	r3, ip, r5
 800ea96:	6123      	str	r3, [r4, #16]
 800ea98:	f8cd 8000 	str.w	r8, [sp]
 800ea9c:	463b      	mov	r3, r7
 800ea9e:	aa03      	add	r2, sp, #12
 800eaa0:	4621      	mov	r1, r4
 800eaa2:	4630      	mov	r0, r6
 800eaa4:	f7ff fef6 	bl	800e894 <_printf_common>
 800eaa8:	3001      	adds	r0, #1
 800eaaa:	d14d      	bne.n	800eb48 <_printf_i+0x1c8>
 800eaac:	f04f 30ff 	mov.w	r0, #4294967295
 800eab0:	b005      	add	sp, #20
 800eab2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eab6:	4839      	ldr	r0, [pc, #228]	; (800eb9c <_printf_i+0x21c>)
 800eab8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800eabc:	6813      	ldr	r3, [r2, #0]
 800eabe:	6821      	ldr	r1, [r4, #0]
 800eac0:	1d1d      	adds	r5, r3, #4
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	6015      	str	r5, [r2, #0]
 800eac6:	060a      	lsls	r2, r1, #24
 800eac8:	d50b      	bpl.n	800eae2 <_printf_i+0x162>
 800eaca:	07ca      	lsls	r2, r1, #31
 800eacc:	bf44      	itt	mi
 800eace:	f041 0120 	orrmi.w	r1, r1, #32
 800ead2:	6021      	strmi	r1, [r4, #0]
 800ead4:	b91b      	cbnz	r3, 800eade <_printf_i+0x15e>
 800ead6:	6822      	ldr	r2, [r4, #0]
 800ead8:	f022 0220 	bic.w	r2, r2, #32
 800eadc:	6022      	str	r2, [r4, #0]
 800eade:	2210      	movs	r2, #16
 800eae0:	e7b7      	b.n	800ea52 <_printf_i+0xd2>
 800eae2:	064d      	lsls	r5, r1, #25
 800eae4:	bf48      	it	mi
 800eae6:	b29b      	uxthmi	r3, r3
 800eae8:	e7ef      	b.n	800eaca <_printf_i+0x14a>
 800eaea:	4665      	mov	r5, ip
 800eaec:	fbb3 f1f2 	udiv	r1, r3, r2
 800eaf0:	fb02 3311 	mls	r3, r2, r1, r3
 800eaf4:	5cc3      	ldrb	r3, [r0, r3]
 800eaf6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800eafa:	460b      	mov	r3, r1
 800eafc:	2900      	cmp	r1, #0
 800eafe:	d1f5      	bne.n	800eaec <_printf_i+0x16c>
 800eb00:	e7b9      	b.n	800ea76 <_printf_i+0xf6>
 800eb02:	6813      	ldr	r3, [r2, #0]
 800eb04:	6825      	ldr	r5, [r4, #0]
 800eb06:	6961      	ldr	r1, [r4, #20]
 800eb08:	1d18      	adds	r0, r3, #4
 800eb0a:	6010      	str	r0, [r2, #0]
 800eb0c:	0628      	lsls	r0, r5, #24
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	d501      	bpl.n	800eb16 <_printf_i+0x196>
 800eb12:	6019      	str	r1, [r3, #0]
 800eb14:	e002      	b.n	800eb1c <_printf_i+0x19c>
 800eb16:	066a      	lsls	r2, r5, #25
 800eb18:	d5fb      	bpl.n	800eb12 <_printf_i+0x192>
 800eb1a:	8019      	strh	r1, [r3, #0]
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	6123      	str	r3, [r4, #16]
 800eb20:	4665      	mov	r5, ip
 800eb22:	e7b9      	b.n	800ea98 <_printf_i+0x118>
 800eb24:	6813      	ldr	r3, [r2, #0]
 800eb26:	1d19      	adds	r1, r3, #4
 800eb28:	6011      	str	r1, [r2, #0]
 800eb2a:	681d      	ldr	r5, [r3, #0]
 800eb2c:	6862      	ldr	r2, [r4, #4]
 800eb2e:	2100      	movs	r1, #0
 800eb30:	4628      	mov	r0, r5
 800eb32:	f7f1 fb4d 	bl	80001d0 <memchr>
 800eb36:	b108      	cbz	r0, 800eb3c <_printf_i+0x1bc>
 800eb38:	1b40      	subs	r0, r0, r5
 800eb3a:	6060      	str	r0, [r4, #4]
 800eb3c:	6863      	ldr	r3, [r4, #4]
 800eb3e:	6123      	str	r3, [r4, #16]
 800eb40:	2300      	movs	r3, #0
 800eb42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb46:	e7a7      	b.n	800ea98 <_printf_i+0x118>
 800eb48:	6923      	ldr	r3, [r4, #16]
 800eb4a:	462a      	mov	r2, r5
 800eb4c:	4639      	mov	r1, r7
 800eb4e:	4630      	mov	r0, r6
 800eb50:	47c0      	blx	r8
 800eb52:	3001      	adds	r0, #1
 800eb54:	d0aa      	beq.n	800eaac <_printf_i+0x12c>
 800eb56:	6823      	ldr	r3, [r4, #0]
 800eb58:	079b      	lsls	r3, r3, #30
 800eb5a:	d413      	bmi.n	800eb84 <_printf_i+0x204>
 800eb5c:	68e0      	ldr	r0, [r4, #12]
 800eb5e:	9b03      	ldr	r3, [sp, #12]
 800eb60:	4298      	cmp	r0, r3
 800eb62:	bfb8      	it	lt
 800eb64:	4618      	movlt	r0, r3
 800eb66:	e7a3      	b.n	800eab0 <_printf_i+0x130>
 800eb68:	2301      	movs	r3, #1
 800eb6a:	464a      	mov	r2, r9
 800eb6c:	4639      	mov	r1, r7
 800eb6e:	4630      	mov	r0, r6
 800eb70:	47c0      	blx	r8
 800eb72:	3001      	adds	r0, #1
 800eb74:	d09a      	beq.n	800eaac <_printf_i+0x12c>
 800eb76:	3501      	adds	r5, #1
 800eb78:	68e3      	ldr	r3, [r4, #12]
 800eb7a:	9a03      	ldr	r2, [sp, #12]
 800eb7c:	1a9b      	subs	r3, r3, r2
 800eb7e:	42ab      	cmp	r3, r5
 800eb80:	dcf2      	bgt.n	800eb68 <_printf_i+0x1e8>
 800eb82:	e7eb      	b.n	800eb5c <_printf_i+0x1dc>
 800eb84:	2500      	movs	r5, #0
 800eb86:	f104 0919 	add.w	r9, r4, #25
 800eb8a:	e7f5      	b.n	800eb78 <_printf_i+0x1f8>
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d1ac      	bne.n	800eaea <_printf_i+0x16a>
 800eb90:	7803      	ldrb	r3, [r0, #0]
 800eb92:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800eb96:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eb9a:	e76c      	b.n	800ea76 <_printf_i+0xf6>
 800eb9c:	08011c89 	.word	0x08011c89
 800eba0:	08011c9a 	.word	0x08011c9a

0800eba4 <_sbrk_r>:
 800eba4:	b538      	push	{r3, r4, r5, lr}
 800eba6:	4c06      	ldr	r4, [pc, #24]	; (800ebc0 <_sbrk_r+0x1c>)
 800eba8:	2300      	movs	r3, #0
 800ebaa:	4605      	mov	r5, r0
 800ebac:	4608      	mov	r0, r1
 800ebae:	6023      	str	r3, [r4, #0]
 800ebb0:	f7f1 fe6c 	bl	800088c <_sbrk>
 800ebb4:	1c43      	adds	r3, r0, #1
 800ebb6:	d102      	bne.n	800ebbe <_sbrk_r+0x1a>
 800ebb8:	6823      	ldr	r3, [r4, #0]
 800ebba:	b103      	cbz	r3, 800ebbe <_sbrk_r+0x1a>
 800ebbc:	602b      	str	r3, [r5, #0]
 800ebbe:	bd38      	pop	{r3, r4, r5, pc}
 800ebc0:	200068a8 	.word	0x200068a8

0800ebc4 <__sread>:
 800ebc4:	b510      	push	{r4, lr}
 800ebc6:	460c      	mov	r4, r1
 800ebc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebcc:	f000 fa48 	bl	800f060 <_read_r>
 800ebd0:	2800      	cmp	r0, #0
 800ebd2:	bfab      	itete	ge
 800ebd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ebd6:	89a3      	ldrhlt	r3, [r4, #12]
 800ebd8:	181b      	addge	r3, r3, r0
 800ebda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ebde:	bfac      	ite	ge
 800ebe0:	6563      	strge	r3, [r4, #84]	; 0x54
 800ebe2:	81a3      	strhlt	r3, [r4, #12]
 800ebe4:	bd10      	pop	{r4, pc}

0800ebe6 <__swrite>:
 800ebe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebea:	461f      	mov	r7, r3
 800ebec:	898b      	ldrh	r3, [r1, #12]
 800ebee:	05db      	lsls	r3, r3, #23
 800ebf0:	4605      	mov	r5, r0
 800ebf2:	460c      	mov	r4, r1
 800ebf4:	4616      	mov	r6, r2
 800ebf6:	d505      	bpl.n	800ec04 <__swrite+0x1e>
 800ebf8:	2302      	movs	r3, #2
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec00:	f000 f9b6 	bl	800ef70 <_lseek_r>
 800ec04:	89a3      	ldrh	r3, [r4, #12]
 800ec06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ec0e:	81a3      	strh	r3, [r4, #12]
 800ec10:	4632      	mov	r2, r6
 800ec12:	463b      	mov	r3, r7
 800ec14:	4628      	mov	r0, r5
 800ec16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec1a:	f000 b869 	b.w	800ecf0 <_write_r>

0800ec1e <__sseek>:
 800ec1e:	b510      	push	{r4, lr}
 800ec20:	460c      	mov	r4, r1
 800ec22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec26:	f000 f9a3 	bl	800ef70 <_lseek_r>
 800ec2a:	1c43      	adds	r3, r0, #1
 800ec2c:	89a3      	ldrh	r3, [r4, #12]
 800ec2e:	bf15      	itete	ne
 800ec30:	6560      	strne	r0, [r4, #84]	; 0x54
 800ec32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ec36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ec3a:	81a3      	strheq	r3, [r4, #12]
 800ec3c:	bf18      	it	ne
 800ec3e:	81a3      	strhne	r3, [r4, #12]
 800ec40:	bd10      	pop	{r4, pc}

0800ec42 <__sclose>:
 800ec42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec46:	f000 b8d3 	b.w	800edf0 <_close_r>
	...

0800ec4c <__swbuf_r>:
 800ec4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec4e:	460e      	mov	r6, r1
 800ec50:	4614      	mov	r4, r2
 800ec52:	4605      	mov	r5, r0
 800ec54:	b118      	cbz	r0, 800ec5e <__swbuf_r+0x12>
 800ec56:	6983      	ldr	r3, [r0, #24]
 800ec58:	b90b      	cbnz	r3, 800ec5e <__swbuf_r+0x12>
 800ec5a:	f7ff fba1 	bl	800e3a0 <__sinit>
 800ec5e:	4b21      	ldr	r3, [pc, #132]	; (800ece4 <__swbuf_r+0x98>)
 800ec60:	429c      	cmp	r4, r3
 800ec62:	d12a      	bne.n	800ecba <__swbuf_r+0x6e>
 800ec64:	686c      	ldr	r4, [r5, #4]
 800ec66:	69a3      	ldr	r3, [r4, #24]
 800ec68:	60a3      	str	r3, [r4, #8]
 800ec6a:	89a3      	ldrh	r3, [r4, #12]
 800ec6c:	071a      	lsls	r2, r3, #28
 800ec6e:	d52e      	bpl.n	800ecce <__swbuf_r+0x82>
 800ec70:	6923      	ldr	r3, [r4, #16]
 800ec72:	b363      	cbz	r3, 800ecce <__swbuf_r+0x82>
 800ec74:	6923      	ldr	r3, [r4, #16]
 800ec76:	6820      	ldr	r0, [r4, #0]
 800ec78:	1ac0      	subs	r0, r0, r3
 800ec7a:	6963      	ldr	r3, [r4, #20]
 800ec7c:	b2f6      	uxtb	r6, r6
 800ec7e:	4283      	cmp	r3, r0
 800ec80:	4637      	mov	r7, r6
 800ec82:	dc04      	bgt.n	800ec8e <__swbuf_r+0x42>
 800ec84:	4621      	mov	r1, r4
 800ec86:	4628      	mov	r0, r5
 800ec88:	f000 f948 	bl	800ef1c <_fflush_r>
 800ec8c:	bb28      	cbnz	r0, 800ecda <__swbuf_r+0x8e>
 800ec8e:	68a3      	ldr	r3, [r4, #8]
 800ec90:	3b01      	subs	r3, #1
 800ec92:	60a3      	str	r3, [r4, #8]
 800ec94:	6823      	ldr	r3, [r4, #0]
 800ec96:	1c5a      	adds	r2, r3, #1
 800ec98:	6022      	str	r2, [r4, #0]
 800ec9a:	701e      	strb	r6, [r3, #0]
 800ec9c:	6963      	ldr	r3, [r4, #20]
 800ec9e:	3001      	adds	r0, #1
 800eca0:	4283      	cmp	r3, r0
 800eca2:	d004      	beq.n	800ecae <__swbuf_r+0x62>
 800eca4:	89a3      	ldrh	r3, [r4, #12]
 800eca6:	07db      	lsls	r3, r3, #31
 800eca8:	d519      	bpl.n	800ecde <__swbuf_r+0x92>
 800ecaa:	2e0a      	cmp	r6, #10
 800ecac:	d117      	bne.n	800ecde <__swbuf_r+0x92>
 800ecae:	4621      	mov	r1, r4
 800ecb0:	4628      	mov	r0, r5
 800ecb2:	f000 f933 	bl	800ef1c <_fflush_r>
 800ecb6:	b190      	cbz	r0, 800ecde <__swbuf_r+0x92>
 800ecb8:	e00f      	b.n	800ecda <__swbuf_r+0x8e>
 800ecba:	4b0b      	ldr	r3, [pc, #44]	; (800ece8 <__swbuf_r+0x9c>)
 800ecbc:	429c      	cmp	r4, r3
 800ecbe:	d101      	bne.n	800ecc4 <__swbuf_r+0x78>
 800ecc0:	68ac      	ldr	r4, [r5, #8]
 800ecc2:	e7d0      	b.n	800ec66 <__swbuf_r+0x1a>
 800ecc4:	4b09      	ldr	r3, [pc, #36]	; (800ecec <__swbuf_r+0xa0>)
 800ecc6:	429c      	cmp	r4, r3
 800ecc8:	bf08      	it	eq
 800ecca:	68ec      	ldreq	r4, [r5, #12]
 800eccc:	e7cb      	b.n	800ec66 <__swbuf_r+0x1a>
 800ecce:	4621      	mov	r1, r4
 800ecd0:	4628      	mov	r0, r5
 800ecd2:	f000 f81f 	bl	800ed14 <__swsetup_r>
 800ecd6:	2800      	cmp	r0, #0
 800ecd8:	d0cc      	beq.n	800ec74 <__swbuf_r+0x28>
 800ecda:	f04f 37ff 	mov.w	r7, #4294967295
 800ecde:	4638      	mov	r0, r7
 800ece0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ece2:	bf00      	nop
 800ece4:	08011c38 	.word	0x08011c38
 800ece8:	08011c58 	.word	0x08011c58
 800ecec:	08011c18 	.word	0x08011c18

0800ecf0 <_write_r>:
 800ecf0:	b538      	push	{r3, r4, r5, lr}
 800ecf2:	4c07      	ldr	r4, [pc, #28]	; (800ed10 <_write_r+0x20>)
 800ecf4:	4605      	mov	r5, r0
 800ecf6:	4608      	mov	r0, r1
 800ecf8:	4611      	mov	r1, r2
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	6022      	str	r2, [r4, #0]
 800ecfe:	461a      	mov	r2, r3
 800ed00:	f7f1 fd73 	bl	80007ea <_write>
 800ed04:	1c43      	adds	r3, r0, #1
 800ed06:	d102      	bne.n	800ed0e <_write_r+0x1e>
 800ed08:	6823      	ldr	r3, [r4, #0]
 800ed0a:	b103      	cbz	r3, 800ed0e <_write_r+0x1e>
 800ed0c:	602b      	str	r3, [r5, #0]
 800ed0e:	bd38      	pop	{r3, r4, r5, pc}
 800ed10:	200068a8 	.word	0x200068a8

0800ed14 <__swsetup_r>:
 800ed14:	4b32      	ldr	r3, [pc, #200]	; (800ede0 <__swsetup_r+0xcc>)
 800ed16:	b570      	push	{r4, r5, r6, lr}
 800ed18:	681d      	ldr	r5, [r3, #0]
 800ed1a:	4606      	mov	r6, r0
 800ed1c:	460c      	mov	r4, r1
 800ed1e:	b125      	cbz	r5, 800ed2a <__swsetup_r+0x16>
 800ed20:	69ab      	ldr	r3, [r5, #24]
 800ed22:	b913      	cbnz	r3, 800ed2a <__swsetup_r+0x16>
 800ed24:	4628      	mov	r0, r5
 800ed26:	f7ff fb3b 	bl	800e3a0 <__sinit>
 800ed2a:	4b2e      	ldr	r3, [pc, #184]	; (800ede4 <__swsetup_r+0xd0>)
 800ed2c:	429c      	cmp	r4, r3
 800ed2e:	d10f      	bne.n	800ed50 <__swsetup_r+0x3c>
 800ed30:	686c      	ldr	r4, [r5, #4]
 800ed32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed36:	b29a      	uxth	r2, r3
 800ed38:	0715      	lsls	r5, r2, #28
 800ed3a:	d42c      	bmi.n	800ed96 <__swsetup_r+0x82>
 800ed3c:	06d0      	lsls	r0, r2, #27
 800ed3e:	d411      	bmi.n	800ed64 <__swsetup_r+0x50>
 800ed40:	2209      	movs	r2, #9
 800ed42:	6032      	str	r2, [r6, #0]
 800ed44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed48:	81a3      	strh	r3, [r4, #12]
 800ed4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ed4e:	e03e      	b.n	800edce <__swsetup_r+0xba>
 800ed50:	4b25      	ldr	r3, [pc, #148]	; (800ede8 <__swsetup_r+0xd4>)
 800ed52:	429c      	cmp	r4, r3
 800ed54:	d101      	bne.n	800ed5a <__swsetup_r+0x46>
 800ed56:	68ac      	ldr	r4, [r5, #8]
 800ed58:	e7eb      	b.n	800ed32 <__swsetup_r+0x1e>
 800ed5a:	4b24      	ldr	r3, [pc, #144]	; (800edec <__swsetup_r+0xd8>)
 800ed5c:	429c      	cmp	r4, r3
 800ed5e:	bf08      	it	eq
 800ed60:	68ec      	ldreq	r4, [r5, #12]
 800ed62:	e7e6      	b.n	800ed32 <__swsetup_r+0x1e>
 800ed64:	0751      	lsls	r1, r2, #29
 800ed66:	d512      	bpl.n	800ed8e <__swsetup_r+0x7a>
 800ed68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ed6a:	b141      	cbz	r1, 800ed7e <__swsetup_r+0x6a>
 800ed6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ed70:	4299      	cmp	r1, r3
 800ed72:	d002      	beq.n	800ed7a <__swsetup_r+0x66>
 800ed74:	4630      	mov	r0, r6
 800ed76:	f7ff fba5 	bl	800e4c4 <_free_r>
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	6363      	str	r3, [r4, #52]	; 0x34
 800ed7e:	89a3      	ldrh	r3, [r4, #12]
 800ed80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ed84:	81a3      	strh	r3, [r4, #12]
 800ed86:	2300      	movs	r3, #0
 800ed88:	6063      	str	r3, [r4, #4]
 800ed8a:	6923      	ldr	r3, [r4, #16]
 800ed8c:	6023      	str	r3, [r4, #0]
 800ed8e:	89a3      	ldrh	r3, [r4, #12]
 800ed90:	f043 0308 	orr.w	r3, r3, #8
 800ed94:	81a3      	strh	r3, [r4, #12]
 800ed96:	6923      	ldr	r3, [r4, #16]
 800ed98:	b94b      	cbnz	r3, 800edae <__swsetup_r+0x9a>
 800ed9a:	89a3      	ldrh	r3, [r4, #12]
 800ed9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800eda0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eda4:	d003      	beq.n	800edae <__swsetup_r+0x9a>
 800eda6:	4621      	mov	r1, r4
 800eda8:	4630      	mov	r0, r6
 800edaa:	f000 f917 	bl	800efdc <__smakebuf_r>
 800edae:	89a2      	ldrh	r2, [r4, #12]
 800edb0:	f012 0301 	ands.w	r3, r2, #1
 800edb4:	d00c      	beq.n	800edd0 <__swsetup_r+0xbc>
 800edb6:	2300      	movs	r3, #0
 800edb8:	60a3      	str	r3, [r4, #8]
 800edba:	6963      	ldr	r3, [r4, #20]
 800edbc:	425b      	negs	r3, r3
 800edbe:	61a3      	str	r3, [r4, #24]
 800edc0:	6923      	ldr	r3, [r4, #16]
 800edc2:	b953      	cbnz	r3, 800edda <__swsetup_r+0xc6>
 800edc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800edc8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800edcc:	d1ba      	bne.n	800ed44 <__swsetup_r+0x30>
 800edce:	bd70      	pop	{r4, r5, r6, pc}
 800edd0:	0792      	lsls	r2, r2, #30
 800edd2:	bf58      	it	pl
 800edd4:	6963      	ldrpl	r3, [r4, #20]
 800edd6:	60a3      	str	r3, [r4, #8]
 800edd8:	e7f2      	b.n	800edc0 <__swsetup_r+0xac>
 800edda:	2000      	movs	r0, #0
 800eddc:	e7f7      	b.n	800edce <__swsetup_r+0xba>
 800edde:	bf00      	nop
 800ede0:	20000014 	.word	0x20000014
 800ede4:	08011c38 	.word	0x08011c38
 800ede8:	08011c58 	.word	0x08011c58
 800edec:	08011c18 	.word	0x08011c18

0800edf0 <_close_r>:
 800edf0:	b538      	push	{r3, r4, r5, lr}
 800edf2:	4c06      	ldr	r4, [pc, #24]	; (800ee0c <_close_r+0x1c>)
 800edf4:	2300      	movs	r3, #0
 800edf6:	4605      	mov	r5, r0
 800edf8:	4608      	mov	r0, r1
 800edfa:	6023      	str	r3, [r4, #0]
 800edfc:	f7f1 fd11 	bl	8000822 <_close>
 800ee00:	1c43      	adds	r3, r0, #1
 800ee02:	d102      	bne.n	800ee0a <_close_r+0x1a>
 800ee04:	6823      	ldr	r3, [r4, #0]
 800ee06:	b103      	cbz	r3, 800ee0a <_close_r+0x1a>
 800ee08:	602b      	str	r3, [r5, #0]
 800ee0a:	bd38      	pop	{r3, r4, r5, pc}
 800ee0c:	200068a8 	.word	0x200068a8

0800ee10 <__sflush_r>:
 800ee10:	898a      	ldrh	r2, [r1, #12]
 800ee12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee16:	4605      	mov	r5, r0
 800ee18:	0710      	lsls	r0, r2, #28
 800ee1a:	460c      	mov	r4, r1
 800ee1c:	d458      	bmi.n	800eed0 <__sflush_r+0xc0>
 800ee1e:	684b      	ldr	r3, [r1, #4]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	dc05      	bgt.n	800ee30 <__sflush_r+0x20>
 800ee24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	dc02      	bgt.n	800ee30 <__sflush_r+0x20>
 800ee2a:	2000      	movs	r0, #0
 800ee2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ee32:	2e00      	cmp	r6, #0
 800ee34:	d0f9      	beq.n	800ee2a <__sflush_r+0x1a>
 800ee36:	2300      	movs	r3, #0
 800ee38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ee3c:	682f      	ldr	r7, [r5, #0]
 800ee3e:	6a21      	ldr	r1, [r4, #32]
 800ee40:	602b      	str	r3, [r5, #0]
 800ee42:	d032      	beq.n	800eeaa <__sflush_r+0x9a>
 800ee44:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ee46:	89a3      	ldrh	r3, [r4, #12]
 800ee48:	075a      	lsls	r2, r3, #29
 800ee4a:	d505      	bpl.n	800ee58 <__sflush_r+0x48>
 800ee4c:	6863      	ldr	r3, [r4, #4]
 800ee4e:	1ac0      	subs	r0, r0, r3
 800ee50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ee52:	b10b      	cbz	r3, 800ee58 <__sflush_r+0x48>
 800ee54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ee56:	1ac0      	subs	r0, r0, r3
 800ee58:	2300      	movs	r3, #0
 800ee5a:	4602      	mov	r2, r0
 800ee5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ee5e:	6a21      	ldr	r1, [r4, #32]
 800ee60:	4628      	mov	r0, r5
 800ee62:	47b0      	blx	r6
 800ee64:	1c43      	adds	r3, r0, #1
 800ee66:	89a3      	ldrh	r3, [r4, #12]
 800ee68:	d106      	bne.n	800ee78 <__sflush_r+0x68>
 800ee6a:	6829      	ldr	r1, [r5, #0]
 800ee6c:	291d      	cmp	r1, #29
 800ee6e:	d848      	bhi.n	800ef02 <__sflush_r+0xf2>
 800ee70:	4a29      	ldr	r2, [pc, #164]	; (800ef18 <__sflush_r+0x108>)
 800ee72:	40ca      	lsrs	r2, r1
 800ee74:	07d6      	lsls	r6, r2, #31
 800ee76:	d544      	bpl.n	800ef02 <__sflush_r+0xf2>
 800ee78:	2200      	movs	r2, #0
 800ee7a:	6062      	str	r2, [r4, #4]
 800ee7c:	04d9      	lsls	r1, r3, #19
 800ee7e:	6922      	ldr	r2, [r4, #16]
 800ee80:	6022      	str	r2, [r4, #0]
 800ee82:	d504      	bpl.n	800ee8e <__sflush_r+0x7e>
 800ee84:	1c42      	adds	r2, r0, #1
 800ee86:	d101      	bne.n	800ee8c <__sflush_r+0x7c>
 800ee88:	682b      	ldr	r3, [r5, #0]
 800ee8a:	b903      	cbnz	r3, 800ee8e <__sflush_r+0x7e>
 800ee8c:	6560      	str	r0, [r4, #84]	; 0x54
 800ee8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ee90:	602f      	str	r7, [r5, #0]
 800ee92:	2900      	cmp	r1, #0
 800ee94:	d0c9      	beq.n	800ee2a <__sflush_r+0x1a>
 800ee96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ee9a:	4299      	cmp	r1, r3
 800ee9c:	d002      	beq.n	800eea4 <__sflush_r+0x94>
 800ee9e:	4628      	mov	r0, r5
 800eea0:	f7ff fb10 	bl	800e4c4 <_free_r>
 800eea4:	2000      	movs	r0, #0
 800eea6:	6360      	str	r0, [r4, #52]	; 0x34
 800eea8:	e7c0      	b.n	800ee2c <__sflush_r+0x1c>
 800eeaa:	2301      	movs	r3, #1
 800eeac:	4628      	mov	r0, r5
 800eeae:	47b0      	blx	r6
 800eeb0:	1c41      	adds	r1, r0, #1
 800eeb2:	d1c8      	bne.n	800ee46 <__sflush_r+0x36>
 800eeb4:	682b      	ldr	r3, [r5, #0]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d0c5      	beq.n	800ee46 <__sflush_r+0x36>
 800eeba:	2b1d      	cmp	r3, #29
 800eebc:	d001      	beq.n	800eec2 <__sflush_r+0xb2>
 800eebe:	2b16      	cmp	r3, #22
 800eec0:	d101      	bne.n	800eec6 <__sflush_r+0xb6>
 800eec2:	602f      	str	r7, [r5, #0]
 800eec4:	e7b1      	b.n	800ee2a <__sflush_r+0x1a>
 800eec6:	89a3      	ldrh	r3, [r4, #12]
 800eec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eecc:	81a3      	strh	r3, [r4, #12]
 800eece:	e7ad      	b.n	800ee2c <__sflush_r+0x1c>
 800eed0:	690f      	ldr	r7, [r1, #16]
 800eed2:	2f00      	cmp	r7, #0
 800eed4:	d0a9      	beq.n	800ee2a <__sflush_r+0x1a>
 800eed6:	0793      	lsls	r3, r2, #30
 800eed8:	680e      	ldr	r6, [r1, #0]
 800eeda:	bf08      	it	eq
 800eedc:	694b      	ldreq	r3, [r1, #20]
 800eede:	600f      	str	r7, [r1, #0]
 800eee0:	bf18      	it	ne
 800eee2:	2300      	movne	r3, #0
 800eee4:	eba6 0807 	sub.w	r8, r6, r7
 800eee8:	608b      	str	r3, [r1, #8]
 800eeea:	f1b8 0f00 	cmp.w	r8, #0
 800eeee:	dd9c      	ble.n	800ee2a <__sflush_r+0x1a>
 800eef0:	4643      	mov	r3, r8
 800eef2:	463a      	mov	r2, r7
 800eef4:	6a21      	ldr	r1, [r4, #32]
 800eef6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800eef8:	4628      	mov	r0, r5
 800eefa:	47b0      	blx	r6
 800eefc:	2800      	cmp	r0, #0
 800eefe:	dc06      	bgt.n	800ef0e <__sflush_r+0xfe>
 800ef00:	89a3      	ldrh	r3, [r4, #12]
 800ef02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef06:	81a3      	strh	r3, [r4, #12]
 800ef08:	f04f 30ff 	mov.w	r0, #4294967295
 800ef0c:	e78e      	b.n	800ee2c <__sflush_r+0x1c>
 800ef0e:	4407      	add	r7, r0
 800ef10:	eba8 0800 	sub.w	r8, r8, r0
 800ef14:	e7e9      	b.n	800eeea <__sflush_r+0xda>
 800ef16:	bf00      	nop
 800ef18:	20400001 	.word	0x20400001

0800ef1c <_fflush_r>:
 800ef1c:	b538      	push	{r3, r4, r5, lr}
 800ef1e:	690b      	ldr	r3, [r1, #16]
 800ef20:	4605      	mov	r5, r0
 800ef22:	460c      	mov	r4, r1
 800ef24:	b1db      	cbz	r3, 800ef5e <_fflush_r+0x42>
 800ef26:	b118      	cbz	r0, 800ef30 <_fflush_r+0x14>
 800ef28:	6983      	ldr	r3, [r0, #24]
 800ef2a:	b90b      	cbnz	r3, 800ef30 <_fflush_r+0x14>
 800ef2c:	f7ff fa38 	bl	800e3a0 <__sinit>
 800ef30:	4b0c      	ldr	r3, [pc, #48]	; (800ef64 <_fflush_r+0x48>)
 800ef32:	429c      	cmp	r4, r3
 800ef34:	d109      	bne.n	800ef4a <_fflush_r+0x2e>
 800ef36:	686c      	ldr	r4, [r5, #4]
 800ef38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef3c:	b17b      	cbz	r3, 800ef5e <_fflush_r+0x42>
 800ef3e:	4621      	mov	r1, r4
 800ef40:	4628      	mov	r0, r5
 800ef42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef46:	f7ff bf63 	b.w	800ee10 <__sflush_r>
 800ef4a:	4b07      	ldr	r3, [pc, #28]	; (800ef68 <_fflush_r+0x4c>)
 800ef4c:	429c      	cmp	r4, r3
 800ef4e:	d101      	bne.n	800ef54 <_fflush_r+0x38>
 800ef50:	68ac      	ldr	r4, [r5, #8]
 800ef52:	e7f1      	b.n	800ef38 <_fflush_r+0x1c>
 800ef54:	4b05      	ldr	r3, [pc, #20]	; (800ef6c <_fflush_r+0x50>)
 800ef56:	429c      	cmp	r4, r3
 800ef58:	bf08      	it	eq
 800ef5a:	68ec      	ldreq	r4, [r5, #12]
 800ef5c:	e7ec      	b.n	800ef38 <_fflush_r+0x1c>
 800ef5e:	2000      	movs	r0, #0
 800ef60:	bd38      	pop	{r3, r4, r5, pc}
 800ef62:	bf00      	nop
 800ef64:	08011c38 	.word	0x08011c38
 800ef68:	08011c58 	.word	0x08011c58
 800ef6c:	08011c18 	.word	0x08011c18

0800ef70 <_lseek_r>:
 800ef70:	b538      	push	{r3, r4, r5, lr}
 800ef72:	4c07      	ldr	r4, [pc, #28]	; (800ef90 <_lseek_r+0x20>)
 800ef74:	4605      	mov	r5, r0
 800ef76:	4608      	mov	r0, r1
 800ef78:	4611      	mov	r1, r2
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	6022      	str	r2, [r4, #0]
 800ef7e:	461a      	mov	r2, r3
 800ef80:	f7f1 fc76 	bl	8000870 <_lseek>
 800ef84:	1c43      	adds	r3, r0, #1
 800ef86:	d102      	bne.n	800ef8e <_lseek_r+0x1e>
 800ef88:	6823      	ldr	r3, [r4, #0]
 800ef8a:	b103      	cbz	r3, 800ef8e <_lseek_r+0x1e>
 800ef8c:	602b      	str	r3, [r5, #0]
 800ef8e:	bd38      	pop	{r3, r4, r5, pc}
 800ef90:	200068a8 	.word	0x200068a8

0800ef94 <__swhatbuf_r>:
 800ef94:	b570      	push	{r4, r5, r6, lr}
 800ef96:	460e      	mov	r6, r1
 800ef98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef9c:	2900      	cmp	r1, #0
 800ef9e:	b096      	sub	sp, #88	; 0x58
 800efa0:	4614      	mov	r4, r2
 800efa2:	461d      	mov	r5, r3
 800efa4:	da07      	bge.n	800efb6 <__swhatbuf_r+0x22>
 800efa6:	2300      	movs	r3, #0
 800efa8:	602b      	str	r3, [r5, #0]
 800efaa:	89b3      	ldrh	r3, [r6, #12]
 800efac:	061a      	lsls	r2, r3, #24
 800efae:	d410      	bmi.n	800efd2 <__swhatbuf_r+0x3e>
 800efb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800efb4:	e00e      	b.n	800efd4 <__swhatbuf_r+0x40>
 800efb6:	466a      	mov	r2, sp
 800efb8:	f000 f864 	bl	800f084 <_fstat_r>
 800efbc:	2800      	cmp	r0, #0
 800efbe:	dbf2      	blt.n	800efa6 <__swhatbuf_r+0x12>
 800efc0:	9a01      	ldr	r2, [sp, #4]
 800efc2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800efc6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800efca:	425a      	negs	r2, r3
 800efcc:	415a      	adcs	r2, r3
 800efce:	602a      	str	r2, [r5, #0]
 800efd0:	e7ee      	b.n	800efb0 <__swhatbuf_r+0x1c>
 800efd2:	2340      	movs	r3, #64	; 0x40
 800efd4:	2000      	movs	r0, #0
 800efd6:	6023      	str	r3, [r4, #0]
 800efd8:	b016      	add	sp, #88	; 0x58
 800efda:	bd70      	pop	{r4, r5, r6, pc}

0800efdc <__smakebuf_r>:
 800efdc:	898b      	ldrh	r3, [r1, #12]
 800efde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800efe0:	079d      	lsls	r5, r3, #30
 800efe2:	4606      	mov	r6, r0
 800efe4:	460c      	mov	r4, r1
 800efe6:	d507      	bpl.n	800eff8 <__smakebuf_r+0x1c>
 800efe8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800efec:	6023      	str	r3, [r4, #0]
 800efee:	6123      	str	r3, [r4, #16]
 800eff0:	2301      	movs	r3, #1
 800eff2:	6163      	str	r3, [r4, #20]
 800eff4:	b002      	add	sp, #8
 800eff6:	bd70      	pop	{r4, r5, r6, pc}
 800eff8:	ab01      	add	r3, sp, #4
 800effa:	466a      	mov	r2, sp
 800effc:	f7ff ffca 	bl	800ef94 <__swhatbuf_r>
 800f000:	9900      	ldr	r1, [sp, #0]
 800f002:	4605      	mov	r5, r0
 800f004:	4630      	mov	r0, r6
 800f006:	f7ff faab 	bl	800e560 <_malloc_r>
 800f00a:	b948      	cbnz	r0, 800f020 <__smakebuf_r+0x44>
 800f00c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f010:	059a      	lsls	r2, r3, #22
 800f012:	d4ef      	bmi.n	800eff4 <__smakebuf_r+0x18>
 800f014:	f023 0303 	bic.w	r3, r3, #3
 800f018:	f043 0302 	orr.w	r3, r3, #2
 800f01c:	81a3      	strh	r3, [r4, #12]
 800f01e:	e7e3      	b.n	800efe8 <__smakebuf_r+0xc>
 800f020:	4b0d      	ldr	r3, [pc, #52]	; (800f058 <__smakebuf_r+0x7c>)
 800f022:	62b3      	str	r3, [r6, #40]	; 0x28
 800f024:	89a3      	ldrh	r3, [r4, #12]
 800f026:	6020      	str	r0, [r4, #0]
 800f028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f02c:	81a3      	strh	r3, [r4, #12]
 800f02e:	9b00      	ldr	r3, [sp, #0]
 800f030:	6163      	str	r3, [r4, #20]
 800f032:	9b01      	ldr	r3, [sp, #4]
 800f034:	6120      	str	r0, [r4, #16]
 800f036:	b15b      	cbz	r3, 800f050 <__smakebuf_r+0x74>
 800f038:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f03c:	4630      	mov	r0, r6
 800f03e:	f000 f833 	bl	800f0a8 <_isatty_r>
 800f042:	b128      	cbz	r0, 800f050 <__smakebuf_r+0x74>
 800f044:	89a3      	ldrh	r3, [r4, #12]
 800f046:	f023 0303 	bic.w	r3, r3, #3
 800f04a:	f043 0301 	orr.w	r3, r3, #1
 800f04e:	81a3      	strh	r3, [r4, #12]
 800f050:	89a3      	ldrh	r3, [r4, #12]
 800f052:	431d      	orrs	r5, r3
 800f054:	81a5      	strh	r5, [r4, #12]
 800f056:	e7cd      	b.n	800eff4 <__smakebuf_r+0x18>
 800f058:	0800e369 	.word	0x0800e369

0800f05c <__malloc_lock>:
 800f05c:	4770      	bx	lr

0800f05e <__malloc_unlock>:
 800f05e:	4770      	bx	lr

0800f060 <_read_r>:
 800f060:	b538      	push	{r3, r4, r5, lr}
 800f062:	4c07      	ldr	r4, [pc, #28]	; (800f080 <_read_r+0x20>)
 800f064:	4605      	mov	r5, r0
 800f066:	4608      	mov	r0, r1
 800f068:	4611      	mov	r1, r2
 800f06a:	2200      	movs	r2, #0
 800f06c:	6022      	str	r2, [r4, #0]
 800f06e:	461a      	mov	r2, r3
 800f070:	f7f1 fb9e 	bl	80007b0 <_read>
 800f074:	1c43      	adds	r3, r0, #1
 800f076:	d102      	bne.n	800f07e <_read_r+0x1e>
 800f078:	6823      	ldr	r3, [r4, #0]
 800f07a:	b103      	cbz	r3, 800f07e <_read_r+0x1e>
 800f07c:	602b      	str	r3, [r5, #0]
 800f07e:	bd38      	pop	{r3, r4, r5, pc}
 800f080:	200068a8 	.word	0x200068a8

0800f084 <_fstat_r>:
 800f084:	b538      	push	{r3, r4, r5, lr}
 800f086:	4c07      	ldr	r4, [pc, #28]	; (800f0a4 <_fstat_r+0x20>)
 800f088:	2300      	movs	r3, #0
 800f08a:	4605      	mov	r5, r0
 800f08c:	4608      	mov	r0, r1
 800f08e:	4611      	mov	r1, r2
 800f090:	6023      	str	r3, [r4, #0]
 800f092:	f7f1 fbd2 	bl	800083a <_fstat>
 800f096:	1c43      	adds	r3, r0, #1
 800f098:	d102      	bne.n	800f0a0 <_fstat_r+0x1c>
 800f09a:	6823      	ldr	r3, [r4, #0]
 800f09c:	b103      	cbz	r3, 800f0a0 <_fstat_r+0x1c>
 800f09e:	602b      	str	r3, [r5, #0]
 800f0a0:	bd38      	pop	{r3, r4, r5, pc}
 800f0a2:	bf00      	nop
 800f0a4:	200068a8 	.word	0x200068a8

0800f0a8 <_isatty_r>:
 800f0a8:	b538      	push	{r3, r4, r5, lr}
 800f0aa:	4c06      	ldr	r4, [pc, #24]	; (800f0c4 <_isatty_r+0x1c>)
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	4605      	mov	r5, r0
 800f0b0:	4608      	mov	r0, r1
 800f0b2:	6023      	str	r3, [r4, #0]
 800f0b4:	f7f1 fbd1 	bl	800085a <_isatty>
 800f0b8:	1c43      	adds	r3, r0, #1
 800f0ba:	d102      	bne.n	800f0c2 <_isatty_r+0x1a>
 800f0bc:	6823      	ldr	r3, [r4, #0]
 800f0be:	b103      	cbz	r3, 800f0c2 <_isatty_r+0x1a>
 800f0c0:	602b      	str	r3, [r5, #0]
 800f0c2:	bd38      	pop	{r3, r4, r5, pc}
 800f0c4:	200068a8 	.word	0x200068a8

0800f0c8 <_init>:
 800f0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0ca:	bf00      	nop
 800f0cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0ce:	bc08      	pop	{r3}
 800f0d0:	469e      	mov	lr, r3
 800f0d2:	4770      	bx	lr

0800f0d4 <_fini>:
 800f0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0d6:	bf00      	nop
 800f0d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0da:	bc08      	pop	{r3}
 800f0dc:	469e      	mov	lr, r3
 800f0de:	4770      	bx	lr
